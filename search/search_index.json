{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"MiSTer-kun Cat by hewhoisred and MiSTer Logo by Conrad Fenech"},{"location":"#what-is-mister-fpga","title":"What is MiSTer FPGA?","text":"<p>MiSTer is an open source project that aims to recreate classic computers, video game consoles, and arcade machines using modern hardware. It allows software and game images to run as they would on original hardware while using peripherals such as mice, keyboards, joysticks and other game controllers. MiSTer utilizes an FPGA board called the DE10-Nano which connects to your TV or monitor via HDMI video out. It can also be expanded with various add-on boards such as a 7-port USB hub, a 128MB SDRAM module, and either a Digital I/O or Analog I/O board. The MiSTer project is currently under active development with new cores, features, and bug-fixes appearing on a regular basis.</p> <p>Check the navigation sidebar to the left for documentation on how to use your MiSTer FPGA.</p> <p>Please join the official MiSTer FPGA Discord Server for help, updates, and a very active community. Follow the official MiSTer FPGA X (formerly Twitter) account for updates, community tweets, and memes. Head to the MiSTer FPGA Forums for classic forum discussions. Check out the MiSTer FPGA Github Wiki if you couldn't find the right information in this documentation site. Check out My Life In Gaming's MiSTer FPGA 2022 Primer Guide for a comprehensive video review of the MiSTer.</p>"},{"location":"editing/","title":"Editing These Docs","text":"<p>Here's a quick guide to show you how to edit this documentation site. It's very similar to editing a wiki page, but requires a few extra steps. All edits are approved by the administrators of the MkDocs_MiSTer repository on GitHub.</p>"},{"location":"editing/#how-to-editcontribute-to-pages-on-this-documentation-site","title":"How to edit/contribute to pages on this documentation site","text":"<p>First, you will need a github account:</p> <p>Signup to GitHub</p> <p>Next you go to the page you want to edit and click on the pen icon in the top right for that page:</p> <p></p> <p>Then you need to fork the repository for this documentation. A repository is just what coders call the place where they store all the code for their project. A fork is just a personal copy of that repository where you can make your own changes to it. So let's click \"Fork this Repository\":</p> <p></p> <p>Now make your changes using the text editor. The MkDocs_MiSTer site uses the Markdown syntax, so make sure to follow those guidelines. The editor comes with a Preview Tab so you can see how your work may appear. Certain MkDocs specific tags or formatting (e.g. <code>{target=_blank}</code> which makes your browser open a link in a new tab):</p> <p></p> <p>Write in a short description of your changes and propose the changes that describes why you made the changes:</p> <p></p> <p>The next step is to create a pull request. Pull requests are a way of asking the repository owner to accept the changes you've made into their repository. Double check your work to make sure it is what you wanted:</p> <p></p> <p>The form to create a pull request will appear. This is your last chance to double-check your work before creating the pull request to ask the owner to \"merge\" your changes into the main repository. Merging these changes will update the site momentarily, so make sure the changes you made are correct:</p> <p></p> <p>In this case, the user birdybrain submitted a very goofy change, and as such his pull request was denied (and closed). This upset birdybrain quite a bit and he was disrespectful in his reply. Be respectful and understanding and try to work with the owners of the repository. Don't be like birdybrain here:</p> <p></p> <p>Hopefully that helps you learn how to edit the documentation on this site. If you completed this and edited a page, congratulations! You now should know how to use GitHub, fork a repository, commit changes to the source code, and create a pull request.</p>"},{"location":"advanced/audio/","title":"Audio Filters","text":"<p>The MiSTer has audio filters that you can use to make the audio sound less harsh and balanced to your ears. Some old game systems were not made for raw digital output, they had analog audio filters in place before the sound reached the speakers and your ears. These filters are generated using mathematical formulas to represent real common filters used in electronics. You can find all of the filters in the Filters_MiSTer Github Repository.</p>"},{"location":"advanced/audio/#types-of-filters","title":"Types of Filters","text":"<p><code>Arcade LPF</code> - The filters contained within this folder are designed to replicate the filtering of common arcade cabinets. Many arcade games' raw audio output is very harsh on the ears, and using the filters in here can help soften the sound to be more pleasing. 1st and 2nd refers to the amount of passes the filter goes through. LPF stands for \"low-pass filter\". The #khz tells you what frequency it starts filtering at.</p> <p><code>Core Specific</code> - These are for specific cores. Currently there is only one core-specific filter and it is in order to replicate the filtering of one model of Super Nintendo.</p> <p><code>General LPF</code> - These are more generalized low pass filters. The filters in this folder have a significantly different cutoff frequency when compared to the arcade cores.</p>"},{"location":"advanced/audio/#audio-filtering-example-video","title":"Audio Filtering Example Video","text":""},{"location":"advanced/computer/","title":"Computer Core Networking","text":"<p>There are many computer-core specific features and functionality to go over. Here are a few:</p>"},{"location":"advanced/computer/#computer-core-internet-and-console-connections","title":"Computer core Internet and console connections","text":"<p>Starting from 2018 may 7 release MiSTer supports serial (UART) connection from FPGA to Linux. Linux OS runs PPP or Console daemon on this connection allowing access the internet or Linux shell from FPGA cores.</p>"},{"location":"advanced/computer/#cores-supporting-serial-connection","title":"Cores supporting serial connection","text":"<ul> <li> <p>Minimig. Tested on Roadshow TCP/IP, AmiTCP and Miami. </p> <ol> <li>AmiTCP provides more complete solution with ftpd daemon. There are many other 3rd party addons are based on AmiTCP, so it's advised to use this package.</li> <li>Roadshow works very well, it is fully compatible with AmiTCP and offers additional extensions. Follow these Instructions for complete setup.  It is still a paid for and supported product, you can find more information here.</li> <li>Miami was successfully tested. The Miami settings that worked: use PPP connection via serial.device, set baud rate to 115200, RTS/CTS to on, and enable 8N1. Set modem to nullmodem. Manually enter an IP suitable for your lan ending in 254, e.g. 192.168.1.254. Manually add a DNS server, e.g. 8.8.8.8 for Google DNS. Term v4.7 has been used to test console connection. For a more detailed MiamiDX setup guide, please check here</li> <li>You can also double the speed on Minimig by modifying the /sbin/uartmode script, like mine: <pre><code>echo \"$localip:$remoteip\" &gt;/tmp/ppp_options\ncat /media/fat/linux/ppp_options &gt;&gt;/tmp/ppp_options\n\necho 1 &gt; /proc/sys/net/ipv4/ip_forward\n[ -f /tmp/CORENAME ] &amp;&amp; core_name=$(cat /tmp/CORENAME)\n    if [ \"$core_name\" == \"Minimig\" ]; then\n        taskset 1 pppd 230400 file /tmp/ppp_options\n    else\n        taskset 1 pppd $conn_speed file /tmp/ppp_options\n    fi\n</code></pre> Of course, change the baud rate as well to 230400 on your TCP/IP stack of choice. Tested under MiamiDX, no issues.</li> </ol> </li> <li> <p>ao486. PPP and serial connections are working under DOS, tested with mTCP and various terminal software. PPP is also working under Win3.11/Win95/Win98/NT 4.0. DOS tools are here : dos_ftpd.zip. The DOS FTP server included does not support passive mode, so set your client to use active.</p> </li> <li>PC XT. PPP and serial connections are working under DOS, tested with mTCP/DOS PPP and various terminal software.</li> <li>C64. Serial connection.</li> <li>Tandy Color Computer 3 (CoCo3). Serial Connection.</li> <li>Macintosh Plus. Serial and PPP support.</li> <li>AtariST. Serial and PPP support.</li> <li>Apple IIe. Serial Connection</li> </ul> <p>OSD provides an option to switch between PPP and Console on these cores. Both console and PPP are using baud rate 115200 8N1 mode with hardware RTS/CTS flow control for stability.</p>"},{"location":"advanced/computer/#console-connection","title":"Console connection","text":"<p>Using this connection with supported terminal application on FPGA core, you can access the Linux shell and do some file managements or Linux settings if required.</p> <p>No special settings are required of Linux. </p>"},{"location":"advanced/computer/#ppp-connection","title":"PPP connection","text":"<p>Using this connection core may have internet connection. More important, the core may run ftp daemon and provide access to its filesystem, so you can use FTP client on PC to move the files to/from the emulated system.</p> <p>PPP daemon uses /media/fat/linux/ppp_options (linux\\ppp_options of PC) file. Most likely you don't need to modify it. Recent update assigns IPs automatically. Core gets .254 IP (for example 192.168.1.254). If you want to use other IP or your router has the .254, then modify ppp_options file.. At the bottom of the file uncomment and modify the last line: <pre><code># You may explicitly define local and remote IPs for PPP link.\n# new MiSTer releases don't require it anymore.\n# IPs entered here will override automatically assigned IPs.\n#192.168.1.1:192.168.1.10\n</code></pre> <p>For correct PPP work, make sure you see a network icon in Menu core before starting the other core. Otherwise PPP link won't get IPs. If you've started core earlier, then simply connect the core to PPP and disconnect. Next connection will get correct IP. Or you can switch UART mode in OSD to renew the IP.</p>"},{"location":"advanced/computer/#ppp-connection-in-ms-dos-on-ao486","title":"PPP connection in MS-DOS on ao486","text":"<ol> <li>In the Mister System Menu Win+F12 set the \"Uart Connection\" to \"PPP\", Baud to \"115200\" and save it.</li> <li>Download the DOS PPPD driver: DOSPPP06.ZIP from HERE.</li> <li>Grab the latest version of Michael Brutman's mTCP TCP/IP applications for MS-DOS, from the 'Downloads' section HERE</li> <li>Transfer those zip files over to your ao486's virtual hard drive and unzip them into the directory of your choice (e.g. C:\\NETWORK)</li> <li>In MS-DOS on the core, you need to edit a mtcp config file. There's a sample config in the SAMPLES directory called 'sample.cfg' that you can use as a base,  or you can use the example below (simple text file named mtcp.cfg in your installation folder). If you use the sample.cfg file, you need to add the top MTCPSLIP line.: <pre><code>SET MTCPSLIP=true\nmtu 1500\npacketint 0x60\nhostname ao486_fpga\nIPADDR 192.168.1.254 &lt;- Change this to reflect your network. Only the first three octets (e.g. 192.168.1), the last .254 is the default IP assigned to the core !!!\nNETMASK 255.255.255.0\nGATEWAY 192.168.1.1 &lt;- Change this to reflect your network.\nNAMESERVER 8.8.8.8 &lt;- You can change this to reflect your network if you want to.\nLEASE_TIME 86400\nIRCJR_USER FPGA_User\nIRCJR_NICK fpga_user\nIRCJR_NAME FPGA_User\n</code></pre></li> <li>Edit your AUTOEXEC.BAT and add the path to your installation folder, as well with the MTCP variable: <pre><code>PATH C:\\DOS;C:\\NETWORK\nSET MTCPCFG=C:\\NETWORK\\MTCP.CFG\n</code></pre></li> <li>The DOS PPPD driver archive includes the ppp packet driver, which you need to load: <pre><code>epppd com1 115200 local\n</code></pre></li> <li>Enjoy telnet, ftp, irc, and other internet applications while you use MS-DOS. Be sure and make sure you have ANSI.SYS loaded in CONFIG.SYS if you want to use the telnet client to hit telnet BBSes. Original discussion HERE.</li> </ol>"},{"location":"advanced/computer/#ppp-connection-in-windows-311-on-ao486","title":"PPP connection in Windows 3.11 on ao486","text":"<ol> <li>In the Mister System Menu Win+F12 set the \"Uart Connection\" to \"PPP\", Baud to \"115200\" and save it.</li> <li>Get the Trumpet Winsock PPP client<ul> <li>Download the software.  There are other newer versions available BUT be warned only version 3.0 will work.<ul> <li>Trumpet Winsock 3.0</li> </ul> </li> </ul> </li> <li>License the Software - This software is still shareware (time limited) please license it appropriately. Once you acquire a license you can put the details in Tcpman in the \"Special\" menu in \"Password registration\"</li> <li>Configure Software  <ul> <li>Start Tcpman</li> <li>Under File--&gt;PPP Options ensure all checkboxes are unchecked and the text boxes are blank.</li> <li>Under File--&gt;Setup Enter an \"IP Address\" suitable for your LAN eg 192.168.1.254 and a \"DNS Server(s)\" 192.168.1.1<ul> <li>Under the Driver section select the PPP radio button and click on \"Dialer settings...\"  </li> </ul> </li> <li>In the \"Dialer settings...\"  <ul> <li>\"COMM port\" COM1  </li> <li>\"Baud rate\" 115200</li> </ul> </li> </ul> </li> </ol>"},{"location":"advanced/computer/#ppp-connection-in-windows-9598-on-ao486","title":"PPP connection in Windows 95/98 on ao486","text":"<ol> <li>In the Mister System Menu Win+F12 set the \"Uart Connection\" to \"PPP\", Baud to \"115200\" and save it.</li> <li>Get the modem driver from HERE and transfer it to your VHD or a floppy image<ul> <li>Click the Windows 95 Start button, point to Settings, and then click Control Panel. Double-click Add New Hardware</li> <li>Select No to Windows search for new harware. Click Next, then select Modem from next page.</li> <li>Check \"Don't detect my modem\", then Have disk on the next page. Navigate to modem9x.inf location and install it.</li> </ul> </li> <li>Install Dial-Up Networking:<ul> <li>Click the Windows 95 Start button, point to Settings, and then click Control Panel. Double-click Add/Remove Programs.</li> <li>Click the Windows Setup tab. Select Communications. Click Details, select Dial-Up Networking and click OK.</li> <li>Click OK to close the Windows Setup dialog box. Now Dial-up networking should be now under \"My Computer\".</li> </ul> </li> <li>Create a dial-up connection<ul> <li>Open My Computer then Dial-Up Networking. Double-click on Make New Connection.</li> <li>Name it to your liking, be sure to select Generic NULL Modem. Use any phone number you want, it won't matter. Hit Next then Finish to end setup</li> <li>Right-click on the newly made connection, then Properties:<ul> <li>General tab - make sure the Generic Null Modem is selected and set to COM 1, 115200 baud</li> <li>Server Types tab - Select \"PPP: Windows 95, Windows NT 3.5, Internet\" and Uncheck everything except TCP/IP</li> </ul> </li> <li>Hit OK, then double-click on thee dial-up connection to connect. You should have now a working PPP connection under Win95/98.</li> </ul> </li> <li>Important: DNS is not acquired automatically by Windows 95 (or Windows NT) unless either:<ul> <li>Click on TCP/IP Settings in the above Server Types tab, TCP/IP Settings  and configure static name servers (either by using your router's internal IP address - usually .1 - or Google public ones like 8.8.8.8)</li> <li>Login into your MiSTer by SSH or F9, go to /media/fat/linux and change your ppp_options file by uncommenting (delete the front #) and modifying the IP addresses from \"ms-dns\" entries: <pre><code># /etc/ppp/options\n\n# Specify which DNS Servers the incoming Win95 or WinNT Connection should use\n# Two Servers can be remotely configured\nms-dns 192.168.1.1  #CHANGE it to your network's needs\nms-dns 8.8.8.8         #or  8.8.4.4 etc\n</code></pre></li> </ul> </li> </ol>"},{"location":"advanced/computer/#ppp-connection-in-windows-nt-40-on-ao486","title":"PPP connection in Windows NT 4.0 on ao486","text":"<p>The full how-to install Windows NT 4.0 and PPP setup on MiSTerFPGA forum:</p> <ol> <li>In the Mister System Menu Win+F12 set the \"Uart Connection\" to \"PPP\", Baud to \"115200\" and save it. Important: Plain 115200, not Turbo one !!!</li> <li>Get the modem driver from HERE and transfer it to your VHD or a floppy image</li> <li>Mount Windows NT 4.0 CD-ROM image </li> <li>Open My Computer and click on the Dial-Up Networking. When prompted, navigate to /i386 folder on the CD-ROM. There will be the \"rascfg\" files and the rest needed for setup.</li> <li>During setup, when Remote Access Setup asks you to add a modem, hit Yes, then in the following window, check \"Don't detect my modem...\". In the next window, click on \"Have disk\" and point to where modem9x driver is.</li> <li>From that point on, the setup will take you to use the Generic null modem, hit OK, hit Continue, check only TCP/IP when prompted then again Continue. Setup will continue and at some point it will ask you to restart.</li> <li>After installing Dial-Up Networking, you will get an Event Error at every boot. It doesn't break PPP, but get rid off it by re-running the Service Pack 6 (mount misternt.iso CD-ROM and run sp6ai386) and restart again when asked.</li> <li>The New Phonebook Entry Wizard will appear after, name your connection to your liking and Check \"I know all about phonebook....\" box to jump to finish. You can use any number (I used 555-1234).</li> <li>Click on More then Edit entry and modem properties<ul> <li>Basic tab - be sure to  have \"Dial using\" set to Generic NULL modem (COM1), speed set to 115200</li> <li>Server tab - uncheck everything except TCP/IP, Dial up server type should be \"PPP: WinNT, 98 Plus, Internet\"</li> </ul> </li> <li>Important: DNS is not acquired automatically by Windows NT (or Win95) unless either:<ul> <li>Click on TCP/IP Settings in the above Server tab and use configure static Nameserver (either by using your router's internal IP address - usually .1 - or Google public ones like 8.8.8.8)</li> <li>Login into your MiSTer by SSH or F9, go to /media/fat/linux and change your ppp_options file by uncommenting (delete the front #) and modifying the IP addresses from \"ms-dns\" entries: <pre><code># /etc/ppp/options\n\n# Specify which DNS Servers the incoming Win95 or WinNT Connection should use\n# Two Servers can be remotely configured\nms-dns 192.168.1.1  #CHANGE it to your network's needs\nms-dns 8.8.8.8         #or  8.8.4.4 etc\n</code></pre></li> </ul> </li> </ol>"},{"location":"advanced/computer/#ppp-connection-in-ms-dos-on-pc-xt","title":"PPP connection in MS-DOS on PC XT","text":"<p>Instructions would be the same as for DOS under ao486, the only difference is that the PPP connection will use COM 2 serial port on the XT core, instead of COM 1 as on ao486:</p> <ol> <li>In the Mister System Menu Win+F12 set the \"Uart Connection\" to \"PPP\", Baud to \"115200\" and save it.</li> <li>Download the DOS PPPD driver: DOSPPP06.ZIP from HERE.</li> <li>Grab the latest version of Michael Brutman's mTCP TCP/IP applications for MS-DOS, from the 'Downloads' section HERE</li> <li>Transfer those zip files over to your PC XT's virtual hard drive and unzip them into the directory of your choice (e.g. C:\\NETWORK)</li> <li>In MS-DOS on the core, you need to edit a mtcp config file. There's a sample config in the SAMPLES directory called 'sample.cfg' that you can use as a base,  or you can use the example below (simple text file named mtcp.cfg in your installation folder). If you use the sample.cfg file, you need to add the top MTCPSLIP line.: <pre><code>SET MTCPSLIP=true\nmtu 1500\npacketint 0x60\nhostname PCXT_fpga\nIPADDR 192.168.1.254 &lt;- Change this to reflect your network. Only the first three octets, the last .254 is the default IP assigned to the core !!!\nNETMASK 255.255.255.0\nGATEWAY 192.168.1.1 &lt;- Change this to reflect your network.\nNAMESERVER 8.8.8.8 &lt;- You can change this to reflect your network if you want to.\nLEASE_TIME 86400\nIRCJR_USER FPGA_User\nIRCJR_NICK fpga_user\nIRCJR_NAME FPGA_User\n</code></pre></li> <li>Edit your AUTOEXEC.BAT and add the path to your installation folder, as well with the MTCP variable: <pre><code>PATH C:\\DOS;C:\\NETWORK\nSET MTCPCFG=C:\\NETWORK\\MTCP.CFG\n</code></pre></li> <li>The DOS PPPD driver archive includes the ppp packet driver, which you need to load: <pre><code>epppd com2 115200 local\n</code></pre></li> </ol>"},{"location":"advanced/computer/#serial-connection-on-c64","title":"Serial connection on C64","text":"<p>The following is an example for connecting to a BBS using Striketerm 2014 and VIC-101 2400 baud mode:</p> <ol> <li>Start the C64 core (please note that custom kernels may remove functionality required, if in doubt use the built in kernel).</li> <li>In the Mister C64 Menu Win+F12 , go to \"Hardware\", set the \"Expansion\" to \"RS232\", \"RS232 Connection\" to \"Internal\", \"RS232 mode\" to \"VIC-1011\" and save it.</li> <li>In the Mister System Menu Win+F12 set the \"Uart Connection\" to \"Modem\", Link to \"TCP\", Baud to \"2400\" and save it.</li> <li>Load Striketerm 2014 from d64. Available from here</li> <li>Keep the defaults in the Main Menu F1 , ensure you are running at 2400 baud.</li> <li>Save a BBS into the Addressbook F5, you can get some from here</li> <li>Surf the BBS very slowly...</li> </ol> <p>The following is an example for connecting to a BBS using CCGMS Ultimate and UP9600 mode:</p> <ol> <li>Start the C64 core (please note that custom kernels may remove functionality required, if in doubt use the built in kernel).</li> <li>In the Mister C64 Menu Win+F12 , go to \"Hardware\", set the \"Expansion\" to \"RS232\", \"RS232 Connection\" to \"Internal\", \"RS232 mode\" to \"UP9600\" and save it.</li> <li>In the Mister System Menu Win+F12 set the \"Uart Connection\" to \"Modem\", Link to \"TCP\", Baud to \"9600\" and save it.</li> <li>Load CCGMS Ultimate from d64, available here</li> <li>Hit F7 key to access configuration page, then M to change the modem to \"UP9600/EZ232\", then B to set the baud speed to \"9600\". Save the config with the S key.</li> <li>Access the Phonebook with A key from the same configuration page, save some BBS addresses from here</li> <li>Enjoy the faster BBS experience.</li> </ol>"},{"location":"advanced/computer/#serial-connection-on-color-computer-3-coco3","title":"Serial connection on Color Computer 3 (CoCo3)","text":"<p>The following is an example for connecting to a BBS using UltimaTerm 4.0:</p> <ol> <li>Start the CoCo3 core (use Multi-pak Slot 4 Disk or Slot 2 CoCoSDC)</li> <li>In the MiSTer System Menu Win+F12  set the \"Uart Connection\" to \"Modem\", Link to \"TCP\", Baud to \"9600\" and save it.</li> <li>Mount UltimaTerm DSK file, obtainable HERE</li> <li>Load UltimaTerm by issuing: <code>LOADM\"ULTIMATE</code></li> <li>Hit Alt+O to open Options Menu, then M for Modem options. Use B to modify the baud rate (Left or Right arrows to change values) to 9600. The rest of the settings should be default (word length 8, parity none, stop bits 1, duplex full, terminal type ANSI). </li> <li>Save your changes with Alt+D then F1 key.</li> <li>Hit Alt+A to open Phonebook, add a BBS and dial away.</li> <li>Alternatively, you can dial directly by issuing an <code>ATDTBBS_Address:port</code>. Full UltimaTerm 4.0 Documentation HERE</li> </ol>"},{"location":"advanced/computer/#serial-connection-on-apple-iie","title":"Serial connection on Apple IIe","text":"<p>Apple IIe has serial support via implemented SuperSerial Card in Slot 2. While theoretically some programs may use up to 19200 baud, I found it to be more stable at 1200 and/or 2400 baud.</p> <p>Terminal programs tested:</p> <ul> <li>ACT - Apple Conference Terminal v.3.0.3 HERE</li> <li> <p>Practical Peripherals Communication Program for Apple II v.1.01 HERE</p> </li> <li> <p>Start the Apple IIe core</p> </li> <li>In the MiSTer System Menu Win+F12  set the \"Uart Connection\" to \"Modem\", Link to \"TCP\", Baud to \"1200\" and save it.</li> <li>Load either of terminal programs listed above, both have intuitive menus and 80 column modes</li> <li>Configure the terminal's baud speed to match the one set earlier (e.g. 1200 baud, Word Length 8, Stop Bits 1, Parity None, SuperSerial Card Slot 2)</li> <li>Enter in terminal mode and ATDT your favorite BBS</li> </ul>"},{"location":"advanced/console/","title":"Console Connection","text":"<p>The DE10-nano board has console port. The console allows you to login into Linux without a network connection and also provides some debug/info which sometimes useful to track the problems.</p> <p>Refer to the UART-to-USB (USB Mini-B) connector on the board right side in the picture below:</p> <p></p>"},{"location":"advanced/console/#connect-with-windows","title":"Connect with Windows","text":"<p>Connect the DE10-nano board to a PC using the UART-to-USB (USB mini type B) connector next to micro-USB. The PC will recognize it as virtual COM port. Use any console application to connect to this COM port. I recommend Putty.</p> <p>Verify that COM port settings are correct:</p> <ul> <li>Speed (baud rate) - 115200 bits per second</li> <li>Data bits - 8</li> <li>Stop bits - 1</li> <li>Parity - none</li> <li>Flow control - none</li> </ul> <p>Here's a quick video for connections on Windows:</p> <p> </p>"},{"location":"advanced/console/#linux-connections","title":"Linux Connections","text":"<ol> <li>Be sure to be a member of the dialout group.</li> <li>Your serial port is likely to be /dev/ttyUSB0</li> <li>Configure it: <code>$ stty -F /dev/ttyUSB0 115200 cs8 -cstopb -parenb -ixoff -ixon</code></li> <li>Look at the output while dumping it to a file: <code>cat /dev/ttyUSB0 | tee mr.log</code></li> </ol> <p>Now mr.log has a copy of all the information shown in the screen.</p>"},{"location":"advanced/console/#u-boot-command-prompt","title":"U-Boot command prompt","text":"<p>To interrupt u-boot and get into the u-boot command prompt once connected to the DE10-Nano, hold 'ESC' on the PC and then power on or reboot the Nano (using the reset button). Startup should be interrupted and you should see a '=&gt;' prompt. Here you can edit the kernel boot options etc.</p>"},{"location":"advanced/crt/","title":"Using Your CRT With MiSTer","text":"<p>There are a few different ways you can use your MiSTer with a classic CRT display. The two main methods are either using the VGA port on the Analog IO board or using a specific Direct Video HDMI to VGA adapter.</p> <p>The vast majority of this content is from the guide written by MikeS11 and ArchiveRL on the MiSTer FPGA GitHub Wiki</p>"},{"location":"advanced/crt/#mister-crt-connectivity-options","title":"MiSTer CRT Connectivity Options","text":""},{"location":"advanced/crt/#boards-converters","title":"Boards / Converters","text":"<p>You can connect MiSTer natively to a CRT set using two methods: either by installing the analogue I/O board and using its VGA output or by connecting an HDMI-to-VGA DAC dongle directly to DE10 Nano's HDMI socket. Both of these methods produce nearly identical image which in most cases should match the output of the original hardware 1:1. Apart from that, they also have their specific pros &amp; cons:</p> <ul> <li>Analog I/O board</li> <li>Pros: extra features (buttons, led lights, etc), doesn't need SoG mod to connect to component</li> <li>Cons: more expensive, lesser colour depth in some cores, can't use Dual SDRAM</li> <li>Direct Video</li> <li>Pros: better colour depth, much cheaper</li> <li>Cons: no extra features, needs extra modification for component, not all the dongles are guaranteed to work</li> </ul> <p>Once you have acquired either an I/O board or a Direct video adapter, you will need to connect it to your TV via a cable and also change some settings in the mister.ini file.</p>"},{"location":"advanced/crt/#cables","title":"Cables","text":"<ul> <li> <p>for consumer TVs (15kHz) with RGB SCART (via both I/O board &amp; Direct Video) - Apart from I/O board or Direct Video dongle you'll also need a special cable. You can either make one or buy it online. It's recommended to get a cable with a 470 ohm resistor on the Composite Sync line (best ask the seller if it already has one)</p> </li> <li> <p>Here are some possible sources: Misteraddons (US), Retro Access (UK), Ultimatemister (PT), Wolfsoft (DE), Antoniovillena (ES).</p> </li> <li> <p>You can also get a MiST cable, it works in general but might be lacking the 470 Ohm resistor and is generally \"not guaranteed\": Lotharek (PL), Amigastore (EU).</p> </li> <li> <p>Another option is to use a VGA-SCART converter, plus normal SCART/VGA cables. Possible sources: Antoniovillena (SP), Arcadeforge (DE), Retro Upgrades (UK).</p> </li> <li> <p>If you are connecting to a consumer Trinitron you might also need to add an extra resistor/potentiometer to fix odd or not lively enough colours forum link.</p> </li> <li> <p>consumer TVs (15kHz) with YPbPr component (via I/O board) - A standard VGA to Component cable should be enough.</p> </li> <li> <p>consumer TVs (15kHz) with YPbPr component (via Direct Video) - This will require cable modifications to add Sync on Green (SoG). Please read more here --&gt; Direct Video - Setup for YPbPr Signals or see what others have to say in the forum here --&gt;  Direct Video HDMI to Component CRT 480i TV by thorr.</p> </li> <li> <p>VGA monitors (31Khz) - A standard VGA cable should be enough.</p> </li> <li> <p>PVM/BVM monitors (via I/O board) - A standard VGA to BNC cable (3xRGB + HSync) cable should be ok.</p> </li> <li> <p>PVM/BVM monitors (via Direct Video) - A standard VGA to BNC cable (3xRGB + HSync) cable should be ok.</p> </li> <li> <p>Commodore monitors - A cable for the 1084S monitor is sold by Ultimatemister (PT).</p> </li> </ul>"},{"location":"advanced/crt/#settings","title":"Settings","text":"<p>Most of the settings changes are done in your <code>MiSTer.ini</code> file, which is located in the <code>media/fat/</code> directory of your SD card. When editing this file, it is advised to backup your currently working <code>MiSTer.ini</code> file and then use a new <code>MiSTer.ini</code> from the official repository by Right Clicking this link and clicking \"save file as\". All of the <code>MiSTer.ini</code> settings in this section assume you are using this default file. </p>"},{"location":"advanced/crt/#for-io-board","title":"For I/O BOARD**","text":"<ul> <li> <p>consumer TVs (15kHz) with RGB SCART <code>composite_sync=1</code></p> </li> <li> <p>consumer TVs (15kHz) with Component <code>ypbpr=1</code> You might need to flip the SoG switch on the I/O board</p> </li> <li> <p>VGA monitors (31khz) <code>forced_scandoubler=1</code></p> </li> </ul>"},{"location":"advanced/crt/#for-direct-video","title":"For DIRECT VIDEO**","text":"<ul> <li> <p>consumer TVs (15kHz) with RGB SCART <code>direct_video=1</code> <code>composite_sync=1</code></p> </li> <li> <p>consumer TVs (15kHz) with Component <code>direct_video=1</code> <code>composite_sync=1</code> <code>ypbpr=1</code></p> </li> <li> <p>VGA monitors (31khz) <code>direct_video=1</code> <code>forced_scandoubler=1</code></p> </li> <li> <p>for PVM/BVM monitors <code>direct_video=1</code> <code>composite_sync=1</code></p> </li> </ul>"},{"location":"advanced/crt/#connecting-to-composite-or-s-video","title":"Connecting to Composite or S-Video","text":""},{"location":"advanced/crt/#official-mister-yc-s-video-composite","title":"Official MiSTer - YC (S-Video / Composite)","text":"<p>MiSTerFPGA now natively outputs s-video / composite directly from the core. The cores generate two signals that use the existing RGB pins, where the luma (Brightness) uses the green output and the chroma (Color) uses the red output.</p>"},{"location":"advanced/crt/#connection-requirements-s-video","title":"Connection Requirements - S-Video","text":"<p>MiSTerAddons - Active Y/C Adapter and Ultimatemister - Passive Adapter. * The Active Adapters are recommended for the best quality for both composite and S-Video but the passive adapter can be a good alternative. * VGA to Component Cable (Only required for some monitors, i.e Commodore 1702) * Custom RCA to S-Video Connector</p>"},{"location":"advanced/crt/#connection-requirements-composite","title":"Connection Requirements - Composite","text":"<p>MiSTerAddons - Active Y/C Adapter and Ultimatemister - Passive Adapter. * The Active Adapters are recommended for the best quality for both composite and S-Video but the passive adapter can be a good alternative. * VGA to Component Cable to a 1-Male to 2-Female RCA Y-Adapter Splitter Cable. Warning: This method will produce severe rainbowing because of the lack of a luma trap.</p>"},{"location":"advanced/crt/#using-the-analog-io-board","title":"Using the Analog IO Board","text":""},{"location":"advanced/crt/#configuration-requirements","title":"Configuration Requirements","text":"<ul> <li>Sync on Green - OFF (If using an Active or Passive Adapter, they will generate the sync)</li> </ul>"},{"location":"advanced/crt/#ini-settings","title":"INI Settings","text":"<p><code>vga_scaler=0</code> <code>Composite sync = 1</code> <code>vga_mode=svideo</code>  Note: cvbs can also be used but is not recommended <code>ntsc_mode=0</code>      Note: 0 - normal NTSC, 1 - PAL-60, 2 - PAL-M, Note: this is currently not being used by any cores    </p>"},{"location":"advanced/crt/#using-a-direct-video-adapter","title":"Using a Direct Video adapter","text":""},{"location":"advanced/crt/#configuration-requirements_1","title":"Configuration Requirements","text":"<ul> <li>A Sync On Green Circuit is Required. Active / Passive adapters will include a SOG circuit. Alternatively for more information read  here: Direct Video - Setup for YPbPr Signals</li> </ul>"},{"location":"advanced/crt/#ini-settings_1","title":"INI Settings","text":"<p><code>Direct_video = 1</code> <code>Composite sync = 1</code> <code>vga_mode=svideo</code>  Note: cvbs can also be used but is not recommended <code>ntsc_mode=0</code>      Note: 0 - normal NTSC, 1 - PAL-60, 2 - PAL-M, Note: this is currently not being used by any cores    </p>"},{"location":"advanced/crt/#alternative-methods-of-converting-rgb-to-composite-or-s-video","title":"Alternative Methods of converting RGB to Composite or S-Video","text":"<p>Alternative methods of obtaining Composite or S-Video on a capable CRT TV set is by using a special adapter. At the moment these are available for sale from Antoniovillena and Ultimatemister (PT).</p> <p>There's also an open-source design which you can DIY: Github / forum link.</p> <p>These adapters have been reported to work well in S-Video mode, but Composite has problems with rainbow artifacting and excessive dot crawl. This is currently unavoidable and expected</p> <p>Another alternative is the Axunworks converter. It requires using a VGA-to-BNC cable with BNC-to-RCA adapters and most likely also suffers from artifacting in Composite (forum thread). Some other options reported to work well are converters from seller \"wakabavideo\" and \"Keene Scart to S-Video\" brand on ebay.</p>"},{"location":"advanced/crt/#types-of-crt-displays","title":"Types of CRT Displays","text":"<p>There are three main categories of CRTs; Consumer Televisions, Computer Monitors, and Professional Video Monitors. Some of these overlap with compatibility, but often the signals intended for one type of CRT are not ideal on another type of display. There are also different subcategories of each of these that are not very important to go into here. Generally speaking, using a CRT with the MiSTer is not a one-size-fits-all experience.</p>"},{"location":"advanced/crt/#consumer-televisions","title":"Consumer Televisions","text":"<p>Typically these are only compatible with a 15kHz frequency signal (the kind of signal video game consoles used). They were intended to be used with what is known as a \"240p\" analog signal. From the 1950's up until the late 1980's most consumer televisions only used RF video which is highly susceptible to interference, especially today. Later they began to use composite video (which is still very noisy, but less prone to interference than RF video). Some TV's would occasionally have support for S-Video (a much sharper and nicer image quality and resistant to interference), but it is less common. In many European countries these TVs also supported RGB video by way of SCART connectors (which is about as good as it gets). Finally, near the end of the life of CRT televisions in the late 90's and early 2000's they began to use Component video and even HDMI video.</p> <p>Most CRT televisions that you can buy used today (in the United States) are going to use composite video or component video. In europe it is more common, but still not a guarantee, to find CRT televisions with RGB SCART support used for sale.</p>"},{"location":"advanced/crt/#computer-monitors","title":"Computer Monitors","text":"<p>Usually computer monitors were designed for higher resolution 31kHz frequency signals. They often had support only for a VGA connector, with some very few having some other options like DVI connectors. Since these displays were made for higher resolutions there can be some jitter or undesirable effects when attempting to run a lower resolution 240p signal through them, even if it is scandoubled to 31kHz. Computer Monitors are excellent at handling retro computer video signals as that is what they were designed for. There are also Multisync Monitors which are capable of natively handling 15kHz (240p) analog signals. These are less common but are highly sought after by the CRT enthusiast community, so if you are interested in having one monitor to handle all types of signals, consider acquiring a Multisync monitor.</p>"},{"location":"advanced/crt/#professional-video-monitors","title":"Professional Video Monitors","text":"<p>Professional Video Monitors (PVMs) also go by many other names; Broadcast reference monitor, Broadcast video monitor (BVM), Medical Grade Monitor, and more. Simply put, these are displays designed for professional use that often are easy to do maintenance on, have high quality components, and were very costly for their time. Professional video monitors are still made today, but they are often OLED or LCD that are very expensive and only used in niche applications for businesses. These had a wide variety of connectivity that includes all of the previous mentioned connectors sometimes, and also had specialty connectors like BNC connectors where the Red, Green, Blue, and sync signals were made into separate connectors. There are also BNC video cable configurations that require a fifth sync-on-green cable.</p> <p>The benefit of purchasing a used professional video monitor CRT for use with retro hardware is that they have very high quality designs that have more lines displayed (crisper image), better colors, or superior display technology to that of consumer television CRTs overall. Additionally, they were often designed to be more easily serviceable and had better shielding against electromagnetic interference. Since around the mid 80's the majority of them seem to have supported native RGB input as well, so the video quality from your output source can be far superior, in theory. PVM's also typically allow for very granular control of the image through many control dials and buttons on the front. Many PVMs also support simultaneous output to mirror the image on one display to another. Finally, a good number of PVMs are also MultiSync, meaning they can support both 15kHz and 31kHz signals, and many of them also are region agnostic supporting 50hz PAL signals and 60hz NTSC signals.</p> <p>Unfortunately, PVMs are incredibly expensive today, so if you don't already have one, it may be very difficult to get one now. It is not uncommon to see a mere 9\" PVM selling for over $200 US Dollars with the 19\" to  24\" displays going anywhere from $500 to over $2000 US Dollars depending on the model's popularity and features.</p>"},{"location":"advanced/crttable/","title":"CRT Configuration Table","text":"<p>Here's a table that shows you what options correlate to what video connection, to make it a bit easier to decide what you need in order to connect to your CRT, and what settings are required in the MiSTer.ini to get it to work. There is also a physical switch on the Analog IO board, in this table it is referred to as \"SoG Switch\".</p>"},{"location":"advanced/crttable/#crt-configuration-table","title":"CRT Configuration Table","text":"Analog Video Out composite_sync= vga_mode= vga_sog= direct_video= vga_scaler= forced_scandoubler= SoG Switch RGBS Native 1 rgb 0 0 0 0 AUTO RGBS Scan-doubled\u00b9 1 rgb 0 0 0 1 AUTO RGBS Upscaled\u00b2 1 rgb 0 0 1 0 AUTO RGBS Direct\u00b3 1 rgb 0 1 0 0 N/A RGBHV Native 0 rgb 0 0 0 0 AUTO RGBHV Scan-doubled 0 rgb 0 0 0 1 AUTO RGBHV Upscaled\u00b2 0 rgb 0 0 1 0 AUTO RGBHV Direct\u00b3 0 rgb 0 1 0 0 N/A RGsB Native 1 rgb 1 0 0 0 AUTO RGsB Scan-doubled\u00b9 1 rgb 1 0 0 1 AUTO RGsB Upscaled\u00b2 1 rgb 1 0 1 0 AUTO RGsB Direct\u00b3 1 rgb 1 1 0 0 N/A YPbPr Native 0 ypbpr 1 0 0 0 OVR YPbPr Scan-doubled 0 ypbpr 1 0 0 1 OVR YPbPr Upscaled\u00b2 0 ypbpr 1 0 1 0 OVR YPbPr Direct\u00b3\u2074 0 ypbpr 0 1 0 0 N/A S-Video Native\u2075 1 svideo 0 0 0 0 N/A S-Video Converted\u2076 1 rgb 0 0 0 0 N/A Composite Native\u2075 1 svideo 0 0 0 0 N/A Composite Converted\u2076 1 rgb 0 0 0 0 N/A <p>\u00b9 Scan-doubled = 2x resolution (e.g. 240p &gt; 480p) \u00b2 Upscaled resolution = video_mode \u00b3 External \"direct video\" (HDMI to VGA) adapter required - native resolution only (no upscaling or scan-doubling \u2074 External \"direct video\" adapter requires modification to pass Sync on Green (SoG) \u2075 Active Y/C converter required \u2076 External RGB to NTSC/PAL converter required</p> <p>Credit: Porkchop Express</p>"},{"location":"advanced/directvideo/","title":"Direct Video","text":"<p>Since autumn of 2019 there is a method for outputting analog video called Direct Video that doesn't require you to install the IO Board in your MiSTer. This new method offers same minimal latency to the VGA port from the IO Board and even better color depth in some cores. To enjoy it, you just need to activate the feature in your mister.ini file and attach a DAC to your HDMI port.</p> <p></p> <p>You may use an HDMI-to-VGA converter similar to this one.</p> <p>NOTE: as of 2021/06/27 it seems very hard to find devices which are compatible with VGA to SCART adapters. Devices which work with VGA are still easy to find. More info here: https://github.com/MiSTer-devel/Main_MiSTer/issues/410</p>"},{"location":"advanced/directvideo/#list-of-adapters-which-are-known-to-work-with-direct-video","title":"List of adapters which are known to work with Direct Video","text":"Product Name Store URL Test-Date ISY IAD-1007, HDMI Adapter https://www.mediamarkt.de/de/product/_isy-iad-1007-hdmi-adapter-2737565.html 2022-12-20 HAMA HDMI\u2122-Stecker auf VGA-Buchse, Adapter, 0,15 m https://www.mediamarkt.de/de/product/_hama-hdmi%E2%84%A2-stecker-auf-vga-buchse-2708216.html 2022-12-20 HDMI - VGA-adapter https://www.jula.se/hdmi-vga-adapter-003087/ 2021-06-16"},{"location":"advanced/directvideo/#list-of-adapters-with-are-known-to-not-work-with-direct-video","title":"List of adapters with are known to NOT work with Direct Video","text":"Product Name Store URL Test-Date HDMI till VGA 1080P https://www.amazon.se/gp/product/B08HXRQGXM/ 2021-06-16 Rankie H001 1080P Aktiv HDTV HDMI till VGA-Adapter https://www.amazon.se/gp/product/B00ZMV7RL2/ 2021-06-16 HDMI auf VGA Kabeladapter https://www.amazon.de/dp/B09MF2HXGF 2022-08-04"},{"location":"advanced/directvideo/#compatibility","title":"Compatibility","text":"<p>Direct Video is compatible with most current cores and will be supported in all future cores coming to MiSTer.</p> <p>RGBs, RGsB and YPbPr are supported, although YPbPr has less display compatibility in Direct Video mode compared to YPbPr from the IO Board.</p> <p>Note that output resolution and format can vary from core to core. See the analog video configuration table for more information.</p>"},{"location":"advanced/directvideo/#how-to-use","title":"How to Use","text":"<p>First you need a simple DAC with VGA output. Those based on the chip AG6200/AG6201 (like the one in the picture) are proven to work fine and are fairly inexpensive and easy to find. Also many of them output analog audio too. The only thing we recommend is to not hotplug them or pull them out from your MiSTer while it is still ON, since you might damage your HDMI port in the process.</p> <p>Then you need to add the following line to your mister.ini file:</p> <p><code>direct_video=1</code></p> <p>This activates the Direct Video feature when the system starts. Once it's enabled, it allows your HDMI port to output the raw and unprocessed digital audio/video signal from the loaded core, which is consumed by your DAC. MiSTer will not work with your HD TV or monitor while this mode is enabled, since they require a standard HDMI signal to work, and the zero-lag Direct Video signal IS NOT standard HDMI.</p> <p>The resulting analog video signal from your DAC should be compatible with standard CRTs if the core loaded supports standard CRT refresh frequencies (see Core Default Resolutions for an incomplete list of the core default resolutions and refresh rates, your results may vary). But there is still a bit of additional configuration you need to do depending on which kind of analog video signal you want to use.</p>"},{"location":"advanced/directvideo/#setup-for-rgb-signals","title":"Setup for RGB signals","text":"<p>For analog RGB output, you'll want to enable composite sync on the HSync signal in your mister.ini (<code>composite_sync=1</code>). After that, you are good to plug in an RGB-compatible VGA-SCART cable to your TV.</p> <p>For optimal results, Retro Access sells SCART and BNC cables specifically for use with MiSTer.</p> <p>DISCLAIMER: Please be aware that many VGA DACs may output a sync signal at 3 volts or more on pin 13 (HSYNC/CSYNC) even when being used in Direct Video mode! You will need a 470 ohm resistor on the corresponding SCART sync pin to attenuate this signal to levels that are safe for all video equipment. A variety of professional video equipment can have wide tolerances for higher voltage sync signals but other devices, especially external scalers like the OSSC or XRGB Mini Framemeister, can be worn out and reduced to a non-working state by repeated use with higher-voltage sync signals. Unless you are 100% certain your equipment can tolerate higher voltage signals, it is strongly recommended that you either purchase a cable that has a 470 ohm resistor inline or add one yourself. Retro Access MiSTer SCART cables, for example, come with a resistor inline by default.</p>"},{"location":"advanced/directvideo/#setup-for-ypbpr-signals","title":"Setup for YPbPr signals","text":"<p>YPbPr - also known as Component Video - is available in Direct Video mode but has limited compatibility. This is due to limitations of HDMI-to-VGA DACs, which were not meant to produce signals in the YPbPr color space in the first place, resulting in signals that are slightly out-of-spec. It is possible that your display will accept the Direct Video YPbPr signal with no issue, but it may also appear bright pink due to the way many displays process such signals. For higher YPbPr compatibility you may prefer RGB mode with an external RGB-to-YPbPr transcoder instead, or YPbPr via the IO Board.</p> <p>To use YPbPr in Direct Video mode, you'll need to enable <code>composite_sync</code> and <code>ypbpr</code> in your mister.ini file. </p> <p>You'll also need to add a sync-on-green circuit on your VGA connection. Sync-on-green circuits can be very simple; you just need a diode (1N4148) and a 330ohm resistor (any values between 270ohm and 390ohm are advised, too high and the sync signal is too weak, too low and it's too strong).</p> <p></p> <p>Connection: from HSync -&gt; anode of diode, cathode of diode -&gt; resistor, resistor to Green signal.</p>"},{"location":"advanced/directvideo/#doubling-frequency","title":"Doubling frequency","text":"<p>This is a handy way to use those modern monitors that have VGA input but are typically not compatible with 15KHz signals, and require 31KHz analog video. In case you need it, you just have to set <code>forced_scandoubler=1</code> in your mister.ini to turn a 15KHz signal into a 31Khz one (See which cores output 15KHz video Core Default Resolutions).</p>"},{"location":"advanced/directvideo/#color-depth","title":"Color Depth","text":"<p>Direct Video produces a 24bit color signal, which is superior to the 18bit signal coming from the IO Board. However, few cores use 24bit color, so the improved color depth may not make much of an impact depending on the cores you run.</p> <p>Also, most cheap DACs, like the ones based on the chip AG6200, don't produce Full Range RGB. They instead produce Limited Range RGB (16-235) or much more commonly a nonspec Limited Range variant (16-255). In order to compensate for this, you may want to configure the <code>hdmi_limited</code> option in your mister.ini to adjust the signal being sent to your DAC.</p> <ul> <li>Full Range (0-255): <code>hdmi_limited=0</code>.</li> <li>Limited Range (16-235): <code>hdmi_limited=1</code>.</li> <li>Limited Range common DAC variant (16-255): <code>hdmi_limited=2</code>.</li> </ul>"},{"location":"advanced/diy2parcade/","title":"DIY 2-Player Arcade","text":"<p>by Sorgelig</p> <p>You have assembled an arcade cabinet and looking for connecting your joysticks and buttons? You don't need to buy any of those expensive adapters. All you need is USB keyboard which you can disassemble.</p> <p>After disassembling the keyboard you need to find the row and column contacts on board for following keys: <pre><code>        5,         1P coin\n        1,         1P start (shift key)\n        UP,        1P up\n        DOWN,      1P down\n        LEFT,      1P left\n        RIGHT,     1P right\n        LEFTCTRL,  1P button 1\n        LEFTALT,   1P button 2\n        SPACE,     1P button 3\n        LEFTSHIFT, 1P button 4\n        Z,         1P button 5\n        X,         1P button 6\n        C,         1P button 7\n        V,         1P button 8\n\n        6,         2P coin\n        2,         2P start\n        R,         2P up\n        F,         2P down\n        D,         2P left\n        G,         2P right\n        A,         2P button 1\n        S,         2P button 2\n        Q,         2P button 3\n        W,         2P button 4\n        I,         2P button 5\n        K,         2P button 6\n        J,         2P button 7\n        L,         2P button 8\n\n        9,         Test\n        TAB,       Tab (shift + 1P right)\n        ENTER,     Enter (shift + 1P left)\n        P,         P (pause) (shift + 1P down)\n        F1,        Service\n        F2,        Test\n        F3,        Tilt\n</code></pre> You can use multi-meter to find the contacts.</p> <p>Then connect your buttons/joystick to board according to table above. Your hardware part is done. Connect your modded arcade keyboard to USB and start Menu core, then go to <code>Define Joystick buttons</code>. Press any button, and you will see \"Keyboard ID: XXXX:YYYY\" where XXXX:YYYY is HW identifier of the keyboard. Press ESC to ext from this dialog. Now open MiSTer.ini and add following options there: <pre><code>jamma_vid=XXXX\njamma_pid=YYYY\n</code></pre> XXXX and YYYY are those IDs you saw for your modded keyboard. Save and restart Menu core. Go to <code>Define Joystick buttons</code> again and assign buttons using P1 buttons. Note it now writes \"Joystick ID: XXXX:YYYY\" (instead of Keyboard) which means it recognizes your modded keyboard as jamma 2-player input device. P2 buttons will be automatically assigned the same as for P1.</p> <p>Now your Arcade input device is ready to use. Unlike normal gamepads/joysticks, this device will always assign P1 and P2 inputs statically regardless P1 or P2 button was pressed first.</p>"},{"location":"advanced/ini/","title":"INI Settings","text":"<p>The MiSTer.ini configuration file contains global settings and is capable of storing core-specific settings for the MiSTer. We'll go over each of the Global settings here and then show you how to make exceptions for those global settings for each core. Then we'll describe some core-specific settings that can be used for core exceptions only.</p>"},{"location":"advanced/ini/#alternate-mister-ini-files","title":"Alternate MiSTer INI files","text":"<p>Before we get started, let's explain how the Alternate MiSTer INI files can work. MiSTer supports up to 4 .ini files in total (<code>MiSTer.ini</code> and 3 alternate INI files). You will need to create additional <code>.ini</code> files manually to use this feature. By default when your MiSTer boots, it will load <code>MiSTer.ini</code> from the root of your MicroSD card (or in <code>/media/fat/</code> if you are looking at the MiSTer remotely or from the terminal over the network). You can use hotkeys to switch to the alternate MiSTer INI files on the fly. You can also switch to Alternate MiSTer INI files in the OSD by pressing left to get to the Misc Options screen and selecting the desired INI. Hotkeys are preferred however as the screen may become unusable if there is an incompatibility. The naming scheme of the Alternate MiSter INI files is important, see the table below for the naming scheme and the corresponding hotkeys.</p> Filename Hotkey Combination <code>MiSTer.ini</code> Controller: Back + Right <code>MiSTer_alt_1.ini</code> Controller: Back + Left <code>MiSTer_alt_2.ini</code> Controller: Back + Up <code>MiSTer_alt_3.ini</code> Controller: Back + Down <p>This is useful for things like hybrid cores that can play multiple systems. For example, the Sega Master System core which also supports Game Gear games. You may want to use a <code>vscale_border</code> setting just for Game Gear games, so you can set up an alternate MiSTer INI file by copying your current <code>MiSTer.ini</code> and renaming it to <code>MiSTer_alt_1.ini</code>, editing the <code>vscale_border</code> option just in that one will allow you to apply a border to Game Gear games on the fly. Another example is if you want to switch your <code>video_mode</code> (screen resolution) on the fly for various reasons, or if you want to switch your <code>vsync_adjust</code> option on the fly.</p>"},{"location":"advanced/ini/#alternate-mister-ini-naming-option","title":"Alternate MiSTer INI Naming Option","text":"<p>You can also have some alternative named MiSTer.ini files and they will appear named in the OSD Information screen when you press Left on the gamepad/keyboard where the IP address and resolution are showng. The regular <code>MiSTer.ini</code> is called \"Main\", whereas the custom named ones will show up as whatever comes after the underscore. For example, <code>MiSTer_CRT.ini</code> will be selectable in the config section and be called \"CRT\" next to \"Main\".</p>"},{"location":"advanced/ini/#general-video-settings","title":"General Video Settings","text":"<p><code>vscale_mode</code> - Changes how the image is scaled to the screen. 0 will fit the whole image to screen, 1 is 1:1 integer scaled, 2 uses 0.5 steps to scale, and 3 uses 0.25 steps to scale.</p> <p><code>vscale_border</code> - Sets an overscan border to the screen in number of pixels (1-399)</p> <p><code>hdmi_limited</code> - Changes the color range output over HDMI. 0 = <code>0-255</code>, 1 = <code>16-235</code>, and 2 = <code>16-255</code>. A setting of 2 can be useful if you have problems with some Digital Video adapters. It can also help if your screen has a dynamic backlight and you want to brighten things up, to change the setting to 1.</p> <p><code>fb_size</code> - Effects the scaling of things drawn to the Linux framebuffer, such as when you run scripts. Best left to 0 for automatic.</p> <p><code>video_mode</code> - Sets the resolution for HDMI and VGA_Scaler output. This can be one of the premade values from 0-13 or it can be a custom video mode. See the notes in the .ini Master for custom video mode syntax. There is also a useful custom video mode tool by morf77 available here which can be used in conjunction with a modeline calculator.</p> <p><code>video_info</code> - Number of seconds that it will display the video info in the top left corner of the screen whenever the resolution or frequency has changed.</p> <p><code>vsync_adjust</code> - Adjusts the buffer settings for the frames sent to the display. For more details on how this works, see the Video Configuration's vsync_adjust section. Essentially, the values of <code>0-2</code> are in order of most compatible+highest lag to least compatible+lowest lag.</p> <p><code>refresh_min</code> - Forces a minimum refresh rate.</p> <p><code>refresh_max</code> - Forces a maximum refresh rate.</p>"},{"location":"advanced/ini/#analog-video-settings","title":"Analog Video Settings","text":"<p><code>forced_scandoubler</code> - VGA output will always run in 31kHz mode (scandoubled) if this setting is turned on, useful for computer CRT's.</p> <p><code>vga_mode=rgb</code> - Changes the VGA output to a rgb, ypbpr, svideo, cvbs. rgb is default.</p> <p><code>ntsc_mode=0</code> - Only for S-Video and CVBS vga_mode. 0 - normal NTSC, 1 - PAL-60, 2 - PAL-M. Note: No cores officially use these settings.</p> <p><code>composite_sync</code> - Sends the sync signal on Hsync over VGA output, needed for certain configurations.</p> <p><code>vga_scaler</code> - Sends the scaler output to the VGA port (either Analog IO or Direct Video). This is usually used with computer CRTs and other 31kHz displays which are not compatible with 240p TV signals.</p> <p><code>menu_pal</code> - Forces the Menu core to run in PAL mode.</p> <p><code>direct_video</code> - This changes the HDMI output to an analog signal, only supported with certain Direct Video Adapters that have AG62xx chipsets. If you have issues with color or no image, in addition to checking <code>composite_sync</code> and <code>ypbpr</code> options, you can also try changing <code>hdmi_limited</code> to <code>1</code>. If you are using <code>ypbpr</code> with component cables, the Direct Video adapter will need a modification to combine HSYNC and Green in order to work.</p> <p><code>fb_terminal</code> - Best left at 1. If you have issues with running scripts on a CRT or Analog display, try switching this to 0 to see if that helps.</p> <p><code>vga_sog=0</code> - Forces Sync on Green using the Analog IO board. (Ignores Switch)</p>"},{"location":"advanced/ini/#audio-settings","title":"Audio Settings","text":"<p><code>hdmi_audio_96k</code> - Changes the HDMI audio sampling rate from 48kHz (default) to 96kHz. This can help with the audio of some systems that have strange sampling rates (like Turbografx-16's sampling rate of 32.088kHz for instance).</p> <p><code>dvi_mode</code> - DVI mode over the HDMI connection, this disables audio transmission over HDMI when turned on.</p>"},{"location":"advanced/ini/#controller-settings","title":"Controller Settings","text":"<p><code>mouse_throttle</code> - Can be used to change the speed of your mouse (1-100). Good for very sensitive mice.</p> <p><code>gamepad_defaults</code> - </p> <p><code>bt_auto_disconnect</code> - Amount of minutes of inactivity before Bluetooth disconnects automatically. Default is 0 (off).</p> <p><code>bt_reset_before_pair</code> - Resets bluetooth adapter before pairing dialog. If you enable this some input devices may get shutdown after a reset.</p>"},{"location":"advanced/ini/#menu-settings","title":"Menu Settings","text":"<p><code>rbf_hide_datecode</code> - Hides the date codes from the core names in the core selection menu.</p> <p><code>osd_timeout</code> - The length of time the OSD is displayed when brought up and no inputs have been pressed. 0 - never timeout, and the range of values are 5-3600 seconds.</p> <p><code>osd_rotate</code> - Rotate the OSD. Useful for when you rotate your monitor for certain Arcade cores. 0 - no rotation, 1 - rotate right (+90\u00b0), and 2 - rotate left (-90\u00b0).</p>"},{"location":"advanced/ini/#debug-settings","title":"Debug Settings","text":"<p><code>log_file_entry</code> - Writes filename under the curse in browser for use by external integrations.</p>"},{"location":"advanced/ini/#adding-core-specific-settings","title":"Adding Core-specific Settings","text":"<p>It is possible to specify different settings for different cores; for example, you may prefer to use integer scaling just for the Game Boy Advance core so that you don't need any video filters for smooth scrolling. Simply add a section at the end of the INI file with the core name in brackets and paste your different settings below there, like so:</p> <pre><code>[GBA]\nvscale_mode=1\n</code></pre> <p>Or, suppose you wanted to add an option to select 8:7 aspect ratio for the SNES core: <pre><code>[SNES]\ncustom_aspect_ratio_1=8:7\n</code></pre></p> <p>The Menu core can have its own settings too. Create a section named <code>[Menu]</code> to specify settings for it.</p> <p>You can also make exceptions for all Arcade cores with the <code>[arcade]</code> header in the same way, and you can have separate settings for vertical arcade cores by using <code>[arcade_vertical]</code> because you may want a different video preset by default for vertical oriented arcard cores.</p>"},{"location":"advanced/lag/","title":"Lag Explained","text":"<p>A common concern among retro enthusiasts is whether a device of this sort has lag and whether it will create a less desirable experience compared to original hardware. </p> <p>Every electronic equipment exhibits some kind of latency, but it only becomes problematic if this latency causes frames to be missed. A frame is typically 16ms for a system using a 60 frames per second (60 Hz) display.</p> <p>Lag is only problematic in a few specific cases:</p> <ul> <li>Some older games were designed to rely on extremely quick response times (e.g. Punch-Out on NES).</li> <li>If the latency is different between two players, it could introduce an unfair advantage.</li> <li>Lag that isn't constant can be an issue on games that require precise movement. (Most players can adapt to lag that is consistent.)</li> </ul> <p>There are three major categories of lag. Input, which involves controllers, mouse, etc, Processing, which would involve buffering in the core, execution or delays in code and Display which involves the output of the video to your display device.</p> <p>For a more detailed overview of lag and exploration of it, please refer to this page:</p> <p>https://inputlag.science/</p>"},{"location":"advanced/lag/#input","title":"Input","text":"<p>For input, MiSTer primarily uses USB. In this case the overall input lag is the sum of the lag caused by the USB polling and the lag caused by the controller itself, how quickly it processes the signals. The latter is outside the scope of MiSTer and can only be improved by using a better controller. On the MiSTer side only the lag caused by the USB polling can be reduced if the connected USB device supports a lower polling interval. The polling interval is measured in Hz and indicates how often a USB device is polled per second. At 1000 Hz, a USB device is polled 1000 times per second, which means the additional lag caused by the polling is 1 s / 1000 = 1 ms in the worst case and 0.5 ms on average. This is a great improvement compared to the default value of 125 Hz, where a USB device is polled 125 times per second, which means the additional lag caused by the polling is 1 s / 125 = 8 ms in the worst case and 4 ms on average.</p> <p>If a game is rendered at 60 frames per second, a single frame takes 1 s / 60 \u2248 16 ms to process. One might think that any polling interval below 16 ms would be perfect; however, USB polling happens independently of the vertical sync. Therefore, even with a 1 ms polling interval, there is a chance of 1/16 that the whole frame will be missed and input will be processed on the next frame. The longer the polling interval, the greater the odds of a missed frame. With a polling interval of 8 ms, the odds of input missing a frame are 50%. Native polling rates and input response vary across consoles and even games.</p>"},{"location":"advanced/lag/#processing","title":"Processing","text":"<p>This is one core advantage of emulation using FPGAs. Unlike software emulators which go through a cycle of executing, and then waiting for a screen refresh, FPGA cores run in real time, as the original hardware did. This means that cores don\u2019t have CPU bottlenecks to slow them down arbitrarily or require additional large buffers to hold data under most circumstances.</p>"},{"location":"advanced/lag/#display","title":"Display","text":"<p>MiSTer\u2019s two primary display outputs are analog and HDMI. </p> <p>The analog output is driven as the original system would have, with no buffering, and so it will be effectively identical to the latency of a real console. From this point of view, the analog output cannot have any form of lag. </p> <p>When using HDMI output the image must be scaled up to fit the higher resolutions, which requires additional processing. The MiSTer scaler has options which impact its latency. Using <code>vsync_adjust=2</code> in the ini file will result in about 4 scanlines of latency, while 0 or 1 will result in up to roughly 2 frames of latency, with the added advantage of being more compatible with displays. </p> <p>In addition your own television or monitor may introduce more latency, but this varies by device and no definite number can be given on that here. </p> <p>In summary, if lag is critical to you, it's best to play on a CRT using a recommended and widely-tested USB controller. Some users have tested and ranked USB controllers by performance; you can see their results here. An alternate thorough list of tested controllers by misteraddons is also available here.</p> <p>Do keep in mind, however, that even over HDMI MiSTer is capable of providing a better experience than many other devices.</p>"},{"location":"advanced/lag/#reducing-lag","title":"Reducing Lag","text":""},{"location":"advanced/lag/#video-lag","title":"Video lag","text":"<p>MiSTer offers options in how to configure its HDMI upscaler, making a tradeoff between compatibility and low latency. These can be set in the MiSTER.INI file at the root of the SD card:</p> <ul> <li><code>vsync_adjust=2</code> is the best option if it is compatible with your TV. This mode uses the original refresh rate and pixel clock of the core, resulting in sub-frame latency. The actual latency of this mode is around 4 to 30 lines of lag when using vscale_mode=1, and slightly more in other modes, according to Grabulosaure who made the scaler in this video he made.</li> <li><code>vsync_adjust=1</code> is the second best option and it has 1 frame of latency. This mode uses a framebuffer, but maintains the system's original vsync and varies the pixel clock per core.</li> <li><code>vsync_adjust=0</code> is the lesser option, but it is the most compatible vsync_adjust mode. Up to 1-2 frames of latency and slightly less smooth scrolling. This mode guarantees 60 hz output with an NTSC standard pixel clock so it has higher compatibility with modern displays. However, you will notice occasional jittering as the core's refresh rate does not match the display's refresh rate.</li> </ul>"},{"location":"advanced/lag/#input-lag","title":"Input lag","text":"<p>USB controllers usually have an interval value which the host (MiSTer Linux kernel) respects to poll their inputs at. Most USB devices can actually perform better by being polled more often without any side effects.</p> <p>To set a higher USB polling rate, you need to go to the \"linux\" subdirectory on your SD card and rename \"u-boot.txt_example\" to \"u-boot.txt\". The aforementioned file contains the following options, which should only be changed if you are encountering problems: <pre><code>v=loglevel=4 usbhid.jspoll=1 xpad.cpoll=1\n</code></pre> loglevel: 4 is the default value. You can set this to 9 to get debugging messages with dmesg command via SSH. If you just want to know which values of usbhid.jspoll and xpad.cpoll are applied to your controller, there are easier ways to achieve this (see below).</p> <p>usbhid.jspoll: specifies the interval for USB HID controllers, usually DirectInput.</p> <ul> <li>0 is the default value MiSTer uses (even when there is no \"u_boot.txt\"). In this case the requested value from the controller is used.</li> <li>1 is the recommended value (which means 1000/1 = 1000 Hz polling rate). However, if you ever encounter any issues, try higher integer values. The higher the interval, the higher the possible lag. This shouldn't go above 8 (which means 1000/8 = 125 Hz polling rate).</li> <li>To see which value is applied to your controller, you can run <code>systool -m usbhid -A jspoll</code> from the Linux shell.</li> </ul> <p>xpad.cpoll: specifies the interval for USB XInput controllers. Most popular controllers use this. There is no practical difference here. XInput is for Microsoft's Xbox consoles and PC.</p> <ul> <li>0 is the default value MiSTer uses (even when there is no \"u_boot.txt\"). In this case the requested value from the controller is used.</li> <li>1 is the recommended value (which means 1000/1 = 1000 Hz polling rate). However, if you ever encounter any issues, try higher integer values. The higher the interval, the higher the possible lag. This shouldn't go above 8 (which means 1000/8 = 125 Hz polling rate).</li> <li>To see which value is applied to your controller, you can run <code>systool -m xpad -A cpoll</code> from the Linux shell.</li> </ul>"},{"location":"advanced/lag/#what-is-the-fastest-controller-i-can-get","title":"What is the fastest controller I can get?","text":"<p>Almost any standard USB controller will work well with MiSTer, however there is a short list of excellent controllers that we can suggest based on user feedback and input lag testing:</p> <ul> <li>8bitdo M30 2.4g connected in wired mode</li> <li>Sony DS4 in wired mode</li> <li>Hori Fighting Commander (later revisions), either PS4 or XBOX1 variant is fine; pick your favorite</li> <li>DIY USB adapter using open source firmware available here</li> </ul> <p>Generally speaking, while Bluetooth connected devices will work fine, you can expect the highest amount of input latency while using your controller in this way.</p> <p>Please keep in mind, \u201chigh latency\u201d controllers should add, at most, 16 ms (1/60th of a second) or one frame (or rarely, depending on the controller, 32ms) of lag, and not constantly, to your experience, which is not a lot of lag, so if you\u2019re not the type of person who notices that, you can safely just use any decent USB controller. Variable lag (the input response varying between 1 and 3 frames, for instance) is more noticeable than consistent lag. There are very few controllers which add more than 1 frame of lag.</p> <p>There is no definitive fastest controller that you can get, but there are quite a few at the top of the list. You can, again, check MiSTerAddons and Lemonici's MiSTer Input Latency Chart for a definitive community sourced list of controllers tested with MiSTer with a separate device that uses the DE10-Nano's headers to get an objective result.</p>"},{"location":"advanced/mgl/","title":"MGL Files","text":"<p>MGL files are used as a custom method to load games directly from the MiSTer FPGA's Menu core.</p> <p>They can be placed in the root of the SD card to show up in the top of the menu, or in a menu folder. A menu folder is a regular folder with an underscore (<code>_</code>) in front that will display in the menu. You can create your own menu folders.</p> <p>Not all cores support MGL files, though all the most popular cores do. Console support is good, but computer cores generally don't work well with them, unless they have some mechanism to auto-boot a loaded game.</p>"},{"location":"advanced/mgl/#mgl-format","title":"MGL Format","text":"<p>MGLs are simple XML files with the file extension <code>.mgl</code>. Whatever name you give to an MGL file (excluding the extension) is what will be shown for its entry in the menu. E.g. <code>My Favorite Game.mgl</code> will display in the menu as <code>My Favorite Game</code>.</p> <p>Example MGL files:</p> <pre><code>&lt;mistergamedescription&gt;\n    &lt;rbf&gt;_console/snes&lt;/rbf&gt;\n    &lt;file delay=\"2\" type=\"f\" index=\"0\" path=\"puzzles/dummy.sfc\"/&gt;\n&lt;/mistergamedescription&gt;\n</code></pre> <pre><code>&lt;mistergamedescription&gt;\n    &lt;rbf&gt;_console/psx&lt;/rbf&gt;\n    &lt;file delay=\"1\" type=\"s\" index=\"1\" path=\"dummy.chd\"/&gt;\n&lt;/mistergamedescription&gt;\n</code></pre> <pre><code>&lt;mistergamedescription&gt;\n    &lt;rbf&gt;_Computer/ao486&lt;/rbf&gt;\n    &lt;file delay=\"1\" type=\"s\" index=\"2\" path=\"dummy.vhd\"/&gt;\n    &lt;file delay=\"1\" type=\"s\" index=\"4\" path=\"cds/dummy.iso\"/&gt;\n&lt;/mistergamedescription&gt;\n</code></pre> <pre><code>&lt;mistergamedescription&gt;\n    &lt;rbf&gt;_Console/SMS&lt;/rbf&gt;\n    &lt;setname&gt;GameGear&lt;/setname&gt;\n    &lt;file delay=\"1\" type=\"f\" index=\"2\" path=\"some/other.zip/path/dummy.gg\"/&gt;\n&lt;/mistergamedescription&gt;\n</code></pre> <ul> <li><code>rbf</code>: Relative path to the core's RBF file from the SD root, excluding its file extension and timestamp.</li> <li><code>setname</code>: Sets a core's name to this value, changing its games folder and config file.</li> <li><code>file</code>: The file to be loaded into the core and its launch arguments.<ul> <li><code>delay</code>: Amount of seconds to wait before load/mount.</li> <li><code>type</code>: Either <code>f</code> for load file to memory or <code>s</code> for mount file.</li> <li><code>index</code>: Pointer to slot where file is loaded in core.</li> <li><code>path</code>: Path to game file relative to the core's games folder.</li> </ul> </li> <li><code>reset</code>: Triggers a reset on the core. You probably don't need to use this.<ul> <li><code>delay</code>: Amount of seconds to wait before reset.</li> <li><code>hold</code></li> </ul> </li> </ul> <p>The <code>rbf</code> and <code>file</code> tags must be present.</p> <p>The <code>file</code> tag can be used more than once in an MGL. Useful for cores that have multiple file slots.</p> <p>The <code>setname</code> tag is optional. It will make a core temporarily point to a different games folder and config file. Useful for cores which play multiple systems, or often need to toggle between different configurations.</p> <p>The <code>type</code> and <code>index</code> attributes depend on what values were configured by the core's developer. See below for how to check those.</p> <p>If a core pops up the OSD menu after loading the game or the game doesn't load, try increasing the <code>delay</code> value.</p>"},{"location":"advanced/mgl/#mgl-arguments","title":"MGL Arguments","text":"<p>Some MGL arguments for common cores:</p> System RBF Delay Index Type Atari 2600/7800 _Console/Atari7800 1 1 f Atari 5200 _Console/Atari5200 1 1 s Atari Lynx _Console/AtariLynx 1 1 f Commodore 64 _Computer/C64 1 1 f Famicom Disk System _Console/NES 2 1 f Game Boy (Color) _Console/Gameboy 2 1 f Game Boy Advance _Console/GBA 2 1 f Game Gear _Console/SMS 1 2 f Genesis _Console/Genesis 1 1 f Master System _Console/SMS 1 1 f Sega CD _Console/MegaCD 1 0 s Neo Geo _Console/NeoGeo 1 1 f NES _Console/NES 2 1 f Playstation _Console/PSX 1 1 s Sega 32X _Console/S32X 1 1 f SNES _Console/SNES 2 0 f TurboGrafx-16 _Console/TurboGrafx16 1 0 f TurboGrafx-16 CD _Console/TurboGrafx16 1 0 s <p>A more comprehensive list of MGL arguments documented by Wizzo can be found here.</p>"},{"location":"advanced/mgl/#arcade-cores","title":"Arcade Cores","text":"<p>Arcade cores cannot be launched using MGL files. If you want to make a shortcut to an arcade core elsewhere in the menu, you'll instead have to symlink (symbolic link) it there.</p> <p>For example, either through SSH or the console (press <code>F9</code> from the menu): <pre><code># ln -s /media/fat/_Arcade/dummy.mra /media/fat\n# ln -s /media/fat/_Arcade/cores /media/fat\n</code></pre></p> <p>This would make a shortcut to an arcade core in the root of the MiSTer menu. It can also be done with menu subfolders.</p> <p>Take note of the second line, symlink'ing the <code>cores</code> folder. You have to do this once for each folder you want to symlink MRA files into.</p>"},{"location":"advanced/mgl/#finding-mgl-arguments","title":"Finding MGL Arguments","text":"<p>If the core you are looking for isn't in these lists, you can either test out the combinations yourself, or you can look at the code on GitHub for the core to figure out the values directly.</p> <p>For example, to get the values for the TurboGrafx-16 core, you can take a look at the file TurboGrafx16.sv on GitHub to find the index numbers and file types supported by that core.</p> <p>First find the section that starts with <code>parameter CONF_STR</code> and in that section look for the file type you are launching. In this case it will be <code>\"S0,CUECHD,Insert CD;\"</code>. Notice the S0, that is the \"s\" type with index of 0.</p> <p>See the Core Configuration String page for detailed information on this format.</p>"},{"location":"advanced/midi/","title":"MIDI Features","text":"<p>There are multiple options for using MIDI on the MiSTer. Here's a few of the ways you can use it below.</p>"},{"location":"advanced/midi/#the-mt32-pi-project","title":"The mt32-pi Project","text":"<p>Dale Whinham (aka d0pefish) has come up with an open source MIDI synthesizer for the raspberry pi called mt32-pi. For the most up to date instructions on how to use mt32-pi with your MiSTer, please go to the MiSTer FPGA section of the mt32-pi wiki to get all of the information you should need. There are also two add-on boards designed by sorgelig specifically for mt32-pi to be used with the MiSTer.</p>"},{"location":"advanced/midi/#mt32-pi-video-example","title":"MT32-pi Video Example","text":""},{"location":"advanced/midi/#computer-cores-with-midi-support","title":"Computer Cores with MIDI support.","text":"<p>When running the Minimig and ao486 cores, once a ALSA compatible USB MIDI device is attached, two additional \u2018UART Connection\u2019 menu options (\u2018USBMIDI\u2019 and \u2018USBMIDI-38K\u2019) will be available in addition to \u2018None\u2019, \u2018PPP\u2019 and \u2018Console\u2019.</p>"},{"location":"advanced/midi/#minimig","title":"Minimig","text":"<p>\u2018USBMIDI\u2019 - This option is used with the Amiga / Minimig core. This option sets the UART connection speed to 31250 baud which is the standard MIDI speed.</p> <p>Many Amiga applications and most games don\u2019t require any additional drivers for MIDI. Some \u201cnewer\u201d applications may require the CAMD driver.</p> <p>Aminet : CAMD</p>"},{"location":"advanced/midi/#ao486","title":"ao486","text":"<p>\u2018USBMIDI-38K\u2019 - This option is used with the ao486 core. This option sets the UART Connection speed to 38400 baud. (The MIDI speed of 31250 baud is not a standard speed DOS PC UARTs were capable of doing)</p> <p>While some sequencer applications and Microsoft Windows may support MIDI on the serial port, DOS games typically require a MPU-401 interface which ao486 unfortunately lacks. In lieu of hardware MPU-401 capability the SoftMPU TSR can be used with a good degree of success.</p> <p>SoftMPU</p>"},{"location":"advanced/midi/#softmpu","title":"SoftMPU","text":"<p>SoftMPU requires the QEMM memory manager be installed. For testing QEMM 8.03 was used. QEMM \u201cstealth\u201d option seems to be incompatible with ao486 so it is advisable to skip that part of the optimize process. It\u2019s a good idea to run the QEMM optimize application again after installing SoftMPU (in the AUTOEXEC.BAT) to get as much of the lower 640K conventional RAM free as possible.</p> <p>Although less common, some DOS games and applications require MPU-401 interrupts. This option can break compatibility with others software not requiring interrupts.</p> <p>Starting SoftMPU without MPU-401 interrupts:</p> <pre><code>SOFTMPU.EXE /MPU:330 /OUTPUT:COM1\n</code></pre> <p>Starting SoftMPU with MPU-401 interrupts:</p> <pre><code>SOFTMPU.EXE /SB:220 /IRQ:5 /MPU:330 /OUTPUT:COM1\n</code></pre> <p>The Rev.0 Roland MT-32 used in testing required the \u2018DELAYSYSEX\u2019 switch to prevent buffer overflow for certain games but made Sierra games upload sysex commands excessively slowly. This is not necessary for General MIDI modules and newer revision MT-32s.</p> <pre><code>SOFTMPU.EXE /MPU:330 /DELAYSYSEX /OUTPUT:COM1\n</code></pre>"},{"location":"advanced/midi/#midillink","title":"MidilLink","text":"<p>The 'midilink' daemon currently supports following switches / options:</p> <pre><code>TESTSER  - this option sends a test message to the serial port once \n           the daemon is started.  \n\nTESTMIDI - this option sends a middle 'c' note to the MIDI device \n           once the daemon is started. \n\nQUIET    - this option suppresses MIDI debug output.  \n\n38400    - this option sets the serial speed to 38400 baud \n           (default is 31250 baud) - used with ao486 core.\n</code></pre> <p>MidiLink Github</p>"},{"location":"advanced/midi/#midi-adapters-reported-to-work","title":"MIDI Adapters reported to work","text":"<ul> <li>Creative EMU XMIDI (Known to mangle SYSEX messages)</li> <li>Roland UM-ONE</li> <li>M-Audio Midisport Uno</li> </ul>"},{"location":"advanced/multibutton/","title":"Multi-Button Mapping","text":"<p>When overriding gamepad settings inside a core it is possible to define button combinations (e.g. A+B) if you have enough physical buttons.</p> <p>To allow for this, MiSTer will ask if you want to setup \"alternate mappings\" after defining a gamepad.</p> <p>Alternate mappings are active in parallel and allow two kinds of abilities: map two physical button to the same core button (e.g. alternate button for Start), or map one physical button to two-button combo in the core (e.g. map physical X to thr core's A+B).</p>"},{"location":"advanced/multibutton/#bind-core-button-to-two-physical-buttons","title":"Bind core button to two physical buttons","text":"<p>The simplest is to map an extra physical button. Only this additional button needs to be defined in the alternate map, as follows:</p> Map D-Pad A B <code>main</code> define Btn 1 Btn 2 <code>alt</code> skip skip Btn 3 <p>The result of using this setup ia that you will have physical buttons 2 and 3 mapped to the core button B.</p> <p>This also works with gamepad directions. For example, for games that use Up as a jump button, it is possible to map a physical third button to jump.</p>"},{"location":"advanced/multibutton/#bind-physical-button-to-core-button-combo","title":"Bind physical button to core button combo","text":"<p>A more advanced setup is to use both mappings in parallel to make one physical button push two core buttons at the same time.</p> <p>See the table below:</p> Map D-Pad A B <code>main</code> define Btn 1 Btn 3 <code>alt</code> skip Btn 3 Btn 2 <p>The result of this is that Button 1 will be A, Button 2 will be B, and Button 3 will be A+B.</p> <p>This is particularly useful for the Neogeo core where some fighting games use A+B and C+D as \"strong hit\".</p> <p>(note: unfortunately NeoGeo games are not consistent with each other - so it is not possible to set one mapping for all games)</p>"},{"location":"advanced/multibutton/#example-neogeo-breakers-breakers-revenge","title":"Example: NeoGeo Breakers / Breakers' Revenge","text":"<p>Assume a six button arcade controller (for Street Fighter 2) with 3 punch buttons on top and 3 kick buttons below.</p> <p>We will map the buttons so that Breakers / Breakers' revenge has the same kind of layout.</p> <p>This particular game uses the following attack buttons:</p> <ul> <li>A: Weak Punch</li> <li>B: Weak Kick</li> <li>C: Strong Punch</li> <li>D: Strong Kick</li> </ul> <p>In addition, most characters have an extra \"command\" move mapped to:</p> <ul> <li>Weak Punch + Strong Punch </li> <li>Weak Kick + Strong Kick </li> </ul> <p>To match the Street Fighter 2 layout, we can assign this across six buttons:</p> - Weak Strong Weak+Strong Punch A C A + C Kick B D B + D <p>Which translates to the following buttons:</p> - Weak Strong Weak+Strong Punch Btn 1 Btn 2 Btn 3 Kick Btn 4 Btn 5 Btn 6 <p>To obtain this, input the following assignment during main and alternate mapping:</p> map d-pad A B C D main define Btn 1 Btn 4 Btn 3 Btn 6 alt skip Btn 3 Btn 6 Btn 2 Btn 5 <p>(in alternate mapping, d-pad and all other buttons can be skipped)</p>"},{"location":"advanced/multibutton/#example-neogeo-king-of-fighters-fatal-fury-special","title":"Example: NeoGeo King of Fighters / Fatal Fury Special","text":"<p>Both of these game use the same attack layout as Breakers but their button combination differs:</p> - Weak Strong Combo Punch A C A + B Kick B D C + D <p>To map this, we need to switch things around a little bit:</p> map d-pad A B C D main define Btn 1 Btn 3 Btn 2 Btn 6 alt skip Btn 3 Btn 4 Btn 6 Btn 5"},{"location":"advanced/multibutton/#example-neogeo-samurai-shodown","title":"Example: NeoGeo Samurai Shodown","text":"<p>This game has yet another layout, changing the order of base attacks:</p> - Weak Medium Strong Slash A B A + B Kick C D C + D <p>We can map this as follows:</p> map d-pad A B C D main define Btn 1 Btn 3 Btn 4 Btn 6 alt skip Btn 3 Btn 2 Btn 6 Btn 5"},{"location":"advanced/multibutton/#counter-example-the-last-blade-1-and-2","title":"Counter Example: The Last Blade 1 and 2","text":"<p>Very similar to the above but a different button combo:</p> - Weak Medium Special Slash A B B + C Kick C D C + D <p>In this case, it is not possible to map C three times so we must choose whether to map B+C or C+D.</p>"},{"location":"advanced/multibutton/#option-1-mapping-bc-to-button-3","title":"Option 1: Mapping B+C to button 3:","text":"map d-pad A B C D main define Btn 1 Btn 2 Btn 3 Btn 5 alt skip skip Btn 3 Btn 4 skip <p>(Btn 6 remains unassigned)</p>"},{"location":"advanced/multibutton/#option-2-mapping-cd-to-button-6","title":"Option 2: Mapping C+D to button 6:","text":"map d-pad A B C D main define Btn 1 Btn 2 Btn 6 Btn 5 alt skip skip skip Btn 4 Btn 6 <p>(Btn 3 remains unassigned)</p>"},{"location":"advanced/nativeres/","title":"Core Default Resolutions","text":"<p>This is a chart that shows the default native resolution, frequencies, and pixel clock of each core upon startup. These values are not static and are only here for documentation purposes. This should not be taken as a list of a core's compatibility with your particular display.</p>"},{"location":"advanced/nativeres/#arcade-core-default-native-resolutions","title":"Arcade Core Default Native Resolutions","text":"Core Version Default Native Resolution Horizontal Freq. (kHz) Vertical Freq. (Hz) Pixel Clock (MHz) Notes Arkanoid 20211225 256x225 15.6 59.2 6.00 Asteroids 20220313 640x480 31.3 59.5 25.00 AsteroidsDeluxe 20220313 640x480 31.3 59.5 25.00 Astrocade 20220427 377x230 15.8 60.0 7.16 AtariTetris 20210405 337x240 15.6 59.7 7.16 Bagman 20211114 256x224 15.6 59.2 6.00 Berzerk 20211009 256x224 15.6 59.6 5.00 BlackWidow 20210915 640x480 31.3 59.5 25.00 Blockade 20220222 256x224 15.8 60.1 5.20 BombJack 20210915 264x227 15.6 59.2 6.00 Breakout 20210620 349x228 16.0 63.4 7.16 BurgerTime 20210915 253x240 15.6 57.4 6.00 BurningRubber 20211116 253x240 15.6 59.9 6.00 CanyonBomber 20220313 320x240 15.8 59.9 6.05 Cave 20220409 320x240 15.6 57.2 7.00 Centipede 20220426 257x240 15.8 59.9 6.05 ComputerSpace 20210113 256x239 15.3 60.0 5.84 Cosmic 20220117 258x193 15.9 60.1 5.41 CrazyBalloon 20220119 258x224 15.6 59.1 4.99 CrazyClimber 20210614 257x223 15.6 59.2 6.00 CrazyKong 20210127 256x224 15.6 59.2 6.00 Defender 20211007 306x240 15.6 60.1 6.00 DigDug 20220317 289x224 16.0 60.8 6.14 Dominos 20220313 320x240 15.8 59.9 6.05 DonkeyKong 20220501 257x224 16.0 60.6 6.14 DonkeyKong3 20210312 257x224 16.0 60.6 6.14 DonkeyKongJunior 20220227 257x224 16.0 60.6 6.14 DottoriKun 20210705 448x192 15.6 61.0 8.00 Druaga 20210610 224x294 203.3 60.8 49.12 Might be inaccurate, need to confirm manually. Finalizer 20220101 240x224 16.0 61.1 6.14 FoodFight 20210115 257x224 16.0 60.8 6.14 Frenzy 20211009 256x224 15.6 59.6 5.00 Galaga 20210916 288x224 15.6 59.2 6.00 Galaxian 20210920 257x224 15.6 59.2 6.00 Gaplus 20210611 289x224 16.0 60.8 6.14 Gauntlet 20220313 336x240 15.7 59.7 7.16 Gyruss 20211225 256x224 16.0 60.6 6.14 IremM62 20210925 Need to fill in later, raw core output unavailable IronHorse 20211225 240x224 16.0 61.1 6.14 Jackal 20211225 240x224 16.0 61.1 6.14 Jailbreak 20211225 256x224 16.0 60.6 6.14 Joust2 20220401 282x241 15.6 60.1 6.00 LadyBug 20210927 240x192 16.0 61.2 5.00 LunarLander 20210111 640x480 31.3 59.5 25.00 MarioBros 20210925 256x224 15.6 59.2 6.00 MCR1 20210820 Need to fill in later, raw core output unavailable MCR2 20210114 Need to fill in later, raw core output unavailable MCR3 20210112 Need to fill in later, raw core output unavailable MCR3Mono 20210114 Need to fill in later, raw core output unavailable MCR3Scroll 20210111 Need to fill in later, raw core output unavailable MoonPatrol 20220322 240x248 15.6 55.4 6.00 MrDo 20220313 248x192 15.7 59.9 4.90 MysticMarathon 20220424 282x242 15.6 60.1 6.00 NinjaKun 20210929 257x192 15.6 59.4 6.00 Pacman 20210915 288x224 15.8 60.0 6.08 Pengo 20210917 289x224 15.6 59.2 6.00 PenguinKunWars 20200530 257x192 15.6 60.1 6.00 Phoenix 20210915 239x208 15.6 59.6 5.50 Pleiads 20210524 239x208 15.6 59.6 5.50 PolyPlay 20210322 512x256 15.6 49.8 10.50 Pong 20210117 374x246 15.7 60.1 7.16 Pooyan 20210929 256x224 15.6 59.4 6.00 Popeye 20210117 512x224 15.6 59.4 10.00 Qbert 20210923 250x240 15.7 61.4 5.00 RallyX 20210922 289x224 16.0 60.8 6.14 RiverPatrol 20210111 514x223 15.6 59.2 12.00 Robotron 20211007 296x240 15.6 60.1 6.00 RshnAtk 20210924 240x224 15.5 60.6 6.14 ScooterShooter 20211225 256x224 16.0 60.6 6.14 Scramble 256x224 16.0 60.6 6.14 SEGASYS1 20210618 256x224 15.7 60.1 6.05 SilverLand 20210111 512x223 15.6 59.2 12.00 SMS 20220326 256x192 15.7 59.9 5.37 SolomonsKey 20210116 257x224 15.5 60.0 6.00 SpaceInvaders 20211201 260x224 15.6 59.6 5.00 SpaceRace 20210228 374x246 15.7 60.1 7.16 Sprint1 20201210 Need to fill in later, raw core output unavailable Sprint2 20201210 Need to fill in later, raw core output unavailable Subs 20220105 320x224 15.8 59.9 6.05 SuperBreakout 202201210 Need to fill in later, raw core output unavailable Tecmo 20200810 256x224 15.6 59.2 6.00 TIAMC1 20210322 256x256 15.6 49.8 5.25 TimePilot 20211225 256x224 16.0 60.6 6.14 TimePilot84 20220227 253x224 16.0 60.6 6.14 TraverseUSA 20201213 240x256 15.6 50.1 6.00 TurkeyShoot 20220425 564x241 15.6 60.1 12.00 Ultratank 20211118 Need to fill in later, raw core output unavailable Vball 20210621 240x240 15.0 57.9 6.00 Xevious 20220323 288x224 15.6 59.2 6.00 Zaxxon 20210915 Need to fill in later, raw core output unavailable ZigZag 20210117 256x225 15.6 59.2 6.00"},{"location":"advanced/nativeres/#console-core-default-native-resolutions","title":"Console Core Default Native Resolutions","text":"Core Version Default Native Resolution Horizontal Freq. (kHz) Vertical Freq. (Hz) Pixel Clock (MHz) Notes AdventureVision 20220403 450x174 15.7 60.3 11.00 Arcadia 20211026 182x267 19.4 62.1 4.39 Astrocade 20210303 180x230 15.8 60.0 3.58 Atari5200 20220220 356x240 15.7 59.9 7.16 Atari7800 20220212 372x224 15.8 60.0 7.16 For analog video on Atari 2600 games, disable the video stabilizer in the Atari 2600 submenu if you cannot achieve sync. AtariLynx 20220417 160x102 16.0 59.2 7.11 AY-3-8500 20220307 237x206 15.6 59.6 6.00 ChannelF 20211026 208x233 15.7 59.9 3.58 ColecoVision 20220214 256x192 15.6 59.7 5.33 GameBoy 20220429 160x144 15.8 59.7 6.71 GameBoy2P 20211121 320x144 15.8 59.7 6.71 With the Analog I/O board the output of each player's screen can be split between an HDMI display and an Analog display. GBA 20220428 240x160 15.8 59.7 6.29 GBA2P 20210702 240x160 15.8 59.7 6.29 With the Analog I/O board the output of each player's screen can be split between an HDMI display and an Analog display. Genesis 20220326 256x224 15.7 59.9 5.37 Intellivision 20211025 190x240 15.7 59.9 3.58 MegaCD 20220326 320x224 15.7 59.9 6.71 NeoGeo 20220403 320x224 15.7 59.6 6.04 NES 20220326 256x224 15.7 60.1 5.37 Odyssey2 20210530 368x240 15.7 59.5 7.16 PSX 20220429 704x478i 15.7 59.9 13.42 S32X 20220425 256x224 15.7 59.9 5.37 SMS 20220326 256x192 15.7 59.9 5.37 SNES 20220326 512x224 15.7 60.1 10.74 TurboGrafx16 20220326 270x242 15.7 60.1 5.37 VC4000 20211026 172x269 19.5 62.6 4.43 Vectrex 20220301 540x720 43.3 60.0 24.00 WonderSwan 20220417 224x144 15.3 59.4 6.14"},{"location":"advanced/nativeres/#computer-core-default-native-resolutions","title":"Computer Core Default Native Resolutions","text":"Core Version Default Native Resolution Horizontal Freq. (kHz) Vertical Freq. (Hz) Pixel Clock (MHz) Notes AcornAtom 20220114 256x192 15.4 58.6 7.16 AcornElectron 20220211 640x256 15.6 50.1 16.00 AliceMC10 20210116 1276x490 15.6 29.8 25.00 Altair8800 20181113 1280x720 45.1 60.1 74.25 Amstrad 20220220 768x273 15.6 50.1 16.00 Amstrad-PCW 20200830 720x256 15.6 50.1 16.00 ao486 20220326 320x400 26.9 60.0 10.77 This resolution is going to vary based upon BIOS, OS, and Software a LOT. This was with the exoFlynn Top300 pack by FlynnsBit Apogee 20201210 390x281 15.5 50.0 8.00 Apple-I 20220309 640x480 31.3 60.0 25.00 Apple-II 20220219 568x192 15.7 60.2 14.32 Aquarius 20210303 320x200 15.6 59.7 7.16 Archie 20220221 640x480 31.5 60.0 25.17 Atari800 20220220 356x240 15.7 50.3 7.16 AtariST 20220413 N/A N/A N/A N/A AtariST does not provide debug console output, it is a special core. To be filled in manually later. BBCMicro 20210302 240x250 15.6 50.2 6.00 BK0011M 20220301 256x256 15.6 48.8 6.00 C16 20220216 384x295 15.6 49.9 7.09 C64 20220216 384x270 15.6 50.1 7.88 CoCo2 20220211 257x192 15.4 58.7 7.16 CoCo3 20220226 763x254 15.7 59.7 14.32 EDSAC 20200513 1280x720 45.7 59.8 74.20 Galaksija 20200504 320x240 13.0 51.5 6.25 Interact 20210815 112x228 15.7 59.9 2.39 Jupiter 20210303 256x192 15.6 50.1 6.50 Laser310 20220202 256x192 15.4 58.6 7.16 Lynx48 20220224 256x252 15.6 49.8 6.00 MacPlus 20220310 516x684 48.4 60.0 32.49 Minimig 20220326 1280x286 15.6 49.9 28.38 MSX 20220216 598x242 15.7 59.9 10.74 MultiComp 20210113 640x400 31.3 59.4 25.00 Ondra_SPO186 20211022 328x252 15.6 50.1 8.00 Orao 20200309 800x600 48.1 72.0 50.00 Oric 20210920 240x224 15.6 59.9 6.00 PC88 20220213 640x400 31.3 59.5 25.00 PDP1 20190101 1281x1024 64.0 60.0 108.01 PET2001 20220216 320x200 15.6 59.6 7.00 PMD85 20220129 480x256 16.0 50.0 10.24 QL 20220326 512x256 15.6 50.1 10.50 RX78 20220314 256x225 15.8 60.1 7.00 SAMCoupe 20220326 328x264 15.6 50.1 6.00 SharpMZ 20210709 640x480 30.3 58.2 25.19 SordM5 20211227 256x192 15.6 50.0 5.33 Specialist 20220301 384x256 15.6 50.1 8.00 SVI328 20220212 N/A N/A N/A N/A SVI328 does not provide debug console output, it is a special core. To be filled in manually later. TatungEinstein 20220128 256x192 15.6 59.7 5.33 Ti994a 20220220 284x226 15.7 60.2 5.37 TRS-80 20220309 384x192 15.8 59.9 10.65 TSConf 20220216 720x288 15.6 48.8 14.00 UK101 20220201 512x256 15.7 50.0 8.33 Vector-06C 20220301 304x284 15.6 50.1 6.00 VIC20 20220216 228x280 15.6 50.0 4.43 X68000 20220214 768x512 34.0 59.9 12.52 zx48 20210912 320x305 15.6 50.1 7.00 ZX81 20220216 328x299 15.7 50.6 6.50 ZXNext 20220216 704x304 15.6 50.1 14.00 ZX-Spectrum 20220216 344x284 15.6 50.1 7.00"},{"location":"advanced/nativeres/#other-core-default-native-resolutions","title":"Other Core Default Native Resolutions","text":"Core Version Default Native Resolution Horizontal Freq. (kHz) Vertical Freq. (Hz) Pixel Clock (MHz) Notes Arduboy 20220301 256x144 15.6 59.6 5.00 Chess 20200827 640x480 31.3 59.5 25.00 Chip8 20200208 704x240 15.7 59.8 13.50 EpochGalaxy 20200818 320x480 31.2 59.4 12.50 FlappyBird 20200402 640x480 31.3 59.5 24.99 GameOfLife 20200430 1920x1080 67.5 60.0 148.49 SlugCross 20220401 640x480 31.5 59.9 25.18 TomyScramble 20200724 320x480 31.2 59.4 12.50"},{"location":"advanced/nativeres/#utility-core-default-native-resolutions","title":"Utility Core Default Native Resolutions","text":"Core Version Default Native Resolution Horizontal Freq. (kHz) Vertical Freq. (Hz) Pixel Clock (MHz) Notes ADCTest 20201231 529x240 15.7 59.8 10.00 InputTest 20220212 320x240 15.2 59.2 6.00 memtest 20210130 720x480 31.4 59.8 27.01"},{"location":"advanced/network/","title":"Setting Up SSH, FTP, and NAS","text":"<p>There are multiple advanced networking features that the MiSTer can utilize. Here we will go over quite a few of them.</p>"},{"location":"advanced/network/#cifs-share-mounting","title":"CIFS Share Mounting","text":"<p>The MiSTer can mount a network share from another computer or server as if it were storage. There are two scripts that are used by the MiSTer for CIFS mounting and unmounting.</p> <p>cifs_mount.sh</p> <p>This script mounts the desired network share to the MiSTer in such a way that any identical folders from <code>/media/fat</code> will be put on a lower priority and you will see the ones from the network share in place of the ones on your MicroSD. See Core Paths for more specific information as to how this hierarchy functions.</p> <p>cifs_umount.sh</p> <p>This script will unmount the network share when ran.</p>"},{"location":"advanced/network/#retronas","title":"RetroNAS","text":"<p>A project was launched that makes it easier to get a network attached storage (NAS) device up and running which was focused solely on retro gaming device compatibility. The MiSTer was one of their primary focuses and it works quite well. All you need is a Raspberry Pi4 and some kind of external hard drive storage device. Remember: NAS IS NOT BACKUP! You could lose data if you rely solely on a NAS for important data. They have a good installation guide that is simple to follow and MiSTer-specific instructions to help get you started. They also have video guides available on Youtube for installation and MiSTer FPGA-specific configuration if you prefer.</p>"},{"location":"advanced/network/#static-ip-address-configuration","title":"Static IP Address configuration","text":"<p>Currently the best way to do this is using <code>connmanctl</code> (try <code>connmanctl help</code> for more info).</p> <ul> <li>Create /var/lib/connman directory so changes will persist across reboots  </li> </ul> <pre><code># mkdir /var/lib/connman\n</code></pre> <ul> <li>Find your on-board network service name.</li> </ul> <pre><code># connmanctl services\n*AO Wired                ethernet_020304050607_cable\n</code></pre> <ul> <li>Setup IP address (e.g. <code>192.168.1.123</code>, should be unused), subnet mask (e.g. <code>255.255.255.0</code>) and gateway (e.g. <code>192.168.1.1</code>, typically your router IP address). To configure the right device use the service name returned from above command (e.g. <code>ethernet_020304050607_cable</code>). This will disable the use of DHCP.</li> </ul> <pre><code># connmanctl config ethernet_020304050607_cable --ipv4 manual 192.168.1.123 255.255.255.0 192.168.1.1\n</code></pre> <ul> <li>Setup one or more DNS server(s) (e.g. <code>192.168.1.1</code> from your router, <code>8.8.8.8</code> from Google DNS.</li> </ul> <p><pre><code># connmanctl config ethernet_020304050607_cable --nameservers 192.168.1.1 8.8.8.8\n</code></pre> You could write a script to help with typing and remembering your settings.</p> <p>You can also setup your on-board network connection by editing <code>/etc/network/interfaces</code>. This is currently not advised. Because if you have a DHCP server in your network, the network stack will still contact the DHCP server and assign the returned IP address regardless, leading to usually unwanted behavior.</p>"},{"location":"advanced/network/#re-enabling-dhcp","title":"Re-Enabling DHCP","text":"<pre><code># connmanctl config ethernet_020304050607_cable --dhcp\n</code></pre>"},{"location":"advanced/rtc/","title":"RTC Board","text":"<p>Some cores (ao486, Minimig) use clock, so MiSTer provides the real time for such cores. MiSTer can take the time from internet if active connection is present. </p> <p></p> <p>This board is pretty simple and provide real time offline. It supports 2 types of battery holders and several types of RTC ICs. It's plugged into LTC connector.</p>"},{"location":"advanced/rtc/#assembling-notes","title":"Assembling notes","text":"<ul> <li>If through hole battery holder is used, you need to cut all its plastic pins and make sure the holder is fully seated on board without gaps. Otherwise it may touch the I/O board and make short circuit.</li> <li>For through hole holder, make sure you cut the pins as short as possible so it won't protrude under the board which can make short circuit.</li> <li>The board has the hole on opposite side of connector. Use a plastic(or other non-conductive) screw to make a leg and prevent the board bend and touch the main board.</li> <li>SMD holder (left picture) is preferable as it's more slim.</li> </ul>"},{"location":"advanced/rtc/#usage-notes","title":"Usage notes","text":"<p>To get real time saved, simply connect MiSTer to internet and let it run for around 15 minutes. </p> <p>Or from the console: </p> <p>By default the time zone is UTC(GMT). If you want to get the time of your zone, you need to do following:</p> <ul> <li>connect to MiSTer by FTP/SFTP</li> <li>navigate to <code>/usr/share/zoneinfo/posix</code> folder and find there the name of your place or time zone.</li> <li>copy that file to your computer under name timezone</li> <li>copy it back to MiSTer to folder <code>/media/fat/linux</code> with name timezone</li> </ul> <p>From the console you can also force the hardware clock to update and read the time from it:</p> <ul> <li>store datetime to RTC : <code>hwclock -wu</code></li> <li>read RTC : <code>hwclock -u</code></li> </ul>"},{"location":"advanced/rtc/#rtc-add-on-board-diy-assembly","title":"RTC Add-on board DIY Assembly","text":"<p>This page is for reference only. It may not be up to date. It may not include the BOM for latest PCB version. You need to check the schematic and required components yourself!</p> <p>The following section will walk you through the steps of creating your own Mister RTC Board. It describes where to order all necessary parts like PCB and components. It will also give you an overview on the equipment you need and show you how to assemble the board.</p> <p></p>"},{"location":"advanced/rtc/#1-order-pcb","title":"1. Order PCB","text":""},{"location":"advanced/rtc/#approved-pcb-manufactors","title":"Approved PCB Manufactors","text":"<ul> <li>PCBway - Quick order RTC v1.2 - Quick order RTC v1.3 (with temp sensor)</li> <li>EasyEDA</li> <li>JLCPCB</li> <li>OSH Park</li> </ul>"},{"location":"advanced/rtc/#pcb-layout-gerber-files","title":"PCB Layout (Gerber Files)","text":"<p>Check the MiSTer hardware repository for the most recent PCB files: MiSTer_Hardware</p>"},{"location":"advanced/rtc/#2-order-components","title":"2. Order Components","text":"<p>This is a general overview of the components, including reference parts that were successfully used to assemble a MiSTer RTC Board version 1.2.</p>"},{"location":"advanced/rtc/#general-components","title":"General Components:","text":"<p>The components in this table are the general components. You will have to choose additionally a RTC chip and crystal combination from the next table</p> Name Component Package Value Reference Parts C1 Capacitor (Ceramic) 0805 10uF KEMET  C0805C106K8PACTU R1, R2 Resistor 1% 1/8W 0805 4.7K Yageo  RC0805FR-074K7L B1 Coin Cell Holder for CR1220 12mm - MPD  BK-885 P1 GPIO Connector 2mm 18 Pin Amphenol  63453-118LF"},{"location":"advanced/rtc/#rtc-crystal-table","title":"RTC / Crystal Table","text":"<p>The RTC Chip (U1) / Crystal (X1) combination in this table are approved by users that successfully build a RTC Board version 1.2</p> Name Component Package Value Reference Parts U1 I2C RTC Chip:  M41T81 8-SOIC - ST  M41T81M6F X1 Crystal:  32.768kHz \u00b120ppm, 12.5pF, 50 kOhms Cylindrical Can - Citizen  CMR200T32768DZFT <p>Example of BOM on Octopart</p>"},{"location":"advanced/videomodes/","title":"Video Modes","text":"<p>The <code>video_mode</code> INI setting supports several different methods of specifying the video mode.</p>"},{"location":"advanced/videomodes/#automatic-detection","title":"Automatic Detection","text":"<p>If no <code>video_mode</code> setting is specified, MiSTer will attempt to determine the correct video mode using EDID information from the display device. This will only work for devices connected to the HDMI port. If a valid video mode cannot be determined then the default 720p mode will be used.</p>"},{"location":"advanced/videomodes/#video-mode-presets-video_mode","title":"Video Mode Presets (video_mode)","text":"<p>MiSTer has 15 built in video mode presets ranging from 0-14. These presets cover a lot of common display modes used by televisions and computer monitors. Here's an example video_mode setting and a table below to explain what each of the preset modes are: <pre><code>; Number 8 - 1920x1080 - 60hz - 16:9 - FHD 1080p\nvideo_mode=8\n</code></pre></p> Number Resolution Refresh (Hz) Aspect Ratio Name 0 1280x720 60 16:9 HD 720p 1 1024x768 60 4:3 XGA 2 720x480 60 3:2 3 720x576 50 5:4 4 1280x1024 60 5:4 SXGA 5 800x600 60 4:3 SVGA 6 640x480 60 4:3 VGA 7 1280x720 50 16:9 HD 720p PAL 8 1920x1080 60 16:9 FHD 1080p 9 1920x1080 50 16:9 FHD 1080p PAL 10 1366x768 60 16:9 WXGA 11 1024x600 60 128:75 WSVGA 12 1920x1440 60 4:3 13 2048x1536 60 4:3 iPad Retina 14 2560x1440 60 16:9 1440p"},{"location":"advanced/videomodes/#custom-video-modes","title":"Custom Video Modes","text":"<p>A custom mode can be set by specifying the width, height and refresh rate like so: <pre><code>; 1920x1200 at 75Hz\nvideo_mode=1920,1200,75\n</code></pre> The maximum value for width is 4096, height is 2048 and refresh rate is unlimited but it must be a whole integer value. The DE-10 may not be able to output the mode you select or your display may not be able to accept it. The maximum recommended video frequency is 210Mhz which limits the maximum resolution to 2048x1536. Pixel repetition can be used to increase the resolution further, but it also has limits.</p> <p>The VESA Coordinated Video Timings standard is used to calculate the timing information for the requested video mode. By default the reduced blanking version of the standard is used. This is compatible with most flat panel displays but may not be as well supported on older displays and CRT monitors. You can use regular CVT timings by adding the <code>cvt</code> flag to the end of the video mode: <pre><code>; 1600x1200 on a CRT monitor\nvideo_mode=1600,1200,60,cvt\n</code></pre> Regular timing requires a slightly higher clock speed for a given resolution, so it some higher resolution modes are not achievable with it. An online video timing calculator can help with understanding the differences between the two methods.</p>"},{"location":"advanced/videomodes/#manual-modelines","title":"Manual Modelines","text":"<p>Video mode timing can be fully specified using a video modeline which consists of nine values defining the horizontal timing, vertical timing and pixel clock. <pre><code>video_mode=hact,hfp,hs,hbp,vact,vfp,vs,vbp,fpix\n</code></pre> <code>hact</code> and <code>vact</code> defines the active (visible) size of the video mode in horizontal and vertical pixels, respectively. <code>hfp</code>, <code>hs</code> and <code>hbp</code> defines the duration of horizontal front porch, sync and back porch in pixels. <code>vfp</code>, <code>vs</code> abd <code>vbp</code> define the same properties, but for the vertical timing. Finally, the <code>fpix</code> value is the frequency of the pixel clock in KHz (pixels clocks are usually specified in MHz, so multiply the Mhz value by a 1000 to get the value in KHz).</p> <p>MiSTer modelines are similar to XFree86 modelines, but the information is expressed slightly differently. You can convert an XFree86 modeline to a MiSTer one using the custom video mode tool by morf77 available here which can be used in conjunction with a modeline calculator.</p>"},{"location":"advanced/videomodes/#additional-flags","title":"Additional Flags","text":"<p>Some additional flags can be added to custom modes and modelines to modify the behavior.</p> <ul> <li><code>+hsync</code> / <code>-hsync</code> - set the horizontal sync polarity</li> <li><code>+vsync</code> / <code>-hsync</code> - set the vertical sync polarity</li> <li><code>pr</code> - use HDMI pixel repetition (custom modelines only)</li> <li><code>cvt</code> - use normal CVT timing (custom mode only)</li> <li><code>cvtrb</code> - use reduced blanking CVT timing (custom mode only)</li> </ul>"},{"location":"advanced/videomodes/#hdmi-pixel-repetition-pr","title":"HDMI Pixel Repetition (pr)","text":"<p>HDMI pixel repetition enables MiSTer to output a higher resolution video signal without using additional resources or requiring higher clock speeds. It does this by instructing the ADV7513 HDMI transmitter to duplicate each pixel that it sends to the display. This does not increase the fidelity of the final image, in most cases it will reduce it, but it does enable a wider selection of video modes.</p> <p>MiSTer is limited to a maximum horizontal resolution of 2048 pixels and a maximum pixel clock of 210Mhz. This is enough to display a 2048x1536 image (209Mhz, iPad resolution), which is the maximum native resolution supported. It is also enough for 1920x1440 (184Mhz) which is a non-standard 4:3 resolution supported by some displays. The more commonly supported 2560x1440 mode is out of reach both because of its large horizontal resolution and because of its 240Mhz pixel clock.</p> <p>Pixel repetition makes a mode like 2560x1440 possible by lowering the horizontal resolution to 1280 pixels which lowers the pixel clock to 120Mhz. The 1280x1440 image that the MiSTer scaler produces is stretched horizontally by the ADV7513 so the signal that the display receives is the full 2560x1440.</p> <p></p> <p>An update to the framework is required to support the non-uniform scaling for the cores output and pixel repetition is only supported for cores that have been updated. Older cores will have their output set to 1920x1080 if a mode requiring pixel repetition is requested.</p>"},{"location":"advanced/videoscaling/","title":"Video Scaling","text":"<p>MiSTer has a built-in scaler which converts the low-resolution video directly from the cores to a higher resolution with the added capability of using filters and such to enhance the experience on modern displays. Here's an overview of how to configure the scaling ratios.</p>"},{"location":"advanced/videoscaling/#video-scale-mode-vscale_mode","title":"Video Scale Mode (vscale_mode)","text":"<p>In your MiSTer.ini file at the root of your MicroSD card you can modify the way the original video from the core is scaled up onto your display. If you read the section from the link just now you will see the following a few lines down:</p> <pre><code>vscale_mode=0          ; 0 - scale to fit the screen height.\n                       ; 1 - use integer scale only.\n                       ; 2 - use 0.5 steps of scale.\n                       ; 3 - use 0.25 steps of scale.\n                       ; 4 - integer resolution scaling, use core aspect ratio\n                       ; 5 - integer resolution scaling, maintain display aspect ratio\n</code></pre> <p>There are a lot of options here so let's go through all of them:</p>"},{"location":"advanced/videoscaling/#vscale_mode0-fit-vertically-to-the-display-height","title":"vscale_mode=0 (Fit Vertically to the Display Height)","text":"<p>This is the default setting when you first turn on your MiSTer. If the game resolution is 256x224, in order to fit it vertically into a 1920x1080p display, you have to divide 224 into 1080. However, 224 doesn't divide evenly into 1080 (<code>1080 / 224 = 4.821428571428571~</code>). So some of the pixels may not be scaled evenly. Some people don't mind this and it sure is nice to fill the screen entirely from top to bottom. You may see some shimmering pixels, if you do then use the interpolation video preset to alleviate this, or some of the adaptive scanline filters.</p>"},{"location":"advanced/videoscaling/#vscale_mode1-integer-scaling","title":"vscale_mode=1 (Integer Scaling)","text":"<p>This setting makes it so the final scaled resolution multiplier of the core's video output is a whole number (e.g. 2x, 3x, 4x, 5x, 6x, etc...). Since your <code>video_mode</code> may still be set to 1920x1080p resolution, then the previous example of 256x224 will be scaled 4 times as large. <code>4 * 224 = 896</code>. However, the remainder is left black, so there will be a border, but your pixels are correctly scaled so there should be no shimmering (unless your display is causing it). Some people prefer this setting to get the crispest pixels they can get with a much lower chance of video artifacts that are undesirable. Others may not like it because it doesn't fill the screen the way 0 does.</p>"},{"location":"advanced/videoscaling/#vscale_mode2-and-3-fractional-integer-scaling","title":"vscale_mode=2 and 3 (Fractional Integer Scaling)","text":"<p>This setting is similar to <code>vscale_mode=1</code>, however instead of scaling increments of whole numbers (e.g. 2x, 3x, 4x, etc...), it will scale in increments of fractions of either 0.5 (e.g. 2x, 2.5x, 3x, 3.5x, 4x, etc...) or 0.25 (e.g. 2x, 2.25x, 2.5x, 2.75x, 3x, etc...). For some monitors this setting can greatly reduces shimmering issues (although not all of it) while using sharper filtering (or no filtering at all). It's suggested to test around with vscale_mode 2 and 3 on a per core basis to see what looks best to your eyes.</p>"},{"location":"advanced/videoscaling/#vscale_mode4-and-5-dynamically-scaled-video-mode","title":"vscale_mode=4 and 5 (Dynamically Scaled Video Mode)","text":"<p>This setting was recently added by wickerwaka, and it dynamically changes your <code>video_mode</code> in order to retain an integer scaling but still fill the screen. It is ideal if you are using your MiSTer on a 2560x1440p or 4k display because you can scale vertically and still get very close to zero shimmering and video artifacts. The way this works may seem confusing but it's actually simpler than it seems. If you don't want to learn all about it, just change the setting and test it out yourself. If you want to know how it works, take a read below:</p>"},{"location":"advanced/videoscaling/#vscale_mode4-integer-resolution-scaling-which-uses-the-cores-aspect-ratio","title":"vscale_mode=4 (Integer Resolution Scaling which uses the Core's Aspect Ratio)","text":"<p>If you have <code>video_mode=13</code> set in your MiSTer.ini file, then that means you are telling the MiSTer to set your display to 2048x1536p resolution at a 60hz refresh rate. </p> <p>If we take our example of 256x224, and let's assume the Core displays that at a 4:3 Aspect Ratio, then we need to find a vertical and horizontal resolution that fits the whole 256x224 at that ratio but Integer Scaled (like <code>vscale_mode=1</code> explained above). So 2048x1536 are actually the maximum numbers in either direction that we will go. 224 goes into 1536 almost 7 times but not quite, so the MiSTer will have to go with 6 as it's multiplier. That means the vertical resolution will be 1344. What is the horizontal resolution going to be? Well it has to be a 4:3 aspect ratio, so we also need to scale the 256 an equivalent amount. I personally use a calculator like this when I want to find out what it should be. This tells me that my horizontal resolution should be 1792 in order to fit into that frame.</p> <p>That looks like a lot of work, but thankfully vscale_mode=4 does all of the math for you so you don't have to worry about it so much. </p> <p>You may have mixed results with vscale_mode=4, for instance the PSX core changing resolutions will prompt a full resync, which can be jarring to some people.</p>"},{"location":"advanced/videoscaling/#vscale_mode5-integer-resolution-scaling-but-maintaining-the-displays-aspect-ratio","title":"vscale_mode=5 (Integer Resolution Scaling but maintaining the Display's Aspect Ratio)","text":"<p>This works very similarly to <code>vscale_mode=4</code> but it disregards the core's aspect ratio and it only calculates the proper integer scaled resolution that would fit in your screen's aspect ratio. Let's say you have a 1920x1200 display (16:10 aspect ratio) and you are using <code>video_mode=1920,1200,60</code>. The 16:10 aspect ratio will not be changed. This could be useful if you have a very specific display that you would like to fill up horizontally with some cores, or if you have a 31kHz computer monitor that does higher resolutions and you want to fit console cores into it's 4:3 aspect ratio.</p>"},{"location":"basics/addons/","title":"Addon Boards","text":"Artwork by Hewhoisred <p>MiSTer has various addon boards that are somewhat optional to use such as a 128MB SDRAM add-on board that allows you to use all of the cores on the system and the Analog IO board which enables you to easily connect your MiSTer to a classic CRT telivision or monitor. These boards can be purchased by various sellers online or assembled yourself by ordering the PCB from a PCB manufacturer, buying the components online, and soldering it yourself. </p> <p>Here's a rundown of what some of the current add-on boards are and what they do.</p>"},{"location":"basics/addons/#128mb-sdram-addon-board","title":"128MB SDRAM Addon Board","text":"<p>The 128MB SDRAM Add-on board for MiSTer is essential for multiple cores to even load games. You can alternatively go with a 32MB SDRAM board for a cheaper price, however there are some games on Neo Geo, Game Boy Advance, and a few other cores which might not be compatible if you go with the smaller sized module.</p> <p>When plugging in the SDRAM board, make sure to support the DE10-Nano from beneath with your thumbs. Forcing in the SDRAM board without support can bend the DE10-Nano board and permanently damage it.</p> <p></p> <p>Removing the SDRAM board can be tricky for some GPIO connectors and just pulling won't do it sometimes. For very tight connectors, it is recommended to wiggle the SDRAM board back and forth to remove the connectors slowly, bit-by-bit. Just pulling with force will often bend the GPIO header.</p> <p></p>"},{"location":"basics/addons/#usb-hub-addon-board","title":"USB Hub Addon Board","text":"<p>The USB Hub Add-on board for MiSTer has two methods of connecting to your DE10-Nano either via internal headers with a slim external board or with a bridge to connect both MicroUSB ports together. This board provides an OTG USB Hub for the MiSTer which has one power-only usb port in the back and 6 USB 2.0 ports ont he other 3 sides. It requires power so you may need a power splitter to supply power to both the DE10-Nano and this USB hub. If you use a Digital IO board you will only need a DC to DC jumper cable and a single cable to the Digital IO board's barrel jack in order to power the whole stack.</p>"},{"location":"basics/addons/#digital-io-addon-board","title":"Digital I/O Addon Board","text":"<p>Get this board if you want a few more options. It is cheaper than the Analog IO board below typically, and it leaves the 2nd SDRAM slot unoccuppied for the potential future cores which may require it someday.</p> <ul> <li>3 Buttons, Reset, On-Screen Display (OSD), and User (for various user interactions without a keyboard)</li> <li>3 status LEDs, Power, Disk, and User</li> <li>Secondary MicroSD card slot that may be required by some older computer cores. This is not typical MicroSD storage, think of it as like a little floppy drive.</li> <li>Mini-TOSLINK optical digital audio port.</li> <li>Full size TOSLINK optical digital audio port.</li> <li>User IO Port. This is a port that looks like it is USB 3.0 but it is not! This is actually used for direct serial communication with various peripherals and adapters like SNAC adapters and MT32-Pi.</li> <li>Fan Power header and fan mounting holes for better cooling.</li> <li>Doesn't use the 2nd set of 2x20 headers on the DE10-Nano so it is compatible with Dual SDRAM configurations.</li> </ul>"},{"location":"basics/addons/#analog-io-addon-board","title":"Analog I/O Addon Board","text":"<p>Get this board instead of the Digital IO Addon board if you want to use your MiSTer for simultaneous video output to a CRT and HDMI monitor. Otherwise the cheaper Digital IO board should be sufficient.</p> <ul> <li>3 Buttons, Reset, On-Screen Display (OSD), and User (for various user interactions without a keyboard)</li> <li>3 status LEDs, Power, Disk, and User</li> <li>Power On/Off Switch.</li> <li>Barrel jack which can be used to power the DE10-Nano with.</li> <li>Secondary MicroSD card slot that may be required by some older computer cores. This is not typical MicroSD storage, think of it as like a little floppy drive.</li> <li>VGA port for analog video output - See Advanced - CRT for the potential connectivity options.</li> <li>Simultaneous analog video and HDMI video output is possible with this board.</li> <li>Sync-on-green override\\auto switch.</li> <li>3.5mm analog audio port that is also a Mini-TOSLINK optical digital audio port at the same time.</li> <li>3.5mm audio-in port for ADC-in (like Tape input for some computer cores).</li> <li>User IO Port. This is a port that looks like it is USB 3.0 but it is not! This is actually used for direct serial communication with various peripherals and adapters like SNAC adapters and MT32-Pi.</li> <li>Fan power header and fan mounting holes for better cooling.</li> <li>Uses the 2nd set of 2x20 headers on the DE10-Nano so it is not compatible with Dual SDRAM configurations.</li> </ul>"},{"location":"basics/addons/#mt32-pi-lite-mister-addon-board","title":"MT32-Pi Lite MiSTer Addon Board","text":"<p>MT32-Pi is a baremetal emulator of the Roland MT-32 synth module. This add-on board is Sorgelig's rendition of the new version that utilizes a Raspberry Pi Zero 2 W. This board plugs into the side of the MiSTer into the User IO port on either the Digital IO board or the Analog IO board. Get this board if you want to listen to upgraded Midi sounds in certain cores and games that support it, like the ao486 core or the X68000 core. Here's a video by youtuber MiSTer Walrus FPGA showing off how the MT32-Pi sounds.</p>"},{"location":"basics/addons/#mt32-pi-raspberry-pi-hat-addon-board","title":"MT32-Pi Raspberry Pi HAT Addon Board","text":"<p>This is a Raspberry Pi HAT add-on board for the MT32-Pi. It is intended to be used with the Raspberry Pi 3A+ due to it's square shape, but the 3B and 4 will work just fine as well. You will also need a short USB Type A 3.0 Male to Male cable if you choose this option.</p>"},{"location":"basics/addons/#real-time-clock-addon-board","title":"Real Time Clock Addon Board","text":"<p>There is a Real Time Clock add-on board. If you want to add a real-time clock to your MiSTer you will require this. Various MiSTer FPGA cores use the Real-Time Clock feature. For more detailed information on how the board works and how to use it, check the Advanced - Add-On Boards - RTC Board section of this documentation page for more information.</p>"},{"location":"basics/addons/#adc-analog-audio-input-addon-board","title":"ADC Analog Audio Input Addon Board","text":"<p>The ADC Add-on board for MiSTer allows you to use either recordings of computer tape audio or actual retro tape players to send data over analog audio into certain computer cores.</p>"},{"location":"basics/addons/#where-to-buy","title":"Where to buy?","text":"<p>If you'd like to buy a board from a vendor online (instead of soldering one yourself), the MiSTer FPGA Forums have a Hardware Sellers forum just for that purpose. Here's a list of some hardware sellers from that forum and elsewhere, for your convenience:</p> <ul> <li>MiSTerAddons.com (USA)</li> <li>UltimateMiSTer.com (Portugal)</li> <li>MiSTerFPGA.co.uk (United Kingdom)</li> <li>AntonioVillena.com (Spain)</li> <li>LegacyPixels.com (USA)</li> <li>CAMInventions.com (Australia)</li> <li>ManuFerHi.com (Spain)</li> <li>MiSTer-FPGA.de (Germany)</li> <li>RetroCastle AliExpress store (China)</li> </ul> <p>This is not an official endorsement of any sellers, merely a collection of links. Any hardware failures or shipping failures you have should prompt you to reach out for support from the vendor you purchased your board from first.</p>"},{"location":"basics/bluetooth/","title":"Bluetooth","text":"<p>Bluetooth adapters and using controllers over bluetooth is supported on the MiSTer.</p>"},{"location":"basics/bluetooth/#compatible-adapters","title":"Compatible adapters","text":"<p>Generally speaking, most bluetooth 4.0 adapters use one of two similar chips, the CSR8510 and the BCM20702, and these are compatible. Bluetooth 5.0 adapters are a little different, but many are compatible as well. Here is a list of a few known compatible adapters:</p> <ul> <li>ASUS USB-BT500 (5.0)</li> <li>Edimax BT-8500 (5.0)</li> <li>MiSTerAddons.com's Bluetooth 4.2 / WiFi AC600 Combo Adapter</li> <li>MiSTerFPGA.co.uk's CSR8510 Bluetooth 4.0 Adapter</li> <li>MiSTerKits.com's CSR8510 Bluetooth 4.0 Adapter</li> <li>ZEXMTE Long Range USB Bluetooth (5.0)</li> </ul> <p>There are many more that work than these few. Please note that some hardware revisions may change the compatibility of even the adapters in this list, your results may vary. For the most part, most adapters seem to work fine.</p>"},{"location":"basics/bluetooth/#how-to-pair-your-bluetooth-controller-or-keyboard","title":"How to pair your Bluetooth controller or Keyboard","text":"<p>This is the easy part. Simply press the F11 key on a keyboard that is already connected to the MiSTer and the pairing prompt will pop up. Alternatively, if you have a Digital IO or Analog IO addon board, then you can press and hold the OSD button to bring up the same bluetooth pairing prompt. Put your controller into pairing mode and wait. The MiSTer should find it momentarily and connect to it. You may need to define your inputs for this new controller, even if it's been plugged directly into the MiSTer before as it is seen as a different controller over bluetooth.</p>"},{"location":"basics/bluetooth/#bluetooth-connection-to-mister-unstable","title":"Bluetooth connection to MiSTer unstable?","text":"<p>If your bluetooth connection to the MiSTer is unstable (e.g. losing the connection to your controller randomly), try getting a usb extension / pigtail adapter to move the adapter away from the USB hub. For some people the USB hub can add interference and can interrupt some adapters (like the ASUS USB-BT500 in some cases). The root cause of this behavior is not currently known.</p>"},{"location":"basics/case/","title":"Cases","text":"<p>There are multiple MiSTer FPGA cases available to you. From DIY cases made out of project boxes, to retro-fitting an old computer or console injection molded case, even 3d printing your own, and manufactured aluminum heatsink cases... There are plenty of choices. Remember, you can be creative and have fun with your case design of choice.</p>"},{"location":"basics/case/#get-some-ideas","title":"Get some ideas","text":"<p>If you are wanting to make your own case you might want some ideas. There is an excellent \"Show us your MiSTer\" thread up on the MiSTer FPGA official forums that you should take a look at if you are thinking of coming up with something creative. That thread has both store-bought and custom-build MiSTer's on display.</p>"},{"location":"basics/case/#3d-printed-designs","title":"3d Printed Designs","text":"<p>There are lots of 3d Printed cases on the internet. Here are some generic ones that may interest you if you have a 3d printer:</p> <ul> <li>Retro Frog's Compact Case</li> <li>Retro Frog's Full Size Console Case</li> <li>Retro Frog's Mini Console Case</li> <li>Retro Frog's simple Top and Bottom plate case</li> <li>jaddel's simple de10-nano case with a fan mount and user buttons</li> <li>misteraddons.com's early design</li> <li>hackerjack42's addendum to misteraddon.com's early design above</li> <li>pjtonge's Atari Computer styled case for the de10-nano + usb hub 2.1</li> <li>onaluf's unique case design for the 3 board MiSTer FPGA sandwich</li> <li>Zemciko's Atari 800XE computer inspired case design</li> <li>Yurif74's AjSTer case that uses the A-JAZZ AK33 keyboard for a retro computer style</li> <li>leejsmith's unique computer wedge case</li> </ul> <p>As you can see, a 3d Printer can give you a lot of flexibility in designing your own case.</p>"},{"location":"basics/case/#laser-cut-designs","title":"Laser-cut designs","text":"<p>There are both some open source and some for-sale laser cut case designs that may be of interest to you. Here are a few:</p> <ul> <li>zerohimself's top and bottom laser-cut plates design</li> <li>RnSKSkunkwerks laser cut RSK202/R plates</li> <li>RnSKSkunkwerks laser cut star wars inspired plates</li> </ul>"},{"location":"basics/cd/","title":"CD-based ROMs","text":"<p>MiSTer supports Cue/Bin and CHD formats. The way the MiSTer handles CD-based ROMs and images is fairly simple. There are some specifics that need to be described about how the MiSTer handles CDs.</p>"},{"location":"basics/cd/#will-mister-ever-support-usb-cd-drives","title":"Will MiSTer ever support USB CD Drives?","text":"<p>The short answer is no. The long answer is that:</p> <ol> <li>There is too much hardware variation in CD drives and the drivers that go with them for it to be worth it and</li> <li>Everything added to the Linux image and Main binary for the MiSTer have to be very carefully considered as the goal is to keep it lightweight and not bloated. </li> </ol> <p>CD Drive support is not a priority, as properly dumped CD-ROM images are bit-perfect where it counts (excluding randomized subchannel data and garbage data fill-in).</p>"},{"location":"basics/cd/#cuebin-folders-and-chd-files","title":"Cue/Bin Folders and CHD files","text":"<p>If you are using cue/bin files, then you need to place them in their own folder separate from the other cue/bin ROMs. Currently every CD-based core supports cue/bin. CHD files are a compressed CD image format that is also supported by almost every CD-based core. CHD files don't need to be placed in their own folder separate from each other.</p>"},{"location":"basics/cd/#multi-disc-games","title":"Multi-disc games","text":"<p>For multi-disc games like on Playstation / PSX you will want to place each of the disc files into the same subfolder like so:</p> <pre><code>./Valkyrie Profile (USA)/Valkyrie Profile (USA) (Disc 1).chd\n./Valkyrie Profile (USA)/Valkyrie Profile (USA) (Disc 2).chd\n</code></pre> <p>This will signal to the MiSTer that the save file name should be <code>Valkyrie Profile (USA).sav</code> (the subfolder name). It will also allow you to switch discs by loading the other disc image without resetting the core.</p>"},{"location":"basics/faq/","title":"FAQ","text":"<p>Here are some Frequently Asked Questions that you may have. If there is anything missing here, feel free to contribute by editing the page on github using the Edit pen icon in the top right.</p>"},{"location":"basics/faq/#when-will-mister-support-cartridges","title":"When will MiSTer support cartridges?","text":"<p>MiSTer will never use physical cartridges. </p> <p>The project aims to replace the need for having original hardware for the same experience. It is also physically impractical/impossible given the number of GPIO pins available from the FPGA. </p>"},{"location":"basics/faq/#does-mister-have-lag","title":"Does MiSTer have lag?","text":"<p>It depends on your setup, but it ranges from imperceptibly low to around one frame of lag.  </p> <p>Zero latency is possible with certain equipment and tweaks. See here for a more detailed explanation.</p>"},{"location":"basics/faq/#ive-seen-in-the-news-update-framework-what-does-that-mean","title":"I've seen in the news, \"Update Framework\".  What does that mean?","text":"<p>The \"framework\" has all the common elements between cores that handle things like IO, video scaling, etc...</p>"},{"location":"basics/faq/#can-i-customize-the-updatedownloader-script-to-ignore-certain-things","title":"Can I customize the update/downloader script to ignore certain things?","text":"<p>Yes, you would just need to add some filters to <code>/media/fat/downloader.ini</code>. Read this guide for more information.</p>"},{"location":"basics/faq/#can-i-use-the-downloader-script-to-download-more-cores-than-it-currently-does","title":"Can I use the downloader script to download more cores than it currently does?","text":"<p>Yes, there is support for custom databases in the downloader script. Read this guide for more information.</p>"},{"location":"basics/faq/#can-i-use-original-console-controllers","title":"Can I use original console controllers?","text":"<p>Yes, there are many USB adapters for original console controllers available, see the usb controller recommendations below. They can also be connected directly via the IO board's User port (SNAC) as detailed below.</p>"},{"location":"basics/faq/#what-about-light-guns","title":"What about light guns?","text":"<p>Light guns such as the NES Zapper are too timing sensitive to work over USB, but will work fine on supported cores via the IO board as detailed below. </p>"},{"location":"basics/faq/#any-usb-controller-recommendations","title":"Any USB controller recommendations?","text":"<p>Almost any controller that uses USB will work with MiSTer. You can also use a Bluetooth or 2.4ghz USB adapter for wireless. Good controllers that many users seem to like and have low input latency are:</p> <ul> <li>Sony DualSense (PS5 Controller) - Very low lag, fast pairing, and a touchpad that can be used as mouse input (for cores with mouse support, like SNES lightgun use or a mouse as a spinner control).</li> <li>8BitDo M30 Bluetooth and 8BitDoM30 2.4G - Note these kinds of controllers do not have as many buttons as the Playstation style controllers, and they do not have joysticks, so you may be limited if you solely use them.</li> <li>8bitDo SN30 Pro 2 - Versatile connectivity and confortable design that is similar to the Playstation DualShock form factor with an SNES aesthetic and button layout.</li> <li>8bitDo Arcade Stick - Wired and wireless low lag functionality with somewhat low variable lag, DIY customizable pushbuttons and joystick is also supported.</li> <li>iBuffalo SNES Controller - A little overpriced now, but it is one of the lowest lag controllers tested.</li> </ul> <p>And many many more. Check MiSTerAddons' input latency tests to help you decide. Also to ensure you get the fastest response make sure to check the USB overclock instructions section out.</p> <p>There are also some excellent usb controller adapters which enable you to use original console controllers:</p> <ul> <li>UltimateMiSTer.com's Daemon USB Adapters - Support for multiple kinds of controllers using an RP2040 chip and the GP2040 firmware.</li> <li>MiSTerAddons.com's Reflex Adapt - Supports multiple controller types with one primary device to use with multiple controller adapter cables.</li> <li>Timville Triple Controller Daemonbite - A spinoff of MickGuyver's Daemonbite adapters that has support for NES, Genesis, and SNES original hardware. You can also make it yourself using instructions found here. There is an option to purchase a 3d printed housing that you can also print yourself using the 3d files from here.</li> <li>MickGuyver's Daemonbite adapters - Very low latency adapters, often low supply and sold out however. Can build them yourself using instructions found here and here.</li> <li>2600-daptor D9 - Lowest latency \"controller\" in the MiSTerAddons input latency tests.</li> </ul>"},{"location":"basics/faq/#can-i-increase-the-polling-rate-of-my-usb-controller-to-improve-input-latency","title":"Can I increase the polling rate of my USB controller to improve input latency?","text":"<p>Yes, you can. See here.</p>"},{"location":"basics/faq/#do-i-need-the-official-usb-hub-add-on-board","title":"Do I need the official USB Hub Add-On Board?","text":"<p>No, but you will probably want some sort of inexpensive OTG hub (such as the MakerSpot Micro USB OTG Hub) at least (or a regular hub with an adapter). Use a powered hub if you have many devices.</p>"},{"location":"basics/faq/#do-i-need-to-have-a-usb-keyboard-with-me-to-use-mister","title":"Do I need to have a USB keyboard with me to use MiSTer?","text":"<p>Yes, it's a good idea to always have a USB keyboard available. Cheap wireless compact keyboards exist that you can use to reduce clutter.</p>"},{"location":"basics/faq/#how-do-i-add-a-second-controller-to-mister","title":"How do I add a second controller to MiSTer?","text":"<p>First setup the controller in the main menu after plugging it in with no core loaded. Then you can define it in the various cores' OSD menus. This is only necessary if the controller is a different make/model (or has a different VendorID/ProductID) than any other controllers you have already defined. If you have already setup a Dualshock 4 controller, the second Dualshock 4 controller shouldn't need it's inputs to be defined again. Because of this, shared VendorID's and ProductID's between devices that are different may require reconfiguration when switching between them. There isn't any way around this currently. This includes using 8BitDo and Mayflash controller adapters with multiple controllers, as the adapters contain the ID information which is referenced.</p>"},{"location":"basics/faq/#does-mister-need-an-io-board","title":"Does MiSTer need an IO board?","text":"<p>No. The IO board is optional, but offers features that could be important for some users (3.5mm and optical audio, CRT output, tape audio input, etc...).</p>"},{"location":"basics/faq/#what-are-the-methods-for-connecting-controllers-to-the-serial-port-of-the-io-add-on-board","title":"What are the methods for connecting controllers to the serial port of the IO add-on board?","text":"<p>SNAC (Serial Native Accessory Converter) is used for direct wiring. Supporting cores (SNES, Genesis, NES, and TG16) allow you to directly connect original controllers. SNAC Adapters can be purchased from various sellers online:</p> <ul> <li>MiSTerFPGA.co.uk's SNAC adapters (best to use alongside their SNAC extension cable)</li> <li>UltimateMiSTer.com's SNAC Adapters (best to use alongside their SNAC extension cable)</li> <li>MiSTerAddons.com's SNAC V1 and SNAC V2 and SNAC V3 which all use external controller adapters made for them purchased separately.</li> </ul> <p>See this page for details on SNAC.</p>"},{"location":"basics/faq/#do-i-need-an-io-board-to-get-analog-video-output-to-my-crt","title":"Do I need an IO board to get analog video output to my CRT?","text":"<p>No. You can also use an HDMI to VGA adapter to do it instead. See Direct Video.</p>"},{"location":"basics/faq/#is-mister-hard-to-set-up-is-it-really-only-for-technical-people-who-like-to-tinker","title":"Is MiSTer hard to set up? Is it really only for technical people who like to tinker?","text":"<p>No and no, but those who enjoy tinkering can get a lot extra out of their MiSTer if they wish. The minimum setup only requires attaching a memory board to a DE-10 Nano and making an SD card. See the Setup Guide for more information.</p>"},{"location":"basics/faq/#which-cores-require-sdram","title":"Which cores require SDRAM?","text":"<p>You can find the updated list at the Console Cores and Computer Cores sections. Many Arcade cores require SDRAM as well.</p>"},{"location":"basics/faq/#why-does-the-some-cores-require-an-sdram-add-on-board-when-the-other-cores-do-not","title":"Why does the some cores require an SDRAM add-on board when the other cores do not?","text":"<p>This is usually because the reliable timing for reads and writes to SDRAM are critical to make the core work properly without bugs. The original NES for instance needs to access the ROM directly, so the timings are much tighter so SDRAM is required. DDR3 has variable latency for random reads and random writes, so for systems where reliable timing is needed then DDR3 becomes unsuitable.</p>"},{"location":"basics/faq/#does-my-mister-need-cooling","title":"Does my MiSTer need cooling?","text":"<p>It is recommended to use a heatsink (passive cooling). 22mm x 22mm is the ideal size. 20mm x 20mm is more than enough however and is more common. Active cooling with a fan helps but is not strictly required. Some faster and more complex cores like ao486, SNES, N64, or PSX may generate a lot of heat.</p>"},{"location":"basics/faq/#what-power-supply-is-compatible-with-mister","title":"What power supply is compatible with MiSTer?","text":"<p>The DE10-Nano board needs a 5V power supply with at least 2A. The connector is a coaxial \"barrel\" plug of 5.5 mm outer diameter and 2.1 mm inner diameter, center positive. If you are using a USB Hub addon board and have a lot of power hungry peripherals attached to it (wifi, bluetooth, multiple controllers, a mechanical hard drive), it might be a good idea to upgrade to a similar 5v power supply, but with more amps (4A-5A). Typically this is only needed if you have a mechanical hard drive, are heavily using the charging port, or have an MT32-Pi powered by the serial IO user port as these draw a good amount of amps.</p>"},{"location":"basics/faq/#my-mister-needs-a-case-what-should-i-do","title":"My MiSTer needs a case. What should I do?","text":"<p>There are two routes you can take; either make it yourself or purchase a case from an online vendor. For DiY, you can find the necessary 3D print files online (e.g. thingiverse).</p>"},{"location":"basics/faq/#what-kind-of-screws-do-i-use-with-the-de-10-nanos-14mm-long-brass-standoffs","title":"What kind of screws do I use with the DE-10 Nano's 14mm long brass standoffs?","text":"<p>M3 screws, 8mm is a good length.</p>"},{"location":"basics/faq/#how-do-i-set-up-mister-for-1080p-shimmer-free-gameplay","title":"How do I set up MiSTer for 1080p, shimmer free gameplay?","text":"<p>Run the updater script and use one of the video presets + filters that come with it in the Video Processing menu on the secondary OSD. See Video Configuration for more specific information.</p>"},{"location":"basics/faq/#how-do-i-get-the-scanlines-filters-on-my-mister-to-look-good","title":"How do I get the scanlines filters on my MiSTer to look good?","text":"<p>You will need to set the device to integer scaling for the best results without any shimmer artifacts during motion. Either set vscale_mode=1 in mister.ini or use the vscale integer settings within the core itself (as well as 5x) if they are supported. Not all cores support the OSD options to do integer scaling.</p> <p>\"Integer scaling\" is when your source resolution (240p) is divided into your target resolution (1080p) using only whole numbers (e.g. 1, 2, 3, 4...). This means if you use integer scaling with the MiSTer set to a 1080p resolution in the MiSTer.ini, and the core you are using natively outputs 240p, then the image will be scaled 4x which 4 times 240 equals 960. This leaves a black border for the remaining 80 pixels distributed across the top and bottom the screen.</p> <p>You can play with other settings if you want the scaler to fill the screen, but scanlines won't be \"perfect\" unless the source resolution (e.g. 240p) divides evenly into the target resolution (e.g. 1200p at 5x scaling).</p>"},{"location":"basics/faq/#i-have-a-4k-or-other-higher-than-1080p-display-does-mister-support-that-resolution-id-like-to-enjoy-better-video-scaling","title":"I have a 4k or other higher than 1080p display, does MiSTer support that resolution?  I'd like to enjoy better video scaling.","text":"<p>MiSTer can't quite reach 4k. Edit mister.ini on your SD card to change resolutions, e.g. video_mode=12 for 1920x1440p or video_mode=13 for 2048x1536p (hardware maximum). There is also video_mode=14 for 2560x1440p using the pixel repetition feature of your display, but this may have some tearing or resizing artifacts induced by your display's upscaling feature. Compatibility with these higher resolutions may depend upon your display and signal chain.</p>"},{"location":"basics/faq/#how-does-the-accuracy-level-of-various-mister-cores-compare-to-other-fpga-options","title":"How does the accuracy level of various MiSTer cores compare to other FPGA options?","text":"<p>Most MiSTer cores are just as, if not more accurate, as any of the other major FPGA offerings available today. Most people would not able to tell the difference between these cores and the original hardware.</p>"},{"location":"basics/faq/#will-any-mister-core-ever-get-save-states","title":"Will any MiSTer core ever get save states?","text":"<p>The Gameboy, GBA, Lynx, Wonderswan, NES, and PSX cores all support savestates.</p> <p>Cores need to be written from scratch to support them or they need to be reworked significantly to support pause before save states can be added. At this time there are no specific plans to apply this to other cores, but it may happen one day. It is not as simple to add savestate functionality to an FPGA-based emulator than it is to add to a software-based emulator.</p>"},{"location":"basics/faq/#why-doesnt-this-core-from-another-repo-work-why-is-mister-so-hard-to-use","title":"Why doesn\u2019t this core from another repo work? Why is MiSTer so hard to use?","text":"<p>MiSTer repositories are self contained and the official updater script only fetches cores from the active official MiSTer repositories. Cores from other repos are not fully integrated so your results may vary. Some developers have their own discord servers or forums and you can seek support there.</p>"},{"location":"basics/faq/#other-cores-work-but-i-get-a-black-screen-for-this-one-what-do-i-do","title":"Other cores work but I get a black screen for this one. What do I do?","text":"<p>Try setting vsync_adjust to 0 as your display may not support all refresh rates. (Note that this was the default setting)</p>"},{"location":"basics/faq/#my-cd-games-dont-work-help","title":"My CD games don\u2019t work! Help!","text":"<p>Unzip them. Do not zip CD games. Also put them in iso/wav/bin/img + cue format.</p>"},{"location":"basics/faq/#how-do-i-handle-multidisc-games-the-core-keeps-resetting-when-i-change-to-another-disc","title":"How do I handle multidisc games? The core keeps resetting when I change to another disc!","text":"<p>You need to place all discs into the same subfolder to do disc-swapping, like so:</p> <pre><code>./Valkyrie Profile (USA)/Valkyrie Profile (USA) (Disc 1).chd\n./Valkyrie Profile (USA)/Valkyrie Profile (USA) (Disc 2).chd\n</code></pre> <p>If they are in the same folder then the core should not reset when you mount the next disc.</p>"},{"location":"basics/faq/#what-version-of-the-cd-card-bios-do-i-need-for-turbografx-16-cdpc-engine-cd","title":"What version of the CD card bios do I need for TurboGrafx-16 CD/PC Engine CD?","text":"<p>Use Japanese version 3.0. You will commonly find it with filename: <code>Super CD-ROM System (Japan) (v3.0).pce</code></p>"},{"location":"basics/faq/#how-do-i-make-mister-boot-into-the-nes-core-and-a-specific-game","title":"How do I make MiSTer boot into the NES core and a specific game?","text":"<p>You need to use two different options: autobooting a core, and starting the core on a given ROM. Here is how:</p> <ul> <li>In the .INI file, set <code>bootcore=NES_20201102.rbf</code> (or the specific core version you have), and comment out <code>;bootcore_timeout</code>.</li> <li>Then on your NES games folder (e.g. <code>/media/fat/games/NES/</code>, copy the FDS bios as <code>boot0.rom</code>, and your .NES rom to boot as <code>boot1.rom</code>.</li> </ul> <p>For more options, please refer to the NES core documentation </p>"},{"location":"basics/faq/#i-heard-the-de10-nano-board-uses-subsidized-components-is-mister-doomed-if-that-stops","title":"I heard the DE10-Nano board uses subsidized components. Is MiSTer doomed if that stops?","text":"<p>De10-Nano is manufactured in very large scale for use by students and is widely available. When it reaches end of life, the open source cores and infrastructure will be ported to another widely available board.</p>"},{"location":"basics/faq/#i-see-a-defect-that-some-other-people-arent-seeing-should-i-get-a-different-de-10-nano","title":"I see a defect that some other people aren\u2019t seeing. Should I get a different DE-10 Nano?","text":"<p>No, you should report the defect and wait for a fix. There is no magical best DE-10 Nano.</p>"},{"location":"basics/faq/#i-found-some-other-cyclone-based-dev-board-on-sale-and-it-has-built-in-wifi-can-i-use-it-for-mister","title":"I found some other Cyclone based dev board on sale and it has built in WiFi. Can I use it for MiSTer?","text":"<p>Generally, no. While it\u2019s always possible that someone will take time to port things to other boards, the different pins and memory will mean it won\u2019t be a straight use and unless it\u2019s a significant upgrade, it would never gain official support. The work involved to support another platform is quite heavy, so there is no plan to support multiple unofficial hardware platforms.</p>"},{"location":"basics/faq/#the-de-10-is-rated-for-up-to-100c-operation-and-it-doesnt-get-nearly-that-hot-do-i-really-need-a-fan-or-heatsink","title":"The DE-10 is rated for up to 100\u00b0C operation and it doesn\u2019t get nearly that hot.  Do I really need a fan or heatsink?","text":"<p>A number of complex cores (like ao486) benefit from having the chip at cooler temperatures, since heat can affect the tight timings they require. A heatsink is recommended to avoid any possible glitches, but you won't damage your DE10-Nano if you choose not to use one. A fan is even better on top of that.</p>"},{"location":"basics/faq/#can-you-take-screenshots-on-the-mister","title":"Can you take screenshots on the MiSTer?","text":"<p>You can take screenshots on the MiSTer very easily. All you have to do is press Win+Print Screen on your keyboard and you will get an upscaled screenshot. For raw output from the core (which may be distorted or in a weird aspect ratio) prese Shift+Win+Print Screen. The screenshots are stored in <code>./screenshots</code> in a folder named after the core you took the screenshot in.</p> <p>These screenshots do not include the effects of any video processing options, they are very simple. To take screenshots of the full video processing (i.e. the image you see on your modern screen when using the MiSTer) you will need to use some kind of capture card that supports the desired resolution. An example capture card that tis frequently used in the community is the Magewell USB HDMI Gen 1 or Gen 2 which can be found for a fraction of the retail price on eBay used.</p> <p>Here is an example of a raw screenshot from the NES core</p> <p>Here is an example of an upscaled screenshot from the Neo Geo core</p>"},{"location":"basics/faq/#why-use-fpga-when-other-proven-solutions-exist-such-as-raspberry-pi","title":"Why use FPGA when other proven solutions exist, such as Raspberry Pi?","text":"<p>The following was originally written by Sorgelig, founder of MiSTer FPGA</p> <p>There are debates about how to refer to the process of simulating real hardware using FPGA. Some people insist it's not emulation but rather true hardware replication, while any simulation using a traditional CPU should be referred to as emulation. I have my own opinion here. :) From my point of view, if the FPGA code is based on the circuitry of real hardware (along with the usual tweaks for FPGA compatibility), then it should be called replication. Anything else is emulation, since it uses different kinds of approximation to meet the same objectives. Currently, it's hard to find a core that can truly be called a replica \u2013 most cores are based on more-or-less functional recreations rather than true circuit recreation. The most widely used CPU cores \u2013 the Z80 (T80) and MC68000 (TG68K) \u2013 are pure functional emulations, not replications. So it's okay to call FPGA cores emulators, unless they are proven to be replicas.</p> <p>To go back to the original question, then, why FPGA, if it's also just emulation? Well, FPGA emulation is fundamentally different than emulation on a CPU. Traditional emulators on CPUs execute code sequentially. This is a tricky method of emulation because real hardware has many chips and all of them work in parallel. The CPU, video chip/logic, audio chip, memory arbiter \u2013 all of them are working at the same time. So a traditional emulator has to take care of all these parts and try to emulate the whole orchestra at the same time by quickly \"running\" from one chip to another. This requires a lot of CPU power to emulate even an old and slow retro computer. Sometimes even a modern CPU working at 100 times the speed of the retro computer is not enough, so the emulator has to use approximation, skip emulation of some less important parts, or assume some standard work of the emulated system without extraordinary usage. Let's take a well-known emulator, UAE, emulating an Amiga. On a Raspberry Pi 3, you can run some Amiga CPU benchmarks and get crazy numbers like 100 times the original 68000 processor. So you may assume you have an emulated Amiga that is 100 times faster than real one. No, you don't. If you run different kinds of demos or games, you will see the video stutters sometimes. For example, if you play the well-known \"State of The Art\" demo by Spaceballs, you will notice video stuttering at some points, while a real Amiga 600 with 1x CPU speed plays the whole demo very smoothly. This is how traditional emulators on Raspberry Pi work.</p> <p>FPGA emulation works very differently from traditional emulation on CPU. An FPGA is a large array of simple triggers and other logic \u2013 just like any other chip/CPU. The only difference is that specific chips/CPUs have these triggers and logic permanently connected, while FPGA allows you to connect them however you want. A special HDL (hardware description language) describes how to connect all these triggers/logic cells. Everything in FPGA works in parallel like in the original chips/devices. Thus, FPGA is pretty close to the original hardware. FPGA doesn't need high frequencies to emulate retro computers; it works at much lower frequencies than traditional emulators require. Since everything in FPGA works in parallel, it is no problem to handle any possible usage of the emulated system. Developers using FPGA usually concentrate on the specific part to make it work correctly \u2013 and it will work as it should in any possible scenario. In the same reference demo, \"State Of the Art,\" using FPGA emulation, you can see smooth video through the whole playback, as on the original hardware.</p> <p>You may want to ask, \"So why not make all emulators on FPGA then?\" The answer is: FPGA programming is not so trivial. Every bit in FPGA works in parallel, so the developer needs to think in parallel as well :). What is trivial on CPU is not trivial on FPGA \u2013 although some parts that are trivial on FPGA cost a lot in CPU code.</p>"},{"location":"basics/hotkey/","title":"Hotkeys","text":"<p>Here's a reference of the hotkeys you can use with the MiSTer. Hotkeys are useful at saving time and there are some hotkeys which do things you can only do with a keyboard or gamepad. Some of these hotkeys only work in the Main Menu core, others will work inside emulators as part of the gameplay, and some will work in all instances.</p>"},{"location":"basics/hotkey/#in-any-core-with-osd-closed","title":"In any core, with OSD closed","text":"Hotkey Description F12 Open the Menu/On-Screen Display Alt+F12 Open core select menu Win+Print Screen Take a screenshot (upscaled) Shift+Win+Print Screen Take a screenshot (raw output) Left Ctrl+Left Alt+Right Alt Press \"User\" button, usually resets current core, same function as IO board button Left Shift+Left Ctrl+Left Alt+Right Alt Full Reboot/Reset, same as IO add-on board Reset button Controller: Button + Menu hotkey Turn on/off turbo/autofire for the pressed button Controller: Direction + Menu hotkey Set rate of turbo/autofire in milliseconds (ms)"},{"location":"basics/hotkey/#with-the-osd-open-in-any-core","title":"With the OSD open, in any core","text":"Hotkey Description F12 Close OSD F11 Pair Bluetooth controller Hold IO Board OSD Button Alternate method to Pair Bluetooth controller Left Go to information screen (shows currently selected INI file and volume) Right System screen (change core, set filters, gamma, etc...) Controller: Back + R/L/U/D Select Alternate INI file if defined (Default/Alt1/Alt2/Alt3) Controller: Select Expands submenus in the OSD when highlighted Controller: Shoulder Buttons Cycles through the OSD options in a core in either direction"},{"location":"basics/hotkey/#in-the-main-menu-core-only","title":"In the Main Menu core only","text":"Hotkey Description F1 Switch background type (static, wallpaper, color bars, black) F2 Hide / Show core dates F9 Open Linux terminal / command line interface, use F12 to go back to menu Controller: LB + X / Y Test the rumble motors on your controller"},{"location":"basics/hotkey/#core-specific-hotkeys","title":"Core-specific hotkeys","text":""},{"location":"basics/hotkey/#some-computer-cores","title":"Some computer cores","text":"<p>Some computer cores make use of the Windows key (Win) on your keyboard.</p> Hotkey Description Win+F12 Open the OSD"},{"location":"basics/hotkey/#cores-that-support-savestates","title":"Cores that support savestates","text":"<p>Very few cores support savestates (NES, PSX, GameBoy, GBA, WonderSwan, AtariLynx). There are 4 savestate slots available. In those cores there is a standard savestate button you can assign on your controller (we'll call that SaveStateBtn here):</p> Hotkey Description Alt+F1 - F4 Save the state in slots 1-4 respectively F1 - F4 Restore the state from slots 1-4 respectively Controller: SaveStateBtn + Left/Right Switches the savestate slot Controller: SaveStateBtn + Start + Down Saves to the selected slot Controller: SaveStateBtn + Start + Up Restores from the selected slot"},{"location":"basics/input/","title":"Controllers","text":"<p>MiSTer has support for a wide variety of input devices. It also has options to configure these devices to fit your needs in addition to several quality of life features across most, sometimes all, cores. Here is a breakdown of some special configurations for various input devices like spinners, gamepads, joysticks, and keyboards.</p> <p>MiSTer has a set of standard features for USB gaming controllers:</p> <ul> <li>Up to 6 player support</li> <li>Auto Fire</li> <li>Mouse emulation from your joystick</li> </ul>"},{"location":"basics/input/#default-joystick-player-assignment-method","title":"Default Joystick Player Assignment Method","text":"<p>Up to 6 player controllers are supported (depending on core):</p> <ul> <li>After a core starts, press a button on any connected controller to make it the Player 1 gamepad/joystick</li> <li>Press a button on a second controller to make it the Player 2 joystick (if supported by the core)</li> <li>Keep going for assigning Player 3, Player 4, etc...</li> <li>If you assigned the players in the wrong order, it's easy to start over, just go to the On-Screen Display's secondary menu (press Right after going into the OSD) and select \"Reset player assignment\" to start all over again.</li> <li>If you reset the core, it also resets the player assignments.</li> </ul> <p>Please note; if a controller doesn't seem to work, it's possible you will need to reboot the MiSTer into the Menu core, and define the inputs for that controller if it hasn't been done already. Also, if the controller attached has the same Product ID and Vendor ID as seen by the linux system, you may not be able to use two of them at the same time. It depends upon how the controller is made to work.</p>"},{"location":"basics/input/#advanced-joystick-player-assignment-method","title":"Advanced Joystick Player Assignment Method","text":"<p>There is now an alternate method to do joystick player assignment manually based upon the vendor ID and product ID of the USB device (e.g. an an arcade cabinet with two usb encoder joysticks and the one on the right always being assigned to player 2). To use this manual joystick player assignment feature you can assign it by one of three identification methods:</p> <ol> <li>For bluetooth devices connected wirelessly, you would use the bluetooth MAC address.</li> <li>For wired devices you would typically use the VendorID and ProductID.</li> <li>For multiple devices that share the same VendorID and ProductID, you would want to use the USB port location.</li> </ol> <p>The easiest way to get this information is to either open up a console connection or SSH into your MiSTer as root and run <code>killall MiSTer; /media/fat/MiSTer</code> to watch the debug output whenever you plug or unplug a usb device. Then you would enter that information into your MiSTer.ini with the instructions provided in the section that starts with <code>Permanently assign specific controller to specific player.</code>.</p>"},{"location":"basics/input/#auto-fire","title":"Auto Fire","text":"<p>Any defined button (except the d-pad) supports the auto fire feature. To activate auto fire, press and hold the desired button and then quickly press and release the button defined as <code>BUTTON OSD</code>(for joystick) or <code>KBD TOGGLE</code>(for keyboard). To deactivate auto fire, repeat the the same procedure for that same button you set before.</p> <p>Auto fire rates can be modified by increments of 32ms all the way up to 1024ms (repeating the button once every second). To change the speed, press and hold a direction on the d-pad and then quickly press the button defined as <code>BUTTON OSD</code>(for joystick) or <code>KBD TOGGLE</code>(for keyboard). Up or right increases the delay of the auto fire while down and left decrease the delay. Some games will not function properly if the auto fire rate is too fast, so this is a useful feature to keep in mind if you run into problems.</p>"},{"location":"basics/input/#mouse-emulation","title":"Mouse emulation","text":"<p>Your joystick can emulate mouse if the required button \"Mouse Emu\" has been defined when you defined your inputs in the Menu core. Hold the <code>Mouse Emu</code> button and Alt+M, Mouse Left/Right/Middle Btn will emulate the mouse functions. When Mouse emulation is activated, the left analog stick (if defined earlier) will be switched to pointer functions for the mouse. Press <code>BUTTON OSD</code> while holding <code>Mouse Emu</code> to toggle mouse emulation permanently. In permanent mouse emulation the <code>Mouse Emu</code> button becomes a sniper button with smaller pointer movements. Only the buttons defined for mouse emulation will be switched. Other joystick buttons will continue to act as regular joystick buttons. Thus, if your game pad has many buttons, you can have both mouse and joystick in one game pad at the same time (useful for some games, like Walker on Amiga).</p>"},{"location":"basics/input/#what-devices-are-supported","title":"What devices are supported?","text":"<p>Generally speaking, any normal USB HID compatible input device should work. Keyboards, arcade spinners, usb adapters for original controllers such as the Raphnet and Daemonbite retro adapters, and even modern console controllers like the DualSense PS5 controller. There is even the Serial Native Accessory Connector, if you have one of the Analog or Digital IO add-on boards, which on supported cores allows you to use original hardware controllers, such as lightguns, which would normally only work with the original system and require zero lag to function.</p>"},{"location":"basics/input/#serial-native-accessory-convertor-snac","title":"Serial Native Accessory Convertor (SNAC)","text":"<p>SNAC adaptors allow you to connect original hardware controllers and peripherals to the MiSTer cores. The cores which support SNAC connections have been specially built to have serial connections exposed to specific pins on the DE10-Nano. That means when you pull the trigger on the NES Zapper while aiming at your CRT, the signals travel almost instantly, similar to how they would on original hardware.</p>"},{"location":"basics/input/#using-a-lightgun","title":"Using a Lightgun","text":"<p>In addition to SNAC support for using lightguns with their original system's core, MiSTer also supports several USB/Bluetooth lightguns. Examples include GUN4IR, Guncon 2, Guncon 3 and the Wiimote. These can be used with various cores, ie they can act as a Zapper in the NES core, a Guncon 1 in the PSX core etc.</p> <p>Additional information on Guncon 2 support can be found here https://github.com/NolanNicholson/GunCon2-MiSTer</p>"},{"location":"basics/input/#lightgun-calibration","title":"Lightgun Calibration","text":"<p>The lightgun needs to be calibrated in each core:</p> <ul> <li>Press the F10 key while the OSD is open to show the calibration screen, follow the prompt to shoot each edge of the image</li> <li>It is recommended to load a game and calibrate to the edges of the image, rather than the entire (widescreen) TV</li> </ul>"},{"location":"basics/input/#lightgun-joy1joy2-assignment","title":"Lightgun Joy1/Joy2 assignment","text":"<ul> <li>This setting needs to match the player number your lightgun is currently assigned within the core. See Default Joystick Player Assignment Method</li> <li>Some systems had their lightguns connect to player 2, eg NES, SNES, Genesis. Many games from these systems will also work with the lightgun assigned as player 1 (Joy1), however some require a normal controller as player 1 and the lightgun as player 2 (Joy2). </li> </ul>"},{"location":"basics/input/#psx-lightgun-mapping","title":"PSX Lightgun Mapping","text":"Guncon Justifier Mapping Trigger Trigger O (Gun Fire:Negcon A) A (Left) Start Start (Gun A) B (Right) Rear Button X (Gun B:Negcon I) <p>OSD Settings</p> <ul> <li>Pad1: GunCon or Justifier (set based on Game)</li> </ul>"},{"location":"basics/input/#snes-lightgun-mapping","title":"SNES Lightgun Mapping","text":"SuperScope Justifier Mapping Fire Trigger A (SS Fire) Cursor B (SS Cursor) Pause Start Y (SS Pause) <p>OSD Settings</p> <ul> <li>'Input Options' menu<ul> <li>Super Scope: Joy2</li> <li>Super Scope Btn: Joy</li> <li>Gun Type: (Set based on game)</li> </ul> </li> </ul>"},{"location":"basics/input/#nes-lightgun-mapping","title":"NES Lightgun Mapping","text":"Zapper Mapping Trigger Zapper/Vaus BTN <p>OSD Settings</p> <ul> <li>'Input Options' menu<ul> <li>Periphery: Zapper (Joy2)</li> <li>Zapper Trigger: Joystick</li> </ul> </li> </ul>"},{"location":"basics/input/#genesis-sega-cd-lightgun-mapping","title":"Genesis / Sega CD Lightgun Mapping","text":"Menacer Justifier Mapping Trigger Trigger A Top Button B Lower Button C Pause Start Start <p>OSD Settings</p> <ul> <li>'Input' menu<ul> <li>Gun Control: Joy2</li> <li>Gun Fire: Joy</li> </ul> </li> </ul>"},{"location":"basics/input/#master-system-lightgun-mapping","title":"Master System Lightgun Mapping","text":"Phaser Mapping Trigger Fire 1 <p>OSD Settings</p> <ul> <li>'Input' menu<ul> <li>Gun Control: Joy1</li> <li>Gun Fire: Joy</li> <li>Gun Port: Port 1</li> </ul> </li> </ul>"},{"location":"basics/input/#atari-7800-lightgun-mapping","title":"Atari 7800 Lightgun Mapping","text":"XG-1 light gun Mapping Trigger Fire 1 <p>OSD Settings</p> <ul> <li>'Peripherals' menu<ul> <li>Port1 Input: Lightgun</li> <li>Gun Control: Joy1</li> <li>Gun Fire: Joy</li> </ul> </li> <li>'Audio &amp; Video' menu  <ul> <li>Show Overscan: Yes</li> </ul> </li> </ul>"},{"location":"basics/input/#using-a-mouse","title":"Using A Mouse","text":"<p>You can also use a mouse for various purposes on the MiSTer. The main purpose for mouse support is for use with some computer cores which had mice.</p> <p>You can also use the mouse as an emulated lightgun. The same principles behind doing this applies to a wiimote with a powered sensor bar. You can do this by pairing your wiimote to the MiSTer and it will be used as a Mouse when paired.</p> <p> </p> <p>You can also use a mouse for a paddle style controller if you'd like.</p>"},{"location":"basics/input/#are-gaming-keyboards-worth-it","title":"Are gaming keyboards worth it?","text":"<p>High performance and expensive keyboards and mice aren't advantageous to use for MiSTer. They won't give any major or even minor significant benefits. Additionally, these devices often have too many functions and many virtual devices cluttering the input subsystem which may introduce input lag or be complete unresponsive. They may also prevent other devices, such as gamepads, from working. So if you experience problems with your gaming keyboard, try a simpler keyboard instead to see if that resolves the issue. General advice is not to go out and buy a specialty gaming keyboard for MiSTer specifically, it may end up being a waste of money.</p>"},{"location":"basics/input/#what-about-rumble-support","title":"What about rumble support?","text":"<p>Rumble / controller vibration has recently been added to the Game Boy core, the Game Boy Advance core, and, of course, the Playstation core. With regards to the Playstation core you will need to make sure your controller's rumble is upported. You can test rumble support on your controller at the menu core by holding the \"L\" button and pressing the \"X\" or \"Y\" face buttons (assuming an SNES-style layout) to test each of the two motors. Controllers have to be in X-Input mode in order to work with rumble reliably.</p>"},{"location":"basics/input/#what-about-ps3ps4ps5-xboxone360-switch-and-8bitdo-receiversgamepads","title":"What about PS3/PS4/PS5, XBoxOne/360, Switch, and 8bitdo receivers/gamepads?","text":"<p>The ideal solution today for these types gamepads is to use 3rd-party receivers, such as 8bitdo retro receivers, specifically the 8Bitdo Wireless Bluetooth Adapter, or any number of name-brand Bluetooth 4.x/5.0 receivers. The 8bitdo receiver easily supports Xbox One S/X, PS3, PS4, Wii, Switch, and 8Bitdo's own gamepads and it can pair easily without using the bluetooth setup menu. One 8bitdo bluetooth receiver will pair with one controller at one time. If multiple controllers are required for multiplayer games, then multiple receivers will need to be purchased if you are using the 8bitdo receiver, however a regular Bluetooth usb receiver does not suffer from this limitation.</p> <p>The 8bitdo receivers have been reported as having some lag introduced, limited range, and bad line of sight, when compared to Bluetooth 5.0 adapters (like the TP-Link and Asus ones). The main appeal of the 8bitdo receivers is the ease of use and quick pairing. The 8bitdo receivers act as a controller themselves and are a compatibility layer between your paired controller and whatever they are attached to via USB, for easy compatibility. Bluetooth adapters by comparison pair your controller itself directly as a device to the MiSTer. No matter what controller you connect, the 8bitdo receiver will see it as the same controller, the 8bitdo receiver's controller. This means that some features like the DualSense (PS5) controller's added mute button and touchpad will not be available, whereas using bluetooth 5.0 may run a very minor risk of limited compatibility (until device support is added into the framework and linux by the development team), but will come with every feature.</p> <p>The Grey/Orange (brick decorated) USB Adapters are functionally the same, after using the latest firmware. Gamepads may switch to different input modes using hotkeys for different functionality (depends upon the model of controller, some have a switch on the back like the 8bitdo SN30 Pro 2). Note that documentation on 8Bitdo's site doesn't specify this, but the update logs for the firmware updates does.</p> <ul> <li>X-Input mode: Hold SELECT+UP for 3 seconds.</li> <li>PSC (Playstation Classic) mode: Hold SELECT+DOWN for 3 seconds. This is useful for gamepads which are limited in buttons (12 total; DPAD counts as 4) and need to access the MiSTer OSD menu. Note that the OSD menu should not be assigned when configuring buttons in the main MiSTer menu core, as the L+R+START combination will bring up the OSD while in the cores. The combination is hard-coded in MiSTer specifically for 8Bitdo adapters. You may also lose auto-fire/mouse functionality in this mode.</li> </ul> <p>Alternative 8Bitdo adapters, such as the 8Bitdo Console Retro Receiver (SNES, NES, Genesis) are always in X-Input mode when connected via microUSB.</p>"},{"location":"basics/input/#jammasd-support","title":"JammaSD support","text":"<p>MiSTer supports the use of a JammaSD by detecting if the pressed buttons are from Player 1 or 2. You first have to configure player 1 in main menu (as a joypad) (and also remap it in cores if needed). Player 2 inputs will be auto defined, like if it was a second identical joypad. MiSTer also supports a second JammaSD being plugged in for Player 3 and 4. JammaSD support was added with a VID/PID that should be the same across all devices, but if your device has a different VID/PID, you can adjust it in the MiSTer.ini file using the jamma_vid/jamma_pid/jamma2_vid/jamma2_pid options.</p>"},{"location":"basics/keyboard/","title":"Keyboards","text":"<p>MiSTer supports keyboard re-mapping which is useful for reduced size or localized keyboards. Key remapping is system wide, so every core will have same key mapping. Keep in mind there is no macro key functionality, so single keys are remapped to another single key. Some multimedia keys generate several key codes - these keys cannot be remapped. Each keyboard model has its own key map stored in <code>/media/fat/config/kbd_[VID]_[PID].map</code> file. To reset all keys to their default state, simply delete the appropriate map file which has the matching VenderID and ProductID in the filename. Key remapping is available through the Menu core only.</p>"},{"location":"basics/keyboard/#joystick-emulation","title":"Joystick emulation","text":"<p>Keyboards can be switched to joystick emulation. You need to define keys used for joystick emulation the same way you did for joysticks. Auto fire is also supported the same way as they are for joysticks (Menu+button). The button defined for \"KBD TOGGLE\" provides a quick switch between keyboard and joystick use for defined keys.</p>"},{"location":"basics/keyboard/#mouse-emulation","title":"Mouse emulation","text":"<p>Keyboards can be switched to mouse emulation. You need to define mouse emulation buttons in the Menu core the same way as for joystick, in the Define Gamepad menu option.</p>"},{"location":"basics/keyboard/#emulation-switch","title":"Emulation switch","text":"<p>To switch between emulation modes press Num Lock or Scroll Lock until the desired mode is selected. </p> <p>The switching sequence is <code>Mouse &gt;&gt; Joy1 &gt;&gt; Joy2 &gt;&gt; None</code></p> <p>The LEDs on your keyboard will display the emulation modes:</p> <ul> <li>Mouse emulation: NumLock LED + ScrLock LED</li> <li>Joystick 1 emulation: NumLock LED.</li> <li>Joystick 2 emulation: ScrLock LED.</li> </ul>"},{"location":"basics/keyboard/#common-functional-keyscombos-used-in-cores","title":"Common functional keys/combos used in cores","text":"<ul> <li>F12 - open/close OSD menu/submenu</li> <li>Alt+F12 - quick core selection (like in Menu core).</li> <li>Left Ctrl+Left Alt+Right Alt - presses the \"USER\" button which usually is reset in emulated system.</li> <li>Left Shift+Left Ctrl+Left Alt+Right Alt - MiSTer reset (load Menu core).</li> </ul>"},{"location":"basics/keyboard/#notes","title":"Notes:","text":"<ul> <li>Some systems provide writing support which requires additional attention to how you reset/shutdown the MiSTer. MiSTer tries not to keep any pending writes and writes physically to the disk as soon as possible. Still, safer way to reset the MiSTer from core which probably was writing to disk recently is using combo Left Shift+Left Ctrl+Left Alt+Right Alt - this will flush all caches to disk before restart. Cores without write can be restarted by hard reset button or powered down without special attention.</li> <li>Left Ctrl+Left Alt+Right Alt sequence can be replaced by some other well known combos through INI file.</li> </ul>"},{"location":"basics/links/","title":"Links","text":"<p>Here's a collection of links to various information, videos, and articles about the MiSTer. MiSTer is an evolving platform, so these videos can only represent what was available at the time of them being made, some information and representations may be outdated. If you just want a comprehensive full review of almost everything MiSTer has to offer that is relatively up to date then watch the My Life In Gaming video here:</p> <p>MiSTer FPGA in 2022: A Primer Guide to Retro Gaming's Hardware Emulator / MY LIFE IN GAMING - March 31, 2022</p> <p>Otherwise there are some other videos listed below.</p>"},{"location":"basics/links/#mister-fpga-articles","title":"MiSTer FPGA Articles","text":"<ul> <li>Polygon - MiSTer 101: A classic gaming device to rule them all by Christopher Grant - August 8, 2021</li> <li>Kotaku - And Now, The Ultimate Retro Gaming Device by Mike Fahey - September 02, 2021</li> <li>Edge Magazine Australia - Hard Core: How MiSTer emulation is redefining the art of resurrecting gaming's past by Alex Wiltshire - April 22, 2021</li> <li>The Verge - The DIY Issue: Building The Ultimate Retro Computer by Sam Byford - March 11, 2021</li> <li>Nintendo Life - Hardware Review: MiSTer FPGA - A Tantalizing Glimpse Into The Future of Retro Gaming by Damien McFerran - February 11, 2021</li> <li>Dream Machine: MiSTer FPGA by F\u00e9lix L\u00e9ger (@felleg) - October 18, 2020</li> </ul>"},{"location":"basics/links/#tutorialsguides","title":"Tutorials/Guides","text":"<ul> <li>MiSTer Manual by adreeve</li> </ul>"},{"location":"basics/links/#mister-fpga-videos","title":"MiSTer FPGA Videos","text":"<ul> <li>Jan 2021 - Digital Foundry - DF Retro Hardware: MiSTer FPGA - A Brilliant Mini Emulation System Explored!</li> <li>Jan 2021 - Scarlet Sprites - MiSTer FPGA Review 2021: Arcade &amp; Console Accuracy!</li> <li>Dec 2020 - Retro Bits - MiSTer FPGA - how to build, demo, costs, and pro/cons</li> <li>Mar 2020 - Briar Rabbit - What is a MiSTer FPGA?</li> <li>Nov 2019 - SmokeMonster - MiSTer Cores without add-ons (no SDRAM)</li> <li>Jul 2019 - RetroManCave - Exploring MiSTer</li> <li>May 2019 - GameSack - MiSTer Review</li> <li>Oct 2018 - ETA Prime - FPGA Emulation MisTer Project on the Terasic DE10-Nano</li> <li>Oct 2018 - SmokeMonster - Introducing the MiSTer FPGA</li> </ul>"},{"location":"basics/links/#tutorials","title":"Tutorials","text":"<ul> <li>MiSTer FPGA 2023 Build Guide and Software Setup! (Video Game Esoterica)</li> <li>MiSTer FPGA Analog Video Guide and Setup Tutorial - VGA, PVM's and Component Video (Video Game Esoterica)</li> <li>MiSTer FPGA Hardware Guide and Setup Tutorial - Initial Setup and Quick Start Guide (Video Game Esoterica)</li> <li>MiSTer FPGA Controller Guide and Suggested Controllers for Cores (Video Game Esoterica)</li> <li>MiSTer MT-32 Pi MIDI Build and Tutorial - MIDI on MiSTer FPGA (Video Game Esoterica)</li> <li>MiSTer assembly and config (Ownlonymous)</li> <li>Creating a MiSTer SD card (NML32)</li> <li>Mounting a VHD from Windows over the network (NML32)</li> <li>MiSTer FPGA How To Setup Tutorial (MadLittlePixel)</li> <li>MiSTer FPGA Input Mapping (rsn8887)</li> <li>MiSTer FPGA Getting Started and Setting up with Mr. Fusion (Master Hacks)</li> <li>AO486 Core - Setting up DOS Games with pre-built Total DOS Launcher (FlynssBit)</li> </ul>"},{"location":"basics/links/#fpga-discussion","title":"FPGA Discussion","text":"<ul> <li>Oct 2019 - Lon.TV - Lon &amp; RetroRGB discuss FPGA</li> </ul>"},{"location":"basics/links/#other-demonstrations","title":"Other / Demonstrations","text":"<ul> <li>Jul 2020 - RetroManCave - My Ultimate FPGA Desktop</li> </ul>"},{"location":"basics/saves/","title":"Game Saves","text":"<p>Many MiSTer cores have the capability to let you save your game, whether it be with traditional simulation of the original save features from the hardware, or with savestates. Most cores don't have savestates but a steadily increasing number do. Here's some basic information regarding how saves work on the MiSTer.</p>"},{"location":"basics/saves/#normal-game-saves","title":"Normal game saves","text":"<p>MiSTer will only update your normal game saves when you open the On-Screen Display (OSD). You will need to save inside the game, then open the OSD, and select \"Save Backup RAM\". In most cores, after you select this, you will need to open the OSD again and you should see a \"Saving...\" pop up on the screen. If you don't see this, then your game save likely didn't get updated. When a save is happening with the OSD open the yellow light on your Digital IO or Analog IO add-on board will be lit and will turn off when the save is completed.</p> <p>Opening the OSD to save can be a bit of an adjustment at first, but it is necessary. It is intended behavior as MicroSD cards have a limited number of writes until they begin to fail. Also, since these cores are in FPGA, some cores may write to your MicroSD constantly multiple times a second if there wasn't a signal to tell the core to backup the save to a file.</p>"},{"location":"basics/saves/#autosave-option","title":"Autosave option","text":"<p>It's best to utilize the autosave option in any core. First open the OSD. Next, go to the Autosave option if it is available, and turn it on. Finally, go to the secondary OSD menu by pressing Right on your controller (or keyboard) and go to \"Save Settings\" to save the settings you changed in the OSD for that core. This will only save it for that one core, it won't save it for all the other cores, so keep that in mind. </p> <p>Almost every core does not autosave by default. Autosave being on would generate too many writes to the MicroSD card and could lead to earlier hardware failure, so this decision is deliberate.</p>"},{"location":"basics/saves/#save-file-conversion","title":"Save file conversion","text":"<p>The save file formats in most MiSTer cores are compatible with many popular emulators. However, some are different, so you may need to convert them. Thankfully Euan Forrester has made a save file converter that you can use to convert your saves into a MiSTer-compatible file.</p> <p>MiSTer Save File Converter</p> <p>Euan's tool also lets you convert many other save file formats from various emulators, and you can convert your MiSTer saves back into ones that are compatible with emulators.</p>"},{"location":"basics/saves/#backup-your-saves","title":"Backup your saves","text":"<p>Make sure to backup your saves off of the MicroSD regularly if you'd like to keep them safe. When MicroSD storage fails, it's usually swift and catastrophic. There are various tools to accomplish this with. One tool like this is FreeFileSync. With FreeFileSync you can setup a scheduled batch job to backup specific folders from your MiSTer regularly. Read the documentation on FreeFileSync's website for more information.</p>"},{"location":"basics/troubleshooting/","title":"Troubleshooting","text":""},{"location":"basics/troubleshooting/#the-mister-fpgas-correct-dip-switch-configuration-on-the-de10-nano","title":"The MiSTer FPGA's correct DIP switch configuration on the DE10-Nano","text":"<p>If your keyboard doesn't work or something else low-level hardware related doesn't work, it's possible that one or more of the DIP switches on your DE10-Nano are misconfigured. Make sure the DIPS are configured like the following pictures: </p> <p>Side Note: If you have a Digital IO board then your first of the large dips in the 2nd picture above needs to be turned On (up) and the rest should be turned off (down) in order to use the 2nd SDRAM module, if you have one. Here's a demonstration with a picture again: Credit for 2nd and 3rd pictures goes to Nat from MiSTerFPGA.co.uk</p> Board SW0 SW1 SW2 SW3 Analog IO Off Off Off Off Digital IO Off Off Off On"},{"location":"basics/troubleshooting/#my-gamepad-doesnt-work","title":"My gamepad doesn't work","text":"<p>If your gamepad doesn't work in the menu, you need to make sure you have defined your inputs for that gamepad. If your gamepad doesn't work in the core, but it does work in the menu, then you need to define the gamepad in that core in the secondary OSD menu. If neither of these work, make sure you your DIP switches are correct as shown above.</p>"},{"location":"basics/troubleshooting/#my-keyboard-doesnt-work-right","title":"My Keyboard doesn't work right","text":"<p>If you have a fancy gamer keyboard with lots of macros and RGB lights, it's possible that the stock power supply is not providing enough power. You may want to consider purchasing an upgraded power supply with more amps as a way to fix this, like the Mean Well GST18A05-P1J or take a look at this DigiKey search result to get a better idea of what is required. Generally speaking you need a 5v power supply with more than the stock 2amps, with a 2.1mm x 5.5mm x 11.0mm barrel plug that has positive center polarization. Mean Well and Triad are often recommended brands, but they are not the only option if you cannot find them at your desired retailer.</p>"},{"location":"basics/troubleshooting/#fixing-missing-certs","title":"Fixing missing certs","text":"<p>If you are unable to use wget, this might be because you are missing security certificate files. The default system comes with no security certificate files so you need to add --no-check-certificate on wget to download anything HTTPS:</p> <ol> <li>Open the linux terminal/command prompt with F9, use <code>root</code> as your username and <code>1</code> as your password.</li> <li>Type <code>cd /etc/ssl/certs</code> and press enter.</li> <li>Type <code>cp cacert.pem cacert.pem.bak</code> to make a backup of your existing cert.</li> <li>Type <code>wget --no-check-certificate https://curl.se/ca/cacert.pem -O cacert.pem</code> and press enter.</li> </ol> <p>Assuming it downloaded correctly, you can now use wget as nature intended.</p>"},{"location":"basics/troubleshooting/#wifi-shows-two-ip-addresses-and-no-internet-connection","title":"WiFi shows two ip addresses and no internet connection","text":"<p>If you have no Internet connection to the MiSTer (you can't update the MiSTer, for instance), and you run ip addr and your wlan0 device shows two IP addresses, that might be the root of your problem. Some WiFi adapters seem to show this behavior, even on regular linux computers, the actual root cause is not fixable. You will not have internet access in many cases if one of the two addresses is an \"APIPA\" address (e.g. 168.254.xxx.xxx). To temporarily clear this problem run the following command from the terminal:</p> <p><code>ip addr flush wlan0</code></p> <p>It may come back again when your local DHCP server's lease is up and new IP addresses are received. In most home networks your dhcp server is your Router/Modem combo unit.</p>"},{"location":"basics/troubleshooting/#fixing-a-corrupted-linux-image-on-the-mister","title":"Fixing a corrupted linux image on the MiSTer","text":"<p>Sometimes MicroSD cards may corrupt data over time, this is normal. Rarely this can result in the linux files on the MiSTer becoming corrupted. If you notice any low-level hardware related problems like the following (but not limited to):</p> <ul> <li>HDMI video output not working anymore</li> <li>USB controllers and even keyboards not working</li> <li>Internet no longer working anymore</li> <li>Sound not working over HDMI anymore</li> <li>WiFi not working anymore</li> </ul> <p>And many more potential hardware failures... Then it is best to try and redownload the linux files and overwrite them. The best way to do this is by following these instructions:</p> <ol> <li>Remove the MicroSD card from your MiSTer and insert it into your PC.</li> <li>Download the latest sd-installer release archive (usually in .7z format at the bottom of the list) from here --&gt; https://github.com/MiSTer-devel/SD-Installer-Win64_MiSTer and unzip it on your PC.</li> <li>Copy and overwrite the contents of the linux folder from the archive you just downloaded over the linux folder on your MiSTer MicroSD.</li> </ol> <p>This is essentially what a \"Linux Update\" does when you run the update script. This should get everything back to normal defaults. You may need to do the WiFi setup steps again if you are using WiFi.</p>"},{"location":"basics/video/","title":"Video Configuration","text":"<p>Here's a description of some basic video customization features on the MiSTer. You can change your resolution, modify the framebuffer to reduce input latency and video stuttering, add some video filters, use shadowmasks, and even gamma correction. Also, you can use 5x overscan mode to push a 1200p image into 1080p for square pixels and nearly the original overscan of a CRT, depending on the game's resolution. There are lots of options to play with, here's some basic ones.</p>"},{"location":"basics/video/#video-presets","title":"Video Presets","text":"<p>Video Presets were added so you can easily load a good-looking preset that will work in most situations. This is a great way to get started. They are easy to use, just open the OSD, press right, then go to video processing, and then \"Load Preset\". Select the one you want and see if it looks good to you. Here's an example video showing you how easy it is:</p> <p> </p>"},{"location":"basics/video/#mister-ini-video-settings","title":"MiSTer Ini Video Settings","text":"<p>In the MiSTer.ini file there are many video setttings to try. We'll just focus on a couple here for now and you can dive deeper into things like CRT usage in the Advanced - CRT section.</p> <p>First, you can edit the settings in the <code>MiSTer.ini</code> file with windows Notepad, Visual Studio Code, Notepad++. Pretty much any text editor will be fine. Alternatively you can run the <code>ini-settings.sh</code> script in the scripts folder, this has a simple interface to change options.</p>"},{"location":"basics/video/#video_mode","title":"video_mode","text":"<p>A bit of a ways down the .ini file there is a <code>video_mode</code> option. Above it the resolutions are commented:</p> <pre><code>; 0 - 1280x720@60\n; 1 - 1024x768@60\n; 2 - 720x480@60\n; 3 - 720x576@50\n; 4 - 1280x1024@60\n; 5 - 800x600@60\n; 6 - 640x480@60\n; 7 - 1280x720@50\n; 8 - 1920x1080@60\n; 9 - 1920x1080@50\n;10 - 1366x768@60\n;11 - 1024x600@60\n;12 - 1920x1440@60\n;13 - 2048x1536@60\n;14 - 2560x1440@60 (Pixel Repetition)\n</code></pre> <p>This tells you that <code>video_mode=0</code> will set you to 1280x720 resolution at 60hz. For most people they will probably want to use 1920x1080 resolutiono at 60hz, so my advice would be to change this to <code>video_mode=8</code>. You can also use the <code>ini-settings.sh</code> script, it will tell you what option selects which resolution, so just select the right one for your display.</p> <p>There is a detailed explanation of video modes available in Advanced - Video Modes thanks to Wickerwaka.</p>"},{"location":"basics/video/#vsync_adjust","title":"vsync_adjust","text":"<p>Another important option is <code>vsync_adjust</code>. Most modern displays work fine at 60hz, but some games run at 60.6 hz (like Donkey Kong for the arcades) which is a \"non-standard refresh rate\". Therefore, MiSTer has what is called a \"framebuffer\". The game is still running at 60.6hz but the frames are sent at 60hz. So occasionally there is a little \"stutter\" on the screen to make up for the frames going too fast and being adjusted. To use a framebuffer adds a minimal amount of lag. Here's a list of the options and what they do.</p> <p><pre><code>vsync_adjust=0\n</code></pre> This matches the refresh rate of your monitor (e.g. 60hz) and has about 1-2 frames of lag. Video output can be a little jittery as the core is still running at it's native rate, which isn't exactly 60hz. <pre><code>vsync_adjust=1\n</code></pre> This makes the video output at exactly the frame rate of the game (e.g. 60.6hz). It has 1 frame of lag, but it is less compatible with modern televisions. Video output is very smooth. <pre><code>vsync_adjust=2\n</code></pre> This makes the video output draw to the screen as fast as possible, and can result in sub-frame lag consistently (independent of your controller and display's built-in lag). However this is the least compatible mode and it may result in unplayable behavior on some televisions using certain cores. The video output is the very smooth. Additionally, because of the way this special mode works there is a mismatch in the refresh rate of the scaled output and the core's original video output.</p> <p>Generally speaking, the rule of thumb is that if you want the smoothest video output and lowest lag then start at <code>vsync_adjust=2</code> and if a core doesn't work that you want to play on reduce it to 1 or 0 to see if the compatibility is resolved. Your results may vary depending on the display you are connected to and what core you are using.</p>"},{"location":"basics/video/#variable-refresh-rate-vrr","title":"Variable Refresh Rate (VRR)","text":"<p>MiSTer FPGA now supports Variable Refresh Rate (VRR). The advantage of using Variable Refresh Rate is a reduction in sync loss on your display when the core is outputting non-standard refresh rates and you are using a low-lag <code>vsync_adjust</code> setting such as <code>1</code> or <code>2</code>.</p> <p>You will need a recent build of the Main MiSTer binary which supports VRR (a new release is currently pending, see the <code>#unstable-nightlies</code> channel in the MiSTer FPGA discord for early builds. You will also need either an updated version of the MiSTer.ini or if you prefer to use your old MiSTer.ini file you can add the following lines to your current ini:</p> <pre><code>; Variable Refresh Rate control\n; 0 - Do not enable VRR (send no VRR control frames)\n; 1 - Auto Detect VRR from display EDID. \n; 2 - Force Enable Freesync\n; 3 - Force Enable Vesa HDMI Forum VRR\nvrr_mode=0\n; Freesync min/max framerate parameter defaults to the min/max capability reported by the display\n; Freesync minimum framerate. \nvrr_min_framerate=0\n; Freesync maximum framerate\nvrr_max_framerate=0\n; VESA VRR base framerate. Normally set to the current video mode's output framerate\nvrr_vesa_framerate=0\n</code></pre> <p>By default VRR is turned off for broad compatibility purposes in order to keep the MiSTer easy to use. Set <code>vrr_mode=</code> to <code>1</code> if you wish to auto-detect what your display supports. This has shown varying results, some displays can't achieve sync with this setting. If your display doesn't sync with <code>vrr_mode=</code> set to <code>1</code> (auto) then you can force enable it to either Freesync or VESA HDMI Forum VRR with <code>2</code> (Freesync) or <code>3</code> (VESA VRR) respectively. On some monitors/tv's Freesync is called \"AMD Freesync\" but it is open source and not exclusive to AMD products. Likewise on some monitors/tv's VESA VRR is called \"GSync\" even though it is not necessarily exactly the same as the proprietary standard from NVIDIA.</p> <p>With VRR your results may vary, make sure you can edit your MiSTer.ini easily before you change this setting as it may render display output useless until you revert the settings. You also may notice that the MiSTer's reported refresh rates and your TV's reported refresh rate isn't matching one another. This is expected, the way these refresh rates are calculated on TV's is proprietary so we have no way of knowing how accurate it is without using expensive testers. </p> <p>It has been reported that VRR enabled might get measurably smoother video output (Ace noticed that the repeated and skipped frames he saw on his display went away with it enabled). There is no guarantee that the same behavior will occur on your display. It was also observed by multiple testers that it did improve sync stability with some non-standard refresh rates when enabled. Your results may vary.</p>"},{"location":"basics/video/#core-exceptions","title":"Core exceptions","text":"<p>There are also ways to add exceptions. My monitor doesn't play nice with the low lag setting on the Genesis core. So in my MiSter.ini, I added the following override/exception to the end of the file for just the MiSTer core:</p> <pre><code>[Genesis]\nvsync_adjust=0\n</code></pre> <p>This makes it so no matter what my <code>vsync_adjust</code> setting is in the upper section, when I use the Genesis core, it will force it to use <code>vsync_adjust=0</code> (the most compatible mode) every time. You can also add a wildcard to these exceptions so one exception could be applied to multiple cores:</p> <pre><code>[dkong*]\nvsync_adjust=1\n</code></pre> <p>This will make it so every core that starts with <code>dkong</code> will have the same rule applied to it. You can also make an exception for every single arcade core like so:</p> <pre><code>[arcade]\nvsync_adjust=1\n</code></pre> <p>For a list of the internal core names to use in your exceptions see Developer Reference - Core Names for a complete list.</p> <p>NOTE - Arcade cores's internal core names are NOT used for the .ini core exceptions, the <code>&lt;setname&gt;</code> value in the MRA file is what is used. e.g. for Arkanoid (Japan).mra:</p> <p><pre><code>&lt;setname&gt;arkanoidj&lt;/setname&gt;\n</code></pre> means <code>[arkanoidj]</code> is the ini core exception you would use for this one game. For a lest of the setnames please refer to Developer Reference - MRA Setnames for a complete list.</p>"},{"location":"basics/video/#video-processing-options-tutorial","title":"Video Processing Options Tutorial","text":"<p>Here's a tutorial that you can follow along to get you started using the powerful video processing options on MiSTer FPGA.</p>"},{"location":"basics/video/#filters-and-scanlines","title":"Filters (and scanlines)","text":"<p>MiSTer has the capability to use upscaling filters and scanlines to help enhance the video output or even make it feel similar to a retro CRT television. If you opened the NES core for the first time after setting the MiSter's video output to 1920x1080p and loaded up Duck Tales, then you should see something like this:</p> <p></p> <p>This can be tweaked a little to make it look a lot nicer to our eyes. First let's go into \"Video Processing\" in the secondary OSD/Menu (press F12 or the menu button you assigned earlier, and then right to see the secondary menu):</p> <p></p> <p>When you select this it will show you a screen with a bunch of options. Don't get overwhelmed, it's fairly simple when you follow this guide, and you will understand how they work. I'll give you some recommended settings for most of the cores at the end of this tutorial which should be your go-to for now while you get used to things.</p> <p>By default \"Video Filter:\" is set to \"NearNeighbour\". This is a nearest neighbour filter. Basically, to turn 240p video into 1080p video requires these pixels to be made larger. Since 240 doesn't divide evenly into 1080 (1080 / 240 = 4.5), then some of these pixels won't be perfectly square. Nearest neighbour helps fool your eyes into making them seem more square than they actually are. It's filtering the video before it reaches your eyes to make it look better! </p> <p>Select Video filter to change it so you can select a filters file. You will notice the text changes from <code>Video Filter:</code> to <code>Horz filter:</code>. Don't worry about this too much, for any normal rotation games, Horz is for your upscaling filters that soften or sharpen the image.</p> <p>Select the <code>&lt;none&gt;</code> below to browse. It should show you quite a few options. For now select <code>Interpolation (Medium).txt</code>. This is a filter which gives you some softer edges while still maintaining an illusion of square pixels.</p> <p></p> <p>There we go, those pixels are a bit smoother now:</p> <p></p> <p>Another added benefit to interpolation is the scrolling looks smoother to the eye when compared to sharper filters like the default Nearest Neighbour setting.</p> <p>Now let's say you want some scanlines, sorta like what CRT's had and some emulators have an option for. Well to do that, we just need to setup the <code>Vert Filter:</code> option like we did the horz filter. You see, we will be filtering horizontal lines from top to bottom (vertically) on the video output. Inside <code>Vert Filter</code>'s <code>From File</code> option, select <code>Scanlines - Brighter.txt</code>. You should see something like this as your options:</p> <p></p>"},{"location":"basics/video/#5x-vertical-crop-1080p-only","title":"5x Vertical Crop (1080p only)","text":"<p>Note: this feature only works if your output resolution in your MiSTer.ini is set to a 1080p option!! </p> <p>If you have been following along on your MiSTer, you might notice that the scanlines look darker occasionally. This is because 240p (this game's resolution) doesn't divide equally into 1080p (your resolution on your MiSTer). But 240 does divide into 1200 equally, 5 times 240 equals 1200. So to fix these scanlines looking uneven, we can stretch the image vertically to make all the pixels perfectly square. Go back into the regular core menu and select <code>Video &amp; Audio</code>. There is an option called <code>Vertical Crop</code>. Not all cores have this, but the NES core does happen to, so it's a good example. Go ahead and select the <code>Vertical Crop</code> option to change <code>Disabled</code> to <code>(216p)5X</code>. </p> <p></p> <p>You will see just a few lines off the top and bottom get cut off. This is okay, original CRT's cut off about the same amount from the top and bottom anyways. Most games don't have information missing at the edge of the top and bottom.</p> <p>Now your <code>vert filter: scanlines - brighter.txt</code> option should have evenly spaced scanlines vertically, and the image will look a lot better.</p>"},{"location":"basics/video/#shadowmasks","title":"Shadowmasks","text":"<p>MiSTer FPGA also has another layer options available to use called <code>Shadowmasks</code>. Shadow Masks are able to modify the red, green, blue color channels to create advanced effects, such as simulating the appearance of the grille or mask on an old CRT screen or the pixel layouts of old LCD handheld consoles. There are lots of options, but we are just going to use personally one of the most versatile color shadowmasks for this tutorial, <code>Squished VGA Bright v2.txt</code>. This shadowmask attempts to resemble consumer computer monitors and some tv's which had red, green, and blue phosphors in a particular pattern. Here is a picture of the options after I've added this Shadowmask to the same game's video processing menu:</p> <p></p>"},{"location":"basics/video/#gamma-curves","title":"Gamma Curves","text":"<p>Gamma is a bit of a tricky thing to explain. Basically, gamma on an old CRT is the relationship between voltage and brightness. Think of a graph, the x-axis is voltage and the y-axis is the \"brightness\" (more accurately called luminance). Modern televisions are (ideally) a totally straight line. Old CRT's have a curve. At medium voltage and brightness it is a lot less brightness than you'd expect. Sorta like this:</p> <p> Image Source</p> <p>Now given that the MiSTer is outputting the linear example, the Gamma filters can restore a similar Gamma curve as you may have been used to with your old television. This is especially helpful because we have just applied a \"brighter\" scanline and a shadowmask (which added a mask of colors across the screen imitating a CRT's phosphors). If you've been following along with this tutorial so far, we're gonna play with Gamma just to see how it looks to your eyes. This is all personal preference. If it looks good to you, great. If someone else doesn't like it, well... tough! :)</p> <p>I will apply a very mild \"Gamma Curve\" called <code>gamma_113.txt</code> which is located in the <code>Pure_Gamma</code> folder when you select the gamma options. This gamma curve is allegedly supposed to get you close to a typical consumer CRT's gamma curve.</p> <p></p>"},{"location":"basics/video/#video-demonstrations","title":"Video demonstrations","text":"<p>Some video demonstrations:</p>"},{"location":"basics/video/#5x-mode-video","title":"5x mode video","text":""},{"location":"basics/video/#gamma-controls-video","title":"gamma controls video","text":""},{"location":"basics/wifi/","title":"WiFi","text":"<p>Wifi is totally optional and it's setup is fairly simple with the MiSTer. You will need a compatible dongle, the wifi script (which is provided with the Mr. Fusion image), and a keyboard attached to your MiSTer to type in your WiFi password.</p>"},{"location":"basics/wifi/#suggested-wifi-adapters","title":"Suggested WiFi Adapters","text":"<p>You will require a compatible USB WiFi Adapter to use this feature as there is no integrated WiFi on the DE10-Nano or the MiSTer Add-on boards. Not all models of wifi adapters are compatible, so try to stick with decent name brands. Many users have found that most small ASUS, TP-Link, CanaKit, and Edimax wifi USB adapters work out of the box. Here's a few that have been reported to work:</p> <ul> <li>ASUS USB AC53 nano rev A1</li> <li>TP-Link AC1300 Archer T3U or Nano AC600 Archer T2U</li> <li>CanaKit Raspberry Pi WiFi dongle</li> <li>Edimax EW-7612UAn v2 or EW-7811UN or EW-7822ULC</li> <li>Netgear A6100 or A6150</li> <li>D-link AC1300 MU-MIMO Wi-Fi Nano USB Adapter DWA-181</li> </ul> <p>Your results may vary as there may be new hardware revisions of these adapters which are not currently supported. There are ways to compile your own drivers for your device but that is for advanced users.</p>"},{"location":"basics/wifi/#setup-wifi-with-a-script","title":"Setup wifi with a script","text":"<p>It's easy to connect to WiFi using the wifi.sh script provided with the Mr. Fusion image:</p> <ol> <li>Navigate to the scripts menu using the on screen display (OSD). </li> <li>Select the \"wifi\" script and run it.</li> <li>Select your WiFi network's SSID (the name of your WiFi). </li> <li>Type your WiFi password in and press enter.</li> <li>It should connect and ask you to press any key to continue. </li> </ol> <p>At the top of the main menu you will see a little wifi icon which indicates you have connected. This setting should be saved and it will automatically connect so long as the adapter is plugged in and your MiSTer is within range of your WiFi network.</p>"},{"location":"basics/wifi/#the-manual-way-to-setup-wifi","title":"The manual way to setup wifi","text":"<p>In case the script isn't working for you, you can try to manually setup Wifi. This is a slightly more advanced user method so feel free to ask for help from the community before attempting this method. To manually setup WiFi without the script:</p> <ol> <li>Edit the file <code>/media/fat/linux/_wpa_supplicant.conf</code> with a text editor that supports Unix/Linux line endings.</li> <li>Replace <code>put_your_SSID_here</code> with your Wifi Network's SSID, and replace <code>put_your_password_here</code> with your WiFi password. </li> <li>Change the country code to the one that matches your country. </li> <li>Rename <code>_wpa_supplicant.conf</code> to <code>wpa_supplicant.conf</code></li> <li>Reboot the MiSTer.</li> </ol> <p>After the MiSTer reboots you should see the wifi icon at the top of the Main Menu's OSD. This may take quite awhile so be patient, the MiSTer is not very fast at connecting to your WiFi network, it's a simple device with simple capabilities.</p>"},{"location":"cores/arcade/","title":"Arcade Cores","text":"<p>Here is a list of the arcade cores that are on the MiSTer FPGA. Supported games list only includes the general game name, not all revisions/versions. There are also Alternative MRA files that use these cores with all sorts of variations on the same games supported that you can find. The update script will automatically download all the MRA files necessary to play these.</p> Core Name Supported Games SDRAM Arkanoid Arkanoid Asteroids Asteroids AsteroidsDeluxe Asteroids Deluxe Astrocade Extra BasesGorfSea Wolf IISpace ZapThe Adventures of Robby Roto!Wizard of Wor \u2714\ufe0f ATetris Tetris (Atari) Athena AthenaCountry ClubFighting Golf Bagman BagmanBotanicPickin'SquashSuper Bagman BankPanic Bank PanicCombat Hawk BattleZone Battle ZoneBradley TrainerRed Baron Berzerk Berzerk BlackWidow Black WidowGravitarLunar Battle(prototype) Blockade BlastoBlockadeCoMotionHustle BombJack Bomb Jack Bosconian Bosconian - Star Destroyer Breakout Breakout (TTL) BurgerTime Burger Time BurningRubber Burnin' Rubber CanyonBomber Canyon Bomber Cave Dangun FeveronDoDonPachiDonPachiESP Ra.De.Fever SOSGaia CrusadersGuwangePuzzle Uo PokoThunder Heroes \u2714\ufe0f Centipede Centipede Chameleon Chameleon ComputerSpace Computer Space CongoBongo Congo Bongo/Tip Top Cosmic Cosmic AlienDevil ZoneMagical SpotNo Mans LandSpace Panic \u2714\ufe0f CosmicGuerilla Cosmic Guerilla \u2714\ufe0f CrazyBalloon Crazy Balloon CrazyClimber Crazy Climber CrazyKong Crazy Kong CrystalCastles Crystal Castles Defender Colony 7DefenderJinMayday DigDug Dig Dug Dominos Dominos DonkeyKong Donkey KongPest PlaceRadar Scope DonkeyKong3 Donkey Kong 3 DonkeyKongJunior Donkey Kong Junior DottoriKun Dottori-KunDottori-Man Jr Druaga Dig Dug IIGrobdaMappyMotosPac &amp; PalPac-Man &amp; Chomp ChompSuper Pac-ManThe Tower of Druaga Exerion Exerion ExpressRaider Express RaiderWestern Express Finalizer Finalizer - Super Transformation FoodFight Food Fight Freeze FreezeJack the GiantkillerSuper CasinoTri-PoolZzyzzyxx Frenzy Frenzy Galaga Galaga Galaxian Azurian AttackBlack HoleCatacombClean SweepDevil FishGalaxianKing and BalloonLucky TodayMoon CrestaMr. Do NightmareOmegaOrbitronPiscesUniWar SVictoryWar of the Bugs Galivan Cosmo Police GalivanUfo Robo Dangar Gaplus Galaga 3Gaplus Gauntlet GauntletGauntlet IIVindicators Part II \u2714\ufe0f Gyruss Gyruss IkariWarriors Ikari WarriorsVictory Road \u2714\ufe0f Inferno Inferno (Williams) IremM62 HorizonKid Niki - Radical NinjaKung-Fu MasterLode RunnerLode Runner II - The Bungeling Strikes BackLode Runner III - The Golden LabyrinthLode Runner IV - Teikoku Kurano DasshutsuSpelunker II - 23 no KagiSpelunkerThe Battle-RoadYoujyuden \u2714\ufe0f IremM72 Air duelDaiku no Gensan(M72 and M84)Dragon BreedGallop - Armed Police UnitHammerin' HarryImage FightLegend of Hero TonmaMr. HELI no DaiboukenNinja SpiritR-TypeR-Type IIX Multiply \u2714\ufe0f IronHorse Iron Horse Jackal JackalTokushu Butai JackalTop Gunner \u2714\ufe0f Jailbreak JailbreakManhattan 24 Bunsyo Joust2 Joust 2 - Survival of the Fittest Ladybug Cosmic AvengerDorodonLady BugSnap Jack LunarLander Lunar Lander MarioBros Mario Bros. MCR1 Kick-ManKickSolar Fox \u2714\ufe0f MCR2 Domino ManKozmik Krooz'rSatan's HollowTronTwo TigersWacko \u2714\ufe0f MCR3Mono Demolition DerbyMax RPMPower DriveRampageSargeStar Guards \u2714\ufe0f MCR3Scroll Crater RaiderSpy HunterTurbo Tag (Prototype) \u2714\ufe0f MCR3 Discs of TronJourneyTapperTimber \u2714\ufe0f MissileCommand Missile Command MoonPatrol Moon Patrol \u2714\ufe0f MrDo Mr. Do! MrJong BlockBusterCrazy BlocksMr. Jong MysticMarathon Mystic Marathon NinjaKun NinjakunNova 2001Raiders5 Pacman Ali Baba and 40 ThievesBeastie FeastieBirdiyCrush RollerDream ShopperEeek!EggorEyesGorkansJump ShotLizard WizardMr. TNTMs. Pac-ManNumber CrashPac-ManPac-Man ClubPac-Man PlusPac-Manic MinerPonpokoPuck ManSuper GlobThe GlobVan-Van CarWoodpecker Pengo Pengo PenguinKunWars Penguin-Kun Wars Performan Performan Phoenix PhoenixPleiads Pleiads Pleiads PolyPlay Poly PlayPoly Play 2 Pong Pong Pooyan Pooyan Popeye PopeyeSky Skipper QBert Mad PlanetsQ*Bert Raizing Armed Police BatriderBattle BakraidBattle GareggaKingdom GrandprixSorcer Striker \u2714\ufe0f Rallyx New Rally-XRally-X RiverPatrol River Patrol Robotron Alien ArenaBubblesJoustPlayball (Prototype)Robotron 2084SinistarSplat!Stargate RushnAttack Green BeretMr. GoemonRush'n Attack ScooterShooter Scooter Shooter Scramble AmidarAnteaterArmored CarBattle of AtlantisCalipsoDark PlanetFrogger (Konami)Frogger (Sega)Lost TombMarsMighty MonkeyMinefieldMoon WarRescueScrambleSpeed CoinStrategy XSuper CobraTazz-maniaThe EndTurtles \u2714\ufe0f SEGASYS1 4D WarriorsBlock GalBull FightFlickyI'm SorryMister VikingMy HeroPitfall IIRafflesiaRegulusSega NinjaSpatterStar JackerSwatTeddyBoy BluesUp'n DownWater MatchWonder Boy SMS (Sega System E) Astro FlashFantasy Zone II - The Tears of Opa-OpaHang On JrMegumi RescueOpa OpaRiddle of PythagorasSlap ShooterTetrisTransformer \u2714\ufe0f SilverLand Silver Land SlapFight Alcon BootlegSlapFight BootlegTiger Heli Bootleg SNK_TripleZ80 ASO SolomonsKey Solomon's Key / Solomon no Kagi SpaceInvaders 280Z-ZZAPAmazing MazeAttack ForceBalloon BomberBlue SharkBoot HillClownsCosmoGalaxy WarsGun FightLaguna RacerLunar RescueLupin IIISea WolfShuffleboardSpace ChaserSpace EncountersSpace InvadersSpace Invaders Part IIVortex \u2714\ufe0f SpaceRace Space Race (TTL) Sprint1 Sprint 1 Sprint2 Sprint 2 Subs Subs \u2714\ufe0f SuperBreakout Super Breakout TankBattalion Tank Battallion Tecmo Gemini WingRygarSilkworm \u2714\ufe0f TIAMC1 BilliardGorodkiKonek GorbunokKot-RybolovS.O.S.Snezhnaja Koroleva TimePilot Time Pilot TimePilot84 Time Pilot '84 TNKIII TNKIII TraverseUSA Shot RiderTraverse USA - Zippy Race TropicalAngel Tropical Angel \u2714\ufe0f TurkeyShoot Turkey Shoot - The Day They Took Over Ultratank Ultra Tank VBall V'Ball \u2714\ufe0f XSleena Xaind Sleena \u2714\ufe0f Xevious Super XeviousXevious Zaxxon Future SpySuper ZaxxonZaxxon \u2714\ufe0f ZigZag Zig Zag <p>Also check the following list of JOTEGO arcade cores:</p> <p>JOTEGO Arcade Cores list</p>"},{"location":"cores/computer/","title":"Computer Cores","text":"<p>Here is a list of the computer cores that are in the MiSTer Github Repository.</p> Core Name System /games/ Folder SDRAM AcornAtom Acorn Atom ./AcornAtom AcornElectron Acorn Electron ./AcornElectron \u2714\ufe0f AliceMC10 Matra &amp; Hachette Ordinateur Alice (TRS-80 MC-10 Clone) ./AliceMC10 Altair8800 MITS Altair 8800 ./Altair8800 AmstradPCW Amstrad PCW ./AmstradPCW \u2714\ufe0f Amstrad Amstrad CPC 6128 ./Amstrad \u2714\ufe0f ao486 486DX33 (No FPU) compatible ./AO486 Apogee Apogee BK-01 / Radio-86RK ./APOGEE Apple-II Apple IIe ./Apple-II Apple-I Apple I ./Apple-I Aquarius Mattel Aquarius ./AQUARIUS Archie Acorn Archimedes ./ARCHIE \u2714\ufe0f Atari800 Atari 800 / 800XL / 65XE / 130XE ./Atari800 Optional AtariST Atari ST / STe ./AtariST \u2714\ufe0f BBCMicro BBC Micro B / Master 128K ./BBCMicro BK0011M Elektronika BK (BK-0011M CPU) ./BK0011M \u2714\ufe0f C16 Commodore C16 / Plus/4 ./C16 C64 Commodore 64 / Games System / 128 ./C64 \u2714\ufe0f C128 Commodore 128 ./C128 \u2714\ufe0f Casio_PV-2000 Casio PV-2000 ./Casio_PV-2000 Chip8 CHIP-8 by Joseph Weisbecker ./Chip8 CoCo2 Tandy Color Computer 2 / Dragon 32 ./CoCo2 \u2714\ufe0f CoCo3 Tandy Color Computer 3 ./CoCo3 \u2714\ufe0f ColecoAdam Coleco Adam ./Adam \u2714\ufe0f EDSAC EDSAC ./EDSAC EG2000 EACA EG2000 Colour Genie ./eg2000 Galaksija Galaksija by Voja Antoni\u0107 ./Galaksija Homelab Compukit Homelab ./Homelab \u2714\ufe0f Interact Interact Home Computer ./Interact Jupiter Jupiter Ace ./Jupiter Laser310 Vtech Laser 310 ./Laser Lynx48 Camputers Lynx 48k, 96k ./Lynx48 MacPlus Macintosh Plus ./MacPlus \u2714\ufe0f Minimig-AGA Commodore Amiga 500 / 600 / 1200 / 4000 / CD32 ./Amiga \u2714\ufe0f MSX1 Microsoft MSX1 ./MSX1 MSX Microsoft MSX / MSX2 / Plus / MSX3 / TurboR ./MSX \u2714\ufe0f MultiComp Grant Searle's MultiComp ./MultiComp OndraSPO186 Tesla Ondra SPO-186 ./Ondra_SPO186 Orao PEL Vara\u017edin Orao / Eagle ./ORAO Oric Tangerine Oric / Oric-1 ./Oric PCXT IBM PC/XT ./PCXT \u2714\ufe0f PC88 NEC PC8801 MKII SR ./PC8801 \u2714\ufe0f PDP1 DEC PDP-1 ./PDP1 PET2001 Commodore PET 2001 ./PET2001 PMD85 Tesla PMD 85 ./PMD85 QL Sinclair QL ./QL \u2714\ufe0f RX-78 Bandai RX-78 ./RX78 SAM-Coupe Miles Gordon Technology SAM Coup\u00e9 ./SAMCOUPE \u2714\ufe0f SharpMZ Sharp MZ ./SharpMZ SordM5 Sord M5 ./Sord M5 Specialist Specialist / \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442 ./SPMX SVI328 Spectravideo SV-328 ./SVI328 \u2714\ufe0f TatungEinstein Tatung Einstein TC01 &amp; 256 ./TatungEinstein TI-99_4A Texas Instruments TI-99/4A ./TI-99_4A \u2714\ufe0f TomyTutor Tomy Tutor, Pyuta, and Pyuta Jr. ./TomyTutor TRS-80 Radio Shack / Tandy TRS-80 Micro Computer System / Model I ./TRS-80 TSConf TSConf (ZX-Evolution Improvement) ./TSConf \u2714\ufe0f UK101 Compukit UK101 ./UK101 Vector-06C Vector-06C / \u0412\u0435\u043a\u0442\u043e\u0440-06\u0426 ./VECTOR06 VIC20 Commodore VIC-20 ./VIC20 X68000 Sharp X68000 ./X68000 \u2714\ufe0f ZX-Spectrum Sinclair ZX Spectrum ./Spectrum \u2714\ufe0f ZX81 Sinclair ZX80 / ZX81 ./ZX81 ZXNext ZX Spectrum Next ./ZXNext"},{"location":"cores/console/","title":"Console Cores","text":"<p>Here is a list of the console cores that are in the MiSTer Github Repository. <code>boot.rom</code> is synonymous with <code>boot0.rom</code>.</p> Core Name Systems /games/ Folder BIOS SDRAM S32X Sega 32X ./S32X \u2714\ufe0f AY-3-8500 \"Pong-on-a-chip\" ./AY-3-8500 AVision Entex Adventure Vision ./AVision Arcadia Emerson Arcadia 2001 ./Arcadia Astrocade Bally Astrocade ./Astrocade boot0.rom Atari5200 Atari 5200 SuperSystem ./Atari5200 Atari7800 Atari 7800 ProSystemAtari 2600 ./Atari7800 boot0.rom (optional) \u2714\ufe0f AtariLynx Atari Lynx ./AtariLynx boot0.rom = bootrom (lynxboot.img) \u2714\ufe0f BBCBridgeCompanion BBC Bridge Companion ./BBCBridgeCompanion Casio_PV-1000 Casio PV-1000 ./Casio_PV-1000 ChannelF Fairchild Channel F ./ChannelF ColecoVision ColecoVisionSega SG-1000 ./Coleco./SG1000 \u2714\ufe0f CreatiVision VTech CreatiVision / Dick Smith Wizzard ./CreatiVision boot0.rom (bios)boot1.rom (autoload a game) Gamate Bit Corp Gamate ./Gamate boot0.rom \u2714\ufe0f GBA Nintendo Game Boy Advance ./GBA boot0.rom (recommended) Optional GBA2P 2x Game Boy Advance (2-Player) ./GBA2P boot0.rom (recommended) \u2714\ufe0f GameBoy Nintendo Game Boy ./Gameboy boot1.rom = Gameboy Color BIOSboot2.rom = autoload a game \u2714\ufe0f Gameboy2P 2x Game Boy (2-Player) ./Gameboy2P boot1.rom = Gameboy Color BIOSboot2.rom = autoload a game \u2714\ufe0f GameNWatch Nintendo Game &amp; Watch Handheld Devices ./GameNWatch \u2714\ufe0f MegaDrive\u00b9 Sega Mega DriveSega Genesis ./MegaDrive \u2714\ufe0f Intv Mattel Intellivision ./Intellivision boot0.rom = exec.binboot1.rom = grom.binboot2.rom = sp0256-012.binboot3.rom = ecs.bin MyVision Nichibutsu My Vision ./MyVision MegaCD Sega CDSega Mega-CD ./MegaCD boot0.romcd_bios.rom = separate folder BIOS \u2714\ufe0f NES Nintendo Entertainment SystemFamicom Disk SystemNSF Music Player ./NES boot0.rom = FDS BIOSboot1.rom = NES Cart (optional)boot2.rom = blank FDS image (optional)boot3.rom = .PAL Palette File (optional) \u2714\ufe0f NeoGeo SNK Neo Geo AES &amp; MVS ./NeoGeo 000-lo.losfix.sfixsp-s2.sp1 (MVS)neo-epo.sp1 (AES)uni-bios.rom \u2714\ufe0f Odyssey2 Magnavox Odyssey 2Philips Odyssey 2Philips Videopac G7000 ./Odyssey2 Pokemon Mini Pok\u00e9mon Mini ./PokemonMini boot.rom \u2714\ufe0f PSX Sony Playstation ./PSX boot0.rom = Japanese BIOSboot1.rom = English BIOSboot2.rom = Europe BIOS \u2714\ufe0f SGB Nintendo Super Game Boy and Super Game Boy 2 ./SGB *.sfc (SGB bios, selectable in core) \u2714\ufe0f SMS Sega Master SystemSega Game GearSega SG-1000 ./SMS./SG1000 \u2714\ufe0f SNES Super Nintendo Entertainment SystemNintendo SatellaviewSPC Music Player ./SNES bsx_bios.rom = Satellaview ROM \u2714\ufe0f Super_Vision_8000 Bandai Super Vision 8000 ./Supervision8000 SuperVision Watara SuperVision ./SuperVision \u2714\ufe0f TurboGrafx16 NEC TurboGrafx-16 / PC EngineCD-ROM\u00b2 / Super CD-ROM\u00b2Duo / TurboDuoSuperGrafxArcade Card ./TGFX16./TGFX16-CD cd_bios.rom = BIOS Place in tgfx16-cd Optional VC4000 Interton VC4000Acetronic MPU-1000Occitane OC2000 ./VC4000 Vectrex Vectrex ./Vectrex WonderSwan Bandai WonderSwanWonderSwan ColorSwanCrystal ./WonderSwan boot0.rom = WonderSwanboot1.rom = WonderSwan Color \u2714\ufe0f <p>\u00b9 The older Genesis core is publicly archived and no longer actively maintained since the release of the MegaDrive core.</p>"},{"location":"cores/other/","title":"Other Cores","text":"<p>Here is a list of the console cores that are in the MiSTer Github Repository. <code>boot.rom</code> is synonymous with <code>boot0.rom</code>.</p> Core Name Systems /games/ Folder BIOS Arduboy Arduboy ./Arduboy boot.rom Chess Chess Chip8 SuperChip / Chip-8 ./Chip8 EpochGalaxyII Epoch Galaxy II ./EpochGalaxyII boot.rom FlappyBird Flappy Bird in Verilog GameOfLife Conway's Game of Life SlugCross bhayame's Slug Cross TomyScramble TomyTronic Scramble ./TomyScramble"},{"location":"cores/paths/","title":"Core Paths","text":"<p>The standard paths are of the form <code>/media/fat/games/&lt;CORE&gt;</code>, where <code>&lt;CORE&gt;</code> is the internal core name of the given system. </p> <p>Please check the respective README file for each core to determine the appropriate full path.</p>"},{"location":"cores/paths/#standard-usb-core-paths","title":"Standard USB Core Paths","text":"<p>They are of the form <code>/media/usb&lt;0..5&gt;/games/&lt;CORE&gt;</code>. Where <code>&lt;0..5&gt;</code> indicates the number of USB drives mounted by the operating system.</p>"},{"location":"cores/paths/#standard-cifs-core-paths","title":"Standard CIFS Core Paths","text":"<p>They are of the form <code>/media/fat/cifs/games/&lt;CORE&gt;</code>.</p>"},{"location":"cores/paths/#other-paths","title":"Other Paths","text":"<p>There are other valid paths, that are available for backwards-compatibility reasons, and also to ease testing. You should use the standard paths instead whenever possible.</p>"},{"location":"cores/paths/#path-priority","title":"Path Priority","text":"<p>There is a priority order of core paths. When you plug in a USB drive and it has a folder <code>/games/PSX</code> on it (mounted locally as <code>/media/usb&lt;0..5&gt;/games/PSX</code> when plugged in), then the MiSTer PSX core will look to that folder on the USB drive instead of the local one on the MicroSD at <code>/media/fat/games/PSX</code>. Here is the priority list from Main_MiSTer's file_io.cpp in order of highest priority to lowest:</p> <ol> <li><code>/media/fat</code></li> <li><code>/media/usb&lt;0..5&gt;</code></li> <li><code>/media/usb&lt;0..5&gt;/games</code></li> <li><code>/media/fat/cifs</code></li> <li><code>/media/fat/cifs/games</code></li> <li><code>/media/fat/games</code></li> </ol> <p>If the core's folder isn't found in any of these it should create the folder.</p>"},{"location":"cores/what/","title":"What Is a Core","text":"<p>In MiSTer terminology, a \"core\" is the current system that the FPGA is configured to simulate. It is configured as the \"Menu\" core when you power on the MiSTer for the first time. Then, if you use the OSD and go to <code>_Console</code> and then select <code>NES</code>, it will configure the FPGA to be the \"NES\" core.</p> <p>The term \"core\" has been used by Hardware Description Language (HDL) developers in a way which refers to the things that are programmed onto the FPGA. So for instance, the MiSTer FPGA framework uses Intel's \"Altera PLL Core\". This is a chunk of logic that is portable which allows developers to configure the clock speeds on the chip. There are HDMI cores, ethernet cores, serial data cores, and so on...</p> <p>However, for MiSTer, a core refers to the system being emulated. So you have the PSX (Playstation) core, the Minimig (Amiga) core, the SNES core, and so many more to explore.</p>"},{"location":"cores/what/#what-happens-when-i-load-a-core","title":"What happens when I load a core?","text":"<p>Imagine every time you load a core you are connecting a different console, computer, or arcade system to your television. You select the Genesis core in the menu and load it, you have now essentially plugged a Genesis into your television without all the hassle of wrestling with cables. That's the concept. What actually is happening is that <code>.rbf</code> file is reprogramming the FPGA chip to take on a different form. It used to contain the digital logic required to be an NES combined with the MiSTer FPGA core components, and it turned into a chip with the digital logic for the Genesis combined with the the MiSTer FPGA core components.</p> <p>Now, you may be worried that all of this rewriting of the FPGA could reduce it's lifespan. This isn't something to worry about, these kinds of FPGA's (SRAM-based) are considered to have an indefinite number of writes. Many millions of rewrites to the same sector are normal and nothing to worry about.</p>"},{"location":"cores/what/#core-updates-and-issues","title":"Core updates and issues","text":"<p>Cores on MiSTer are the result of the collaboration between many people over many years and across multiple prior open-source projects. Most console and computer cores have now been compared to original hardware to a high level of precision (e.g. audio capture comparison), with the few issues remaining documented on their respective github repository pages. Please refer to these pages, per core, before submitting any issues.</p> <p>For a list of core repositories, head on over to the MiSTer FPGA GitHub Organization Repositories list for more information. The core links there will bring you to the release folder on github, which will also allow you to find the Issues page and the readme files, ideally listing all available features and limitations in detail per core.</p> <p>There are other unofficial MiSTer FPGA cores out there, but these are not listed here as they may or may not work correctly and that list is always changing.</p>"},{"location":"cores/features/cheats/","title":"Cheats","text":"<p>Some of MiSTer's cores have the capability to apply cheats in-game. The cheats are in a specific format and are automatically pulled from gamehacking.org's website when you run the downloader script. These cheat files have specific rules that govern how they can be used.</p>"},{"location":"cores/features/cheats/#setup","title":"Setup","text":"<p>Cheats should be stored in:  <code>cheats/system/rom_filename.zip</code> where system is name of the core like NES, SNES, Genesis, etc...</p> <p>So, for example: </p> <p><code>cheats/NES/Taboo (USA).zip</code> for the NES ROM <code>Taboo (USA).nes</code></p> <p>The filename of the zip must match the ROM name exactly. Cheats will be loaded automatically when you load a ROM, and can be enabled and disabled from the menu in supported cores.</p> <p>If the .zip cheat file does not match the ROM name, the cheat engine will automatically check the ROM CRC32 and select the appropriate .zip cheat file with matching CRC32 accordingly. ROM name matching has priority over CRC32 checking.</p> <p>Individual cheats are in .gg format and should be stored in zip files.</p>"},{"location":"cores/features/cheats/#how-to-use-cheats-with-cd-rom-images","title":"How to use Cheats with CD-ROM images","text":"<p>Since CD-ROM images are large, the MiSTer purposefully doesn't do CRC32 hash checks for CD images. You will need to place the cheats you want into the same folder as your cue/bin or CHD file, in order to use cheats with it. Typically the cheat-matching with your CD-ROM image is done by matching the filename of your CUE/BIN, CHD, or ISO with the filename of the cheat zip file. The Playstation core uniquely allows for this method and has an additional method to load the cheat based upon the internal Game ID (e.g. SCUS-94163). Please note, if the cheats do not load, then check the following:</p> <ol> <li>The cheat zip file is in the same subfolder as the desired CUE/BIN, CHD, or ISO.</li> <li>The filename of the zip file is identical to the filename of the CUE/BIN, CHD, or ISO.</li> <li>(for the PSX core only) The Game ID of the desired game matches the target Game ID of the zip file.</li> </ol> <p>If cheats for the CD game do not work when everything else looks correct, it is possible your version of the game is wrong.</p>"},{"location":"cores/features/cheats/#making-your-own-codes","title":"Making your own codes","text":"<p>All types of cheat codes for 16 bit systems and earlier can be decoded into four pieces of information: An address, a compare value, a replace value, and usually a flag to say if the compare value is used or not. The format for a gg file is in binary as 4 32 bit integers in little-endian byte order. </p> <p>For example, if the Address is <code>0xFF1CA0</code> and the compare value is <code>0xB5</code> and the replace value is <code>0xFF</code>, the file would look like this:</p> <p><code>01 00 00 00  A0 1C FF 00  B5 00 00 00  FF 00 00 00</code></p> <p>The first four bytes are little-endian <code>0x00000001</code> for \"compare enabled\", the second four are little-endian address, third set are compare value, and fourth is replace value. Note that not all codes use a compare value.</p> <p>For cheats with multiple codes, simply add another 16 bytes at the end of the file in the same format as the first.</p> <p>You can decode game genie codes into these values with tools like this:</p> <p>https://gamehacking.org/system/nes</p>"},{"location":"cores/features/rtcsupport/","title":"RTC Support","text":"<p>MiSTer has Real-Time Clock support in many of it's cores. If you have an internet connection or the RTC board installed, these cores will show the correct date and time or be utilised by the core.</p>"},{"location":"cores/features/rtcsupport/#rtc-is-supported-in-following-cores-and-how-to-test","title":"RTC is supported in following cores and how to test:","text":"<ul> <li>ao486 (PC) (DATE on MS-DOS prompt)</li> <li>Archie (Acorn Archimedes) (Apps &gt; Alarm)</li> <li>GBA (checked with Pok\u00e9mon Sapphire, wall clock in first room)</li> <li>Gameboy (GB and GBC) (Pok\u00e9mon Gold: set clock, go one room right, set day of week, save, restart; clock is in the menu screen)</li> <li>MSX (\"MSX3\") (DATE on MSX-DOS prompt)</li> <li>BBCMicro (BBC Micro Master 128K) (PRINT TIME$ in BBC Master mode)</li> <li>Menu (on top of the panels)</li> <li>Minimig (Amiga) (Utilities &gt; Clock)</li> <li>NeoGeo (DIP Settings: ON &gt; BOOK KEEPING &gt; CABINET/COIN, check date of log entries)</li> <li>PC8801mk2SR (PC-88) (PRINT DATE$, shows year 85 but month and day are OK, and PRINT TIME$ shows correct time)</li> <li>QL (Sinclair QL) (PRINT DATE$)</li> <li>SNES (Daikaijuu Monogatari II, Tengai Makyou Zero - once set up, you need to reload the core for the clock to take the real time)</li> <li>TSConf (top of Wild Commander screen, also MaxiClock plugin)</li> <li>X68000 (DATE on HUMAN68K prompt)</li> <li>Zet98 (PC-98) (DATE on MS-DOS prompt)</li> <li>ZXNext (ZX Spectrum Next) (main menu in Next mode)</li> </ul>"},{"location":"cores/highlights/gb2p/","title":"Game Boy 2 Player","text":""},{"location":"cores/highlights/gb2p/#game-boy-2-player-demonstration","title":"Game Boy 2-Player Demonstration","text":""},{"location":"cores/highlights/genesis/","title":"Genesis","text":"<p>Note: This core is in the process of being deprecated thanks to the new hardware accurate Megadrive core by Nukeykt that was made from decaps. The turbo and sprite limit features are unavailable in the Megadrive core currently.**</p> <p>The Genesis core is a port of the fpgagen core to MiSTer, with significant enhancements and additions. The audio filtering options have been adjusted according to real hardware using MDFourier.</p>"},{"location":"cores/highlights/genesis/#features","title":"Features","text":"<ul> <li>Composite Blending effect (e.g. Sonic Waterfall transparency)</li> <li>CPU Turbo option (e.g. Road Rash gameplay speed)</li> <li>Increase sprite limit.</li> <li>Audio Filtering options for Model 1, Model 2, Minimal, and No Filter</li> <li>Switch between YM2612 (Model 1) or YM3438 (Model 2/3) FM Synth</li> <li>Multitap: 4-way, Team Player, J-Cart</li> <li>SVP Chip (Virtua Racing for Genesis supported)</li> <li>Auto-Region header detection using the new style and the old style combined.</li> <li>Corrected Aspect Ratio option for 320x224 game resolutions (e.g. Castlevania Moon).</li> </ul>"},{"location":"cores/highlights/genesis/#region-detection","title":"Region detection","text":"<p>There are two methods of region detection.</p> <ol> <li> <p>Header: This method detects a character in the header to determine if the game was intended to be played on a Japanese, European, or American version of the console. This method is default and preferred as it is compatible with the entire commercial lineup. This option uses a region priority setting for multi-region games which had \"JUE\" in the header. Whatever the first region is, will be the region set on load of a multi-region game.</p> </li> <li> <p>File Ext: This method changes the region according to the filename extension of the rom.</p> <ul> <li>BIN = Japanese</li> <li>GEN = America</li> <li>MD = Europe</li> </ul> </li> </ol> <p>There is also a region priority list for multi-region games that had multiple region codes in the header. This is useful if you want to specify a certain region to default to in order of first priority to last (e.g. US&gt;JP&gt;EU will try to load multi-region games in US first, then it will load as JP if no US region code is present, then EU if neither is present).</p>"},{"location":"cores/highlights/genesis/#ym2612ym3438-and-genesis-model-12-audio-filtering","title":"YM2612/YM3438 and Genesis Model 1/2 Audio Filtering","text":""},{"location":"cores/highlights/genesis/#corrected-aspect-ratio-example-video","title":"Corrected Aspect Ratio Example Video","text":""},{"location":"cores/highlights/genesis/#composite-effect-example-video","title":"Composite Effect Example Video","text":""},{"location":"cores/highlights/genesis/#turbo-cpu-example-video","title":"Turbo CPU Example Video","text":""},{"location":"cores/highlights/megacd/","title":"MegaCD","text":"<p>The MegaCD core is a MiSTer project original core developed by srg320 (Sergey Dvodnenko) which aims to simulate the Sega CD / Mega CD add-on for the Sega Genesis. It uses the same fpgagen logic and many of the improvements to it made in the MiSTer Genesis core, but adds on a significant chunk of logic that handles the powerful CD addon hardware.</p>"},{"location":"cores/highlights/megacd/#features","title":"Features","text":"<ul> <li>Almost all features from the Genesis core</li> <li>CUE/BIN support.</li> <li>CHD support.</li> <li>Automatic region detection.</li> <li>Multiple bios capability.</li> <li>Pier Solar support.</li> <li>MSU-MD support.</li> </ul>"},{"location":"cores/highlights/megacd/#sega-cd-mode-1-audio-msu-md-and-pier-solar-support","title":"Sega CD Mode 1 Audio - MSU-MD and Pier Solar Support","text":"<p>In order to use MSU-MD or to play the Sega CD version of Pier Solar on the MiSTer core the following conditions need to be met:</p> <ul> <li>The MegaDrive/Genesis cartridge ROM and the CUE/BIN (or CHD) of the whole game must be placed in the same folder.</li> <li>The MegaDrive/Genesis cartridge ROM must be renamed to <code>cart.rom</code> in order to load it into SDRAM when the CUE/CHD is loaded.</li> <li>In the case of MSU-MD, the ROM must be patched with the correct MSU-MD patch in order for it to tell the core what tracks to play and when.</li> </ul> <p>If you meet all of these conditions and the game still doesn't work, then there are a few likely explanations:</p> <ol> <li>Your ROM patch is actually an MD+ patch. MD+ is not supported at this time as a format.</li> <li>Your ROM is not patched at all.</li> <li>You didn't rename the cartridge's ROM to cart.rom.</li> <li>Your cue file is incorrect.</li> </ol> <p>If a set you have downloaded of MSU-MD ROMs doesn't work, then troubleshoot by applying the patch yourself to a fresh ROM to see if that works instead.</p>"},{"location":"cores/highlights/nes/","title":"NES","text":"<p>The Nintendo Entertainment System (NES) MiSTer core is packed full of many features to be explored. There are options like automatic Famicom Disk System (FDS) disk swapping, custom palette loading, overscan and screen edge masking, extra sprites hack, and SNAC (so you could use an original Zapper lightgun on a CRT with analog video output).</p>"},{"location":"cores/highlights/nes/#extra-sprites-mode","title":"Extra Sprites mode","text":"<p>Some NES games would allow more sprites on the screen than the system was typically designed to allow at one time and the sprites would flicker to keep them on the screen. There was a limit to how many sprites could be on the screen at one time. The NES MiSTer core lets you somewhat remove this limit, reducing the amount of flicker that occurs when many sprites are on the screen in games like Rygar. This does not work with all games that have flicker, some flicker was added intentionally by the original developers for other reasons.</p>"},{"location":"cores/highlights/nes/#extra-sprites-deflicker-example-video","title":"Extra Sprites (deflicker) Example Video","text":""},{"location":"cores/highlights/nes/#palettes","title":"Palettes","text":"<p>The NES core has both built-in palettes and the ability to load custom palettes. You may be wondering why the NES core needs palettes. It's just colors, right? Without going into it here, if you want to learn about NES Palettes, watch this YouTube video by NesHacker, and read the pinned comment there as a couple details were technically inaccurate. Basically, the NES does not have a native palette of colors to work with as the colors were not output in the typical red, green, and blue values like other game consoles. So emulators need to come up with palettes that most closely approximate the original viewing experience. This viewing experience would sometimes vary depending on the tv you were watching on, so multiple palette options are made available. This also makes it possible to do fun and ridiculous palettes just for the sake of it, like the virtual boy palette made by RetroSho.</p>"},{"location":"cores/highlights/nes/#palettes-example-video","title":"Palettes Example Video","text":""},{"location":"cores/highlights/nes/#famicom-disk-system-bios-boot","title":"Famicom Disk System BIOS boot.","text":"<p>Download Blank FDS boot2.rom and then place this in <code>./games/NES/</code>. Then when you start the core (assuming you already have the FDS bios placed there and renamed to <code>boot0.rom</code>) it will boot to the FDS BIOS as if you had a blank disk inserted.</p>"},{"location":"cores/highlights/nes/#famicom-disk-system-blank-disk-boot-example-video","title":"Famicom Disk System Blank Disk Boot Example Video","text":""},{"location":"cores/highlights/psx/","title":"PSX","text":"<p>The Sony Playstation (PSX) MiSTer core is the most feature-filled and heavily developed core thus far. Multiple controller options, automatic bios region swapping, both memory card slots with manual memory card file loading, modes to increase the speed, and even modes to modify the textures in-game. This core by Robert Peip (FPGAzumSpass) took a huge amount of work and is still being worked on actively due to the large task that is writing a PSX emulator in general. Here we will highlight some of the features of the PSX core.</p>"},{"location":"cores/highlights/psx/#controller-support","title":"Controller Support","text":"<p>The MiSTer PSX core supports a very large list of control options that original hardware had available to it.</p> <ul> <li>DualShock (Later controller with analog sticks and rumble/vibration capability)</li> <li>Digital Pad (original PSX controller without analog sticks)</li> <li>Analog Pad mode (dual analog sticks mode enabled)</li> <li>GunCon</li> <li>NeGcon (Can also be used as a Steering Wheel using the \"Wheel-NegCon) option in the OSD.)</li> <li>Racing Wheels (some analog racing wheels can be used if you switch to \"Wheel-Analog\" in the OSD.)</li> <li>Mouse</li> <li>Justifier</li> <li>SNAC (there is a special adapter required to use real PSX controller accessories. Memory cards and even the pocketstation can be used in this mode technically)</li> <li>Analog Joystick</li> <li>Pop'n Music Controller</li> </ul>"},{"location":"cores/highlights/psx/#dualshock-support","title":"DualShock Support","text":"<p>More specifically, the DualShock controller mode is a catch-all solution. Ideally, it will identify what the game requires and it ought to put itself into the correct mode (either Digital or Analog) for compatibility with that game. Some games, when they are on the wrong mode, will not register inputs from your controller. If this happens, switch manually to a different mode (Digital or Analog) and see if the problem goes away.</p> <p>Additionally, just like the original DualShock controller, there is a way to change between digital and analog modes on the controller at the press of a button (or multiple buttons depending on the controller you have). If you have a DualShock 4 or DualSense (5) controller, then you can just press in the touchpad in the center once. That will switch between Analog and Digital modes each time. If you do not have a controller with a PS4/PS5 touchpad on it to click, then you can use either L3+R3+Up/Down or L1+L2+R1+R2+Up/Down to changes modes, depending on the \"DS mode\" setting you have in the OSD.</p>"},{"location":"cores/highlights/psx/#manual-memory-card-loading","title":"Manual Memory Card Loading","text":"<p>You can load Playstation memory card files (.mcd or .sav) manually in the OSD in this core. It is probably best to use the 2nd slot because the default behavior is to occupy the first slot automatically with a blank memory card file. You can also opt out of auto-mounting a blank memory card file to slot 1 by turning off the Automount Memory Card 1 option in the OSD. Finally, if you have a SNAC adapter with a memory card slot connected to it somehow, the core does support real Playstation 1 memory card loading over SNAC.</p>"},{"location":"cores/highlights/psx/#libcrypt-support","title":"Libcrypt Support","text":"<p>Some games used a kind of copy protection with what was called \"Libcrypt\" and they will not work if it's not circumvented.</p> <p>You can provide an .sbi file to do that. If there is an .sbi file (the whole collection can be downloaded from redump.org) next to a .cue with the same name, it will then be loaded automatically when mounting the CD image. The MiSTer updater automatically downloads these .sbi files so it should not be necessary to download and place them manually.</p>"},{"location":"cores/highlights/psx/#audio-and-video-options","title":"Audio and Video Options","text":""},{"location":"cores/highlights/psx/#fixed-blanks","title":"Fixed blanks","text":"<p>Due to the original playstation having a wide variety of resolution options available to software developers, and due to the fact that some of these software developers made the screen shake in their games by moving the image outside of the bounds of the screen, a solution was necessary to resolve sync loss and get appropriate scaling and stability through resolution changes. Fixed Horizontal blanks (Hblanks) and fixed Vertical blanks (vblanks) were added as options to stabilize the video output to make it more pleasant. If you experience problems with sync or the resolution changes don't look right to you, give these options a try and see if that remedies the problem.</p> <p>It should also be noted that Fixed Horizontal blanks makes everything fit within the original 4:3 aspect ratio of the PSX video output, so it should be turned on in pretty much all situations if you want the original resolution.</p> <p>The Vertical crop options, which are made available when Fixed VBlank is turned on, is similar to the 5x scaling in other cores, but due to the nature of many PSX games using either 224p or 216p, then there have been two options made available for your convenience.</p> <p>The Horizontal Crop option is made for some PAL games, see what works best for you.</p> <p>A good example of a game that benefits from the Fixed Horizontal Blanks option is Metal Gear Solid. The shaking of the screen in some scenes would cause your modern display to lose sync without the Fixed VBlank option turned on.</p> <p>A good example of a game that benefits from the Fixed Vertical Blanks option is Final Fantasy VII. Horizontal blanks gives you the proper 4:3 aspect ratio first of all, but then will give you a \"jump\" in the resolution when it changes from world map to the battle screen. However, when used in conjunction with Vertical Crop -&gt; On(224/270), you will notice that the transition from the world map to a battle will no longer make a jarring resolution change where the screen position seems to change. Here's an example video that shows the benefits:</p> <p> </p> <p>There are more examples like this out there, you will have to test for yourself to see what works best.</p>"},{"location":"cores/highlights/psx/#black-transitions","title":"Black Transitions","text":"<p>Some resolution and screen transitions are so quick that the framebuffer on the MiSTer is not cleared out completely in DDR3, so this is a workaround to not show ghost images from previous frames over scaled video (hdmi or vga_scaler).</p>"},{"location":"cores/highlights/psx/#deinterlacing-methods","title":"Deinterlacing Methods","text":"<p>The MiSTer PSX core supports two methods of deinterlacing the occasional interlaced video on the Playstation. Weave is the default and is often preferred, this gives you the most stable image. Bob is very jittery, but may look better on real CRT's in some situations.</p>"},{"location":"cores/highlights/psx/#sync-480i-for-hdmi","title":"Sync 480i for HDMI","text":"<p>This option syncs the 480i output for when you are playing on an HDMI display. It will improve the speed at which the resolution changes from 480i to 240p for many displays.</p>"},{"location":"cores/highlights/psx/#rotate","title":"Rotate","text":"<p>If for whatever reason you need to rotate your screen 180\u00b0 you can just go to the Audio and Video options in the OSD and toggle \"Rotate\" to On or Off.</p>"},{"location":"cores/highlights/psx/#dithering-onoff-toggle","title":"Dithering On/Off Toggle","text":"<p>You can optionally toggle Dithering On and Off. In some games this can cause color banding which can look undesirable, in others it can clean up the checkerboard look without much loss. You will have to find out what is most appropriate.</p>"},{"location":"cores/highlights/psx/#render-24-bit","title":"Render 24 bit","text":"<p>Enables 24 bit rendering, which may make same games appear much smoother in the graphics and not require dithering to avoid color banding issues. Try it out.</p>"},{"location":"cores/highlights/psx/#dither-24-bit-for-vga","title":"Dither 24 bit for VGA","text":"<p>MiSTer's analog IO board was not originally designed for 24-bit RGB color representation in mind. As a result only 18-bit video comes out over the analog IO board. This option will dither 24-bit video sources from the PSX (most situations are not 24-bit, usually just FMV sequences from some games) so the lack of those 6 bits is not apparent over analog video. This has no effect on HDMI video and shouldn't be used if you are using a direct video adapter, which has full 24-bit RGB support.</p>"},{"location":"cores/highlights/psx/#480i-to-480p-hack","title":"480i to 480p Hack","text":"<p>This option does a hack to convert 480i to 480p. It may look buggy in some games, but the point is for some 480i 3d games to not look so jittery and to not have horizontal lines interrupting the image.</p>"},{"location":"cores/highlights/psx/#widescreen-hack","title":"Widescreen Hack","text":"<p>The MiSTer PSX core has a Widescreen hack mode. There are many games which are 3d only with very little 2d, so you could potentially stretch the visible landscape and not stretch the 3d models. Some games work well with this, while others do not. Your results may vary. There are multiple Aspect Ratios for this hack to leave some options open for various displays and games, 3:2, 5:3, and 16:9 (what most modern displays are). Here's an example using R4 - Ridge Racer Type 4:</p> <p> </p>"},{"location":"cores/highlights/psx/#texture-filter","title":"Texture Filter","text":"<p>The Playstation didn't have any built-in texture filtering like some other consoles did (Nintendo 64 is a popular example). This means many of the textures had rough edges. In some cases this is fine, but in some games it can be very displeasing. This little trick in the MiSTer PSX core allows you to smooth out the textures on 3d objects if you wish. A good example where this could be used is in Tony Hawk's Pro Skater 2, like in the video below:</p> <p> </p>"},{"location":"cores/highlights/psx/#spu-ram-select","title":"SPU RAM select","text":"<p>The MiSTer PSX core is the first released core which supports the optional Dual SDRAM modules. This was necessary early in it's development as there wasn't enough bandwidth on one SDRAM module to contain both the test roms and small games and to store other components that were needed to be placed in SDRAM at the same time. You are not required to have Dual SDRAM on the PSX core for quite some time now, and the official release is a Single SDRAM build that is compatible with the Analog IO board.</p> <p>Toggling this option while a game is running will most likely crash the game. If you have a Dual SDRAM build of the core and you enable this option, you will likely have to reset the game to get it to work.</p> <p>There is only one humanly imperceptible difference in using the Dual SDRAM build of the MiSTer PSX core known. The audio samples are measurably more accurate to a tiny fraction of a millisecond. The human ear can't tell that 1 or 2 out of 44,100 samples per second were dropped.</p> <p>This option to use Dual SDRAM for the SPU is disabled by default in the regular releases of the core. To get a special release with Dual SDRAM support currently you can either open the Quartus Project File (.qpf) with the name \"PSX_DualSDRAM.qpf\" using Quartus 17.0.2 and compile the core, or you can get the latest Test Build from the MiSTer FPGA Discord in the #test-builds channel.</p>"},{"location":"cores/highlights/psx/#miscellaneous-options","title":"Miscellaneous Options","text":"<p>These are the speedhacks in the MiSTer PSX core which will allow you to improve the performance of Playstation games, while potentially sacrificing some compatibility.</p>"},{"location":"cores/highlights/psx/#fastboot","title":"Fastboot","text":"<p>Fast boot bypasses the BIOS boot logo and screen when starting a game. This can make it a lot quicker to get into the game, however there are a small number of games where it may lead to bugs and other compatibility issues. If you notice bugs in a game, try to turn off fastboot before submitting a bug report about the core first.</p>"},{"location":"cores/highlights/psx/#unsafe-options","title":"Unsafe Options","text":"<p>The core offers various options to improve gameplay for some games, but those options cannot be considered stable through all games. If you use one or more of these options, the core will warn you every time you start a game.</p> <ul> <li>480i to 480p hack: Allows to render some games with full 480p resolution, removing interlacing artifacts. Only works for some full 3D 480i titles.</li> <li>Turbo: Increases CPU, DMA, Memory and GTE performance by ~10%(Low), ~20%(Medium) or 50%(High). Cheats cannot be used while Turbo is on and are disabled automatically.</li> <li>Pause when CD slow: CD data must be returned in a fixed time frame, otherwise the core will pause until the data has arrived. Disabling this will remove these pauses, but also risk that the game hangs up due to CD data being late.</li> <li>PAL 60Hz Hack: Runs PAL games with 60Hz. PAL Games will often run faster with this hack on. Screen height is limited to 256 lines in this mode, so some games might be cropped.</li> <li>CD Fast Seek: CD will seek the next sector in the minimal possible time. Decreases loading time of games, but some games depend on the long loading times and will crash.</li> <li>CD Speed: Allows to run the CD drive with fixed higher speed to decrease loading times, but some games depend on the long loading times and will crash. CD will automatically speed down to original speed for FMVs or CD audio playback and back to increased speed in loading areas. The higher speed rates are more unstable and require proper storage to be usable with bin/cue files reaching higher performance than chd.</li> <li>Limit Max CD Speed: Will hold back any new CD data until the game has processed the last data. Mostly useful to prevent CD data overrun when using higher speed modes, leading to overall faster loading times due to less read retries.</li> <li>RAM: 8 Mbyte option from development consoles. Only use for homebrew that requires it, otherwise there is a high chance of crashing games.</li> <li>GPU Slowdown: Slows down GPU Fillrate.</li> </ul>"},{"location":"cores/highlights/psx/#overlays","title":"Overlays","text":"<p>By default there are 3 information overlays that are disabled, you can enable them if you want to:</p> <ul> <li>FPS Overlay - Frames per second.</li> <li>Error Overlay - Error messages mentioned above.</li> <li>CD Slow Overlay - Displays an indicator that the cd access time is slower than expected. If you are using a spinning hard disk or are using a NAS for your ROM storage the core will pause and wait for data if there is an unexpected delay. This indicator shows when this occurs.</li> </ul>"},{"location":"cores/highlights/psx/#using-cheats-on-the-mister-psx-core","title":"Using cheats on the MiSTer PSX core","text":"<p>Cheats on the PSX are a little bit different than other MiSTer cores' cheats implementation in how they are detected. With other cores, the cheat file has a CRC32 hash in the filename, and this is checked against the crc32 hash of the ROM that is loaded. This is not the case with PSX (or other CD-based cores with Cheats support either). Because CD images are so large, doing a crc32 check on them would take too long, so the internal Game ID is scanned for instead and the cheats file with the same internal Game ID is loaded. So Final Fantasy VII Disc 1 gets loaded, MiSTer detects that it is Game ID SCUS-94163, and MiSTer loads the cheats file named <code>SCUS-94163.zip</code> from <code>./cheats/PSX/</code>. Note that when the Data Cache enhancement is enabled in the OSD, cheats are disabled and will not function. This is by design.</p>"},{"location":"cores/highlights/psx/#error-messages","title":"Error Messages","text":"<p>If there is a problem recognized by the MiSTer PSX core, an error overlay is displayed, showing which error has occured. You can hide these messages with the \"Error Overlay\" OSD option, by default they are on.</p> <p>List of error codes:</p> <ul> <li><code>E2</code> - CPU exception(only relevant if game shows issues)</li> <li><code>E3</code> thru <code>E6</code> - GPU hangs (e.g. corrupt display list)</li> <li><code>E7</code> - CPU2VRAM with mask-AND enabled</li> <li><code>E8</code> - DMA chopping enabled</li> <li><code>E9</code> - GPU FIFO overflow</li> <li><code>EA</code> - SPU timeout</li> <li><code>EB</code> - DMA and CPU interlock error</li> <li><code>EC</code> - DMA FIFO overflow</li> <li><code>ED</code> - CPU Data/Bus request timeout -&gt; will also appear if the BIOS is not found or corrupt or no SDRAM module is installed</li> <li><code>EE</code> - Dotclock used as timer report(only relevant if game shows issues)</li> <li><code>EF</code> - BusWidth for SPU was set to 8 Bit (but should be 16 bit)</li> </ul>"},{"location":"cores/highlights/snes/","title":"SNES","text":"<p>The Super Nintendo Entertainment System (or SNES) MiSTer core has multiple features like CPU and Super FX chip turbo mode, lightgun support, mouse support, and even changing the WRAM initialization value. In addition to this, it also has support for nearly every single enhancement chip released. It is a very powerful core that was primarily developed by srg320 when he didn't even have original hardware.</p>"},{"location":"cores/highlights/snes/#enhancement-chip-support","title":"Enhancement Chip Support","text":"<p>Here are the SNES enhancement chips currently supported with some example games they were used in:</p> <ul> <li>Super FX AKA GSU-1 (Star Fox, Star Fox 2, Stunt Race FX)</li> <li>Super FX 2 AKA GSU-2 (Super Mario World 2: Yoshi's Island, Doom)</li> <li>CX4 (Only in Mega Man X 2 and Mega Man X 3)</li> <li>DSP-1 (Super Mario Kart and Pilotwings)</li> <li>DSP-2 (Only in Dungeon Master)</li> <li>DSP-3 (Only in SD Gundam GX)</li> <li>DSP-4 (Only in Top Gear 3000)</li> <li>OBC-1 (Only used in Metal Combat: Falcon's Revenge)</li> <li>S-DD1 (Only used in Star Ocean and Street Fighter Alpha 2)</li> <li>SA-1 (Kirby Series, Super Mario RPG)</li> <li>SPC7110 (Far East of Eden Zero, Large Shell beast Story 2)</li> <li>ST1010 (F1 Roc 2 - Race of Champions)</li> <li>S-RTC (Daikaiju Monogatari II)</li> </ul> <p>Currently the only enhancement chips not supported are MX15001TFC (Nintendo Power Flash Cartridges), ST011 (Hayazashi Nidan Morita Shougi), and ST018 (Hayazashi Nidan Morita Shougi 2). This is mostly because the core is already near the limit of what the DE10-Nano's Cyclone V is capable of fitting into it's design.</p>"},{"location":"cores/highlights/snes/#snes-enancement-chip-example-video","title":"SNES Enancement Chip Example Video","text":""},{"location":"cores/highlights/snes/#satellaview-support","title":"Satellaview Support","text":"<p>This core also supports Satellaview. You just need the BSX/BS-X rom placed into the <code>./games/SNES/</code> folder and renamed to <code>bsx_bios.rom</code>. The core used to require patched versions of the rom to run, but every original Satellaview ROM that didn't require an internet connection, extra peripherals, or something like that will run now without patches.</p>"},{"location":"cores/highlights/snes/#bs-x-satellaview-example-video","title":"BS-X Satellaview Example Video","text":""},{"location":"cores/highlights/snes/#super-fx-turbo","title":"Super FX Turbo","text":"<p>The MiSTer SNES core has a Super FX Turbo option which overclocks the Super FX chip so games run a little faster. Combined with the Turbo CPU option games like Star Fox will have a higher framerate. However, the game will run faster than intended so your results may vary. It is also important to note that the use of such hacks may increase the likelihood of bugs occurring, so please do not report bugs when using Turbo options.</p>"},{"location":"cores/highlights/snes/#super-fx-turbo-example-video","title":"Super FX Turbo Example Video","text":""},{"location":"cores/highlights/tgfx16/","title":"TurboGrafx-16","text":"<p>The MiSTer TurboGrafx16 core is an extremely accurate TurboGrafx 16 / PC-Engine hardware based emulator. Originally based upon Gregory \"Torlus\" Estrade's FPGAPCE, it has been pushed even further to a high degree of accuracy by the best MiSTer devs and PC-Engine experts. The MiSTer TurboGrafx16 core has support for SuperGrafx, CD-ROM, and Arcade Cards.</p>"},{"location":"cores/highlights/tgfx16/#controller-options","title":"Controller Options","text":"<p>In the OSD you are able to change the intended simulation of the controller you are using in various ways. For Pachio-Kun there was a pachinko style controller which had an angled slider to adjust the angle of the pachinko balls in-game. You can use a mouse for this movement instead.</p> <p>The Turbo Tap controller is also supported. This is distinct from the MiSTer's built-in Turbo feature. The Turbo Tap had a specific turbo frequency that is more suitable for some games. Enablingt his option will make the buttons use turbo at the original rate of that controller.</p> <p>There is also a toggle so you can change to the rarely used PC-Engine 6-button controller. There was a controller called the \"HORI Fighting Commander PC\" and a couple other controllers with this I - VI button scheme and turbo tap functionality on each of them. This 6-button controller was only supported on a select few games. Here's a list of these 6-button supported games:</p> <ul> <li>Advanced Variable Geo</li> <li>Art of Fighting</li> <li>Asuka 120% Maxima Burning Fest</li> <li>Fatal Fury 2</li> <li>Fatal Fury Special</li> <li>Flash Hiders</li> <li>Flash Hiders Taikenban (Demo)</li> <li>Kabuki Klash</li> <li>World Heroes II</li> <li>Ys IV - Dawn of Ys</li> </ul>"},{"location":"cores/highlights/tgfx16/#arcade-card","title":"Arcade card","text":"<p>There are a few TurboGrafx16 games which required the Arcade card add-on. The MiSTer core supports running these, all you have to do is toggle the \"Arcade Card\" option to \"Enabled\" in the \"Hardware\" sub-menu, then it should work.</p>"},{"location":"cores/highlights/tgfx16/#color-palette-options","title":"Color palette options","text":"<p>The composite video encoder of the original TurboGrafx-16 modified the colors from their raw RGB values. What this means is, how you saw the colors on real hardware on an old CRT years ago, is not how it looked in emulators today or even RGB-modded original hardware! Thankfully Kitrinx and Artemio Urbina worked to develop a mathematically derived color corrected palette that represents the composite video output instead. The games were likely developed with these composite colors in mind, so this option is kept as the default. If you want a more vibrant color with a lot of pop, then you can switch to the Raw RGB setting instead by toggling the Audio &amp; Video --&gt; Colors option. Here's a video demonstrating how to change this option and the big difference it makes:</p> <p> </p>"},{"location":"cores/highlights/tgfx16/#overscan-border-and-border-color","title":"Overscan / Border and Border Color","text":"<p>The original TurboGrafx-16 had a border that was mostly not visible to the original player due to the bezel of their CRT covering this empty space. In the MiSTer TGFX16 core we leave this overscan area hidden to make it more pleasant on modern displays. If you wish to restore this overscan and if you wish to use the original system's color (instead of just Black) for it, you can just change the Overscan and Border Color options.</p> <p> </p>"},{"location":"cores/highlights/tgfx16/#extra-sprites-per-line","title":"Extra Sprites per Line","text":"<p>The original TurboGrafx-16 hardware had a hard limit to how many sprites could be rendered per line at a time, so when a game went over this limit they would flicker and disappear to compensate. The MiSTer core isn't forced to adhere to these limitations. While the default behavior is the same as the hardware you can turn this option to \"Extra\" in the OSD's Audio &amp; Video sub-menu and see if it makes the game more pleasant. Here's a video example:</p> <p> </p>"},{"location":"cores/highlights/tgfx16/#audio-boost-options","title":"Audio Boost options","text":"<p>Some games had varying levels of audio when compared to each other, and even to their own separate audio channels. The MiSTer TurboGrafx16 core allows you to Boost the CD Audio, ADPCM, and all Audio by varying degrees. This can help when the vocals are quieter than the music, or when some sound effects feel like they should be louder, or even if a game is randomly just a lot quieter on the whole than the other games you were just playing.</p>"},{"location":"developer/analogsim/","title":"Analog Simulation","text":"<p>Article by MiSTer core developer Jegor van Opdorp (SupraDeus/jopdorp)</p> <p>Many old computers have analog parts, for example audio boards that have partly analog synthesis and old desktop computers with tape input.</p> <p>Currently there is no convenient way to directly simulate electronic circuits, for example based in their spice netlists, in real time on the MiSTer. So to implement these type of circuits in fpga, you will have to come up with some kind of simulation of the behavior of the electronic circuit.</p> <p>The Arcade-Battlezone core is an example of a core with analog sound synthesis.</p>"},{"location":"developer/analogsim/#a-way-to-approach-the-problem","title":"A way to approach the problem:","text":"<ol> <li>Find youtube video's of people playing the actual game, to get some idea of the sounds it has.</li> <li>Play the game in an emulator, paying extra attention to sounds that do not sound the same in the emulator as in the video of the actual machine.</li> <li> <p>Identify the digital and analog parts of the schematic.</p> <ul> <li>One thing to keep in mind is that the digital parts run at the system clock speed, or sometimes a separate clock source that is closer to the audible frequency spectrum, in Arcade Battlezone there is a 12khz input to a digital noise circuit, of which the output goes into and analog integrator circuit. This creates an axplosion sound. The implementation of this sound is listed at \"inverting amplifier\" below. The analog parts will be outputting at audio sample rate, i.e. 48khz</li> </ul> </li> <li> <p>Implement all the digital parts, common digital components in sound systems are:  </p> <ul> <li> <p>linear feedback shift register:  An implementation of a similar circuit in arcade battlezone can be found here:</p> </li> <li> <p>flipflops, like the jk flipflop, implemented here:</p> </li> </ul> </li> <li> <p>Identify analog circuits with isolated behavior, i.e. 1 input, 1 output. These can be individually implemented and tested.</p> </li> <li> <p>Identify common, easily recognisable and implementable parts, such as:</p> </li> <li> <p>low pass filters       This can be implemented using an iir low pass filter, you can find the parameters using this spreadsheet</p> <p>Some implementations of iir filters:</p> <ul> <li>Blockade Low Pass Filter</li> <li>Blockade Infinite Impulse Response (IIR) 1st Order Filter</li> </ul> <p>A simpler type:</p> <ul> <li>Blockade Infinite Impulse Response (IIR) Filter</li> </ul> </li> <li> <p>high pass filters</p> <p></p> </li> <li> <p>inverting amplifiers</p> <p></p> <p>This is essentially a sign inversion of the sample, followed by a (fixed sign) multiplication.</p> </li> <li> <p>non inverting amplifiers</p> <p></p> <p>This is just a (fixed sign) multiplication of the sample</p> </li> <li> <p>differential amplifiers</p> <p></p> </li> <li> <p>inverting integrators</p> <p></p> <p>or</p> <p></p> <p>This is essentially a sign inversion of the sample, followed by a multiplication, with the result being stored in a reg.</p> <p>The multiplication is run repeatedly, each audio clock cycle, Resulting in a \"release/decay\" type amplifier envelope.</p> <p>An example of an implementation of this can be found here</p> </li> <li> <p>other common opamp circuits</p> </li> <li> <p>additive mixers</p> <p></p> <p>An additive mixer just adds up/averages two signals. If the resistance is higher for one signal than the other, this will result in a volume difference between them.</p> </li> <li> <p>All the parts that are going to need more attention, make note of what these parts are an try to guess what they are for. Differentiators and integrators combined with 555 timers  and noise inputs can be tricky.</p> </li> <li>Implement the mixers</li> <li>Implement the filters</li> <li>Implement the difficult parts of the circuit:</li> <li>Implement the circuit in a simlator.</li> <li>Figure out what input goes into the circuit when the game gets played.</li> <li>Run the simulation with the correct input and save the output as a wav file</li> <li>Analyse the output by looking at it in a wave editor like audacity and listening to it.</li> <li>Is the input always the same? (not noise as input) Does the circuit always response in the same way? (not generating noise)<ol> <li>Sample the output of the simulation</li> <li>Convert the sample into an array literal and trigger it as needed, usually the sample will just be triggered by a pulse in this case.</li> </ol> </li> <li>If the analog circuit has noise as input or has variable inputs such as a number controlled frequency or speed you will need to:<ol> <li>make a mathematical model of the analog circuit.</li> <li>implement the model in an easy to use programming language such as python</li> <li>compare the output of the mathematical model with the output of the circuit simulation using the same inputs. They have to be close, but not identical, but they should be identical to the hearing.</li> <li>rework your mathematical model to not have to use any dividers in real time, this is done in two steps <ol> <li>by algebra</li> <li>by precalculating any left-over divisions into division lookup-tables</li> </ol> </li> <li>you can also create other kind of lookup tables, for example a sine wave.</li> <li>implement the mathematical model in HDL</li> <li>verify the outputs of the HDL with a tesbench</li> <li>hook up the chip to the rest of our core!</li> </ol> </li> </ol>"},{"location":"developer/analogsim/#handy-links","title":"Handy links:","text":""},{"location":"developer/analogsim/#developer-journeys-of-analog-circuit-implementations","title":"Developer journeys of analog circuit implementations","text":"<p>MiSTer - Head On</p>"},{"location":"developer/analogsim/#informational-resources","title":"Informational resources","text":"<ul> <li>For finding the right values of a filter: https://www.micromodeler.com/dsp/</li> <li>Common operational amplifier uses, such as differentiators and integrators: https://en.wikipedia.org/wiki/Operational_amplifier_applications</li> <li>Explanation of how 555 timers work: https://www.electronics-tutorials.ws/waveforms/555_oscillator.html</li> <li>Spice programming https://www.allaboutcircuits.com/textbook/reference/chpt-7/fundamentals-spice-programming/</li> </ul>"},{"location":"developer/analogsim/#code-examples","title":"Code examples","text":"<ul> <li>example of a noise-based sound python implementation in a notebook</li> <li>example of a piece of python code that generates a lookup table</li> <li>example of a common digital noise generator</li> <li>example of a sine-based sound that takes noise as input</li> <li>example of a script that can take the output of a spice simulation and generate a wav file from it</li> <li>example of a spice netlist for a noise based sound</li> </ul>"},{"location":"developer/analogsim/#tooling","title":"Tooling","text":"<ul> <li>https://www.falstad.com/circuit/</li> <li>http://ngspice.sourceforge.net/</li> <li>https://www.audacityteam.org/</li> </ul>"},{"location":"developer/arcade_video/","title":"sys - arcade_video","text":"<p>Arcade video is used mostly in arcade cores. It has some useful helpers to optionaly turn on scandoubler (based on the ini settings), deals with rotation on HDMI, and can optionally handle GAMMA, and different color widths.</p>"},{"location":"developer/arcade_video/#instantiating-arcade_video","title":"Instantiating arcade_video","text":"<p>The module has a few parameters that are used to set it up.</p> <ul> <li>WIDTH - the width of one scanline</li> <li>DW - width of pixels. most arcades don't use a full 24 bits</li> <li>6 : 2R 2G 2B</li> <li>8 : 3R 3G 2B</li> <li>9 : 3R 3G 3B</li> <li>12 : 4R 4G 4B</li> <li>24 : 8R 8G 8B</li> <li>GAMMA - allow gamma controls</li> </ul> <p>The clk_video needs to be 4x the ce_pix and above 40MHZ.</p> <pre><code>    input         clk_video,\n    input         ce_pix,\n</code></pre> <p>The FX parameter uses the output of <code>status[5:3]</code> in this example of a config string: <code>\"O35,Scandoubler Fx,None,HQ2x,CRT 25%,CRT 50%,CRT 75%;\",</code></p>"},{"location":"developer/arcade_video/#rotating-vertical-games","title":"Rotating vertical games","text":"<p>Optionally, we add the screen_rotate and pass in whether the game needs to rotate ccw or cw.</p> <p>Screen rotate uses DDRAM for the framebuffer for rotation. If your core needs DDRAM for something else, see MCR3 for an example that uses DDRAM for an audio file and for the screen_rotate. Use this ddram: </p> <ul> <li>ddram instead of screen_rotate.</li> </ul> <pre><code>screen_rotate screen_rotate\n(\n          .*,\n          .rotate_ccw(ccw)\n);\n\nmodule arcade_video #(parameter WIDTH=320, DW=8, GAMMA=1)\n(\n    input         clk_video,\n    input         ce_pix,\n\n    input[DW-1:0] RGB_in,\n    input         HBlank,\n    input         VBlank,\n    input         HSync,\n    input         VSync,\n\n    output        CLK_VIDEO,\n    output        CE_PIXEL,\n    output  [7:0] VGA_R,\n    output  [7:0] VGA_G,\n    output  [7:0] VGA_B,\n    output        VGA_HS,\n    output        VGA_VS,\n    output        VGA_DE,\n    output  [1:0] VGA_SL,\n\n    input   [2:0] fx,\n    input         forced_scandoubler,\n    inout  [21:0] gamma_bus\n);\n</code></pre>"},{"location":"developer/component/","title":"Core Components Where Used","text":"<p>This is a list of many recreated components used in various MiSTer FPGA cores.</p>"},{"location":"developer/component/#ami","title":"AMI","text":""},{"location":"developer/component/#pokey-sound-chip","title":"POKEY Sound Chip","text":"<ul> <li>Atari 5200 &amp; 800</li> <li>Arcade - A Tetris</li> <li>Arcade - Black Widow</li> <li>Arcade - Centipede</li> <li>Arcade - Food Fight TG68</li> </ul>"},{"location":"developer/component/#amp","title":"AMP","text":""},{"location":"developer/component/#ir3r60n-audio","title":"IR3R60N Audio","text":"<ul> <li>Gameboy Advance</li> </ul>"},{"location":"developer/component/#atari","title":"Atari","text":""},{"location":"developer/component/#antic-alphanumeric-television-interface-controller","title":"ANTIC Alphanumeric Television Interface Controller","text":"<ul> <li>Atari 5200 &amp; 800</li> <li>Atari 7800</li> </ul>"},{"location":"developer/component/#maria-custom-graphics-chip","title":"MARIA Custom Graphics Chip","text":"<ul> <li>Atari 7800</li> </ul>"},{"location":"developer/component/#tia-television-interface-adapter","title":"TIA Television Interface Adapter","text":"<ul> <li>Atari 2600 TIA </li> <li>Atari 5200 &amp; 800 CTIA - Character TIA</li> <li>Atari 7800 GTIA - Graphics TIA</li> </ul>"},{"location":"developer/component/#xegs-keyboard-support","title":"XEGS Keyboard Support","text":"<ul> <li>Atari 7800</li> </ul>"},{"location":"developer/component/#arm","title":"ARM","text":""},{"location":"developer/component/#arm7tdmi","title":"ARM7TDMI","text":"<ul> <li>Gameboy Advance</li> </ul>"},{"location":"developer/component/#chip8","title":"Chip8","text":"<ul> <li>Chip 8</li> </ul>"},{"location":"developer/component/#eeprom","title":"EEPROM","text":"<ul> <li>Arduboy</li> </ul>"},{"location":"developer/component/#general-instrument","title":"General Instrument","text":""},{"location":"developer/component/#pong-on-a-chip","title":"PONG on a chip","text":"<ul> <li>AY-3-8500</li> </ul>"},{"location":"developer/component/#ay-3-8900","title":"AY-3-8900","text":"<ul> <li>Intellivision</li> </ul>"},{"location":"developer/component/#ay-3-8900-1","title":"AY-3-8900-1","text":"<ul> <li>Intellivision</li> </ul>"},{"location":"developer/component/#ay-3-8912-sound","title":"AY-3-8912 Sound","text":"<ul> <li>Vectrex MC68A09</li> </ul>"},{"location":"developer/component/#ay-3-8917-sound-generator","title":"AY-3-8917 Sound Generator","text":"<ul> <li>Intellivision</li> </ul>"},{"location":"developer/component/#cp1610","title":"CP1610","text":"<ul> <li>Intellivision</li> </ul>"},{"location":"developer/component/#sp0256-012","title":"SP0256-012","text":"<ul> <li>Intellivision</li> </ul>"},{"location":"developer/component/#gpio","title":"GPIO","text":""},{"location":"developer/component/#rtc","title":"RTC","text":"<p>See: Cores supporting RTC</p>"},{"location":"developer/component/#solar-sensor","title":"Solar Sensor","text":"<ul> <li>Gameboy Advance</li> </ul>"},{"location":"developer/component/#gyroscope","title":"Gyroscope","text":"<ul> <li>Gameboy Advance</li> </ul>"},{"location":"developer/component/#tilt","title":"Tilt","text":"<ul> <li>Gameboy Advance</li> </ul>"},{"location":"developer/component/#hitachi","title":"Hitachi","text":""},{"location":"developer/component/#hg51b169-snes-cart-ic-cx4","title":"HG51B169 - SNES Cart IC CX4","text":"<ul> <li>SNES</li> </ul>"},{"location":"developer/component/#intel","title":"Intel","text":""},{"location":"developer/component/#8035-no-rom-version-of-8048","title":"8035 - No ROM version of 8048","text":"<ul> <li>Arcade - Donkey Kong i8035ip for audio</li> <li>Arcade - Donkey Kong Jr. i8035ip for audio</li> </ul>"},{"location":"developer/component/#8048-t48","title":"8048 (T48)","text":"<ul> <li>Odyssey 2</li> <li>Arcade - Donkey Kong</li> <li>Arcade - Donkey Kong Jr. T80</li> </ul>"},{"location":"developer/component/#8244-ntsc-audio","title":"8244 NTSC &amp; Audio","text":"<ul> <li>Odyssey 2</li> </ul>"},{"location":"developer/component/#8245-pal-audio","title":"8245 PAL &amp; Audio","text":"<ul> <li>Odyssey 2</li> </ul>"},{"location":"developer/component/#microchip","title":"Microchip","text":""},{"location":"developer/component/#atmega-atxmega","title":"ATMega / ATXMega","text":"<ul> <li>Arduboy</li> </ul>"},{"location":"developer/component/#mos","title":"MOS","text":""},{"location":"developer/component/#6502-and-variants","title":"6502 (and variants)","text":"<ul> <li>Arcade - Asteroids</li> <li>Arcade - Asteroids Deluxe</li> <li>Arcade - A Tetris T65</li> <li>Arcade - Black Widow T65</li> <li>Arcade - Burgertime T65</li> <li>Arcade - Burning Rubber T65</li> <li>Arcade - Canyon Bomber T65</li> <li>Arcade - Centipede T65</li> <li>Arcade - Dominos T65</li> <li>Arcade - Donkey Kong 3 T65</li> <li>Atari 2600 Custom MOS 6502 (aka 6507)</li> <li>Atari 5200 &amp; 800 6502C</li> <li>Atari 7800 Custom MOS 6502 (aka SALLY)</li> <li>Atari Lynx Custom MOS 6502 (aka WDC 65SC02)</li> <li>NES Custom MOS 6502 (aka Ricoh 2A03)</li> </ul>"},{"location":"developer/component/#6522-versatile-interface-adapter","title":"6522 Versatile Interface Adapter","text":"<ul> <li>Vectrex MC68A09</li> </ul>"},{"location":"developer/component/#6532-riot-ram-inputoutput-timer","title":"6532 RIOT - RAM + Input/Output + Timer","text":"<ul> <li>Atari 2600</li> <li>Atari 7800</li> </ul>"},{"location":"developer/component/#motorola","title":"Motorola","text":""},{"location":"developer/component/#6809","title":"6809","text":"<ul> <li>Vectrex MC68A09</li> </ul>"},{"location":"developer/component/#6840-programmable-timer-module","title":"6840 Programmable Timer Module","text":"<ul> <li>Arcade - Frenzy</li> </ul>"},{"location":"developer/component/#68000","title":"68000","text":"<ul> <li>Mega CD</li> <li>NeoGeo</li> <li>Sega Genesis</li> <li>Arcade - Food Fight TG68</li> </ul>"},{"location":"developer/component/#nec","title":"NEC","text":""},{"location":"developer/component/#ucom-43","title":"uCOM-43","text":"<ul> <li>Tomy Scramble</li> </ul>"},{"location":"developer/component/#pd77c25-aka-snes-cart-ic-dsp1-dsp2-dsp3-dsp4","title":"\u00b5PD77C25 aka SNES cart IC DSP1, DSP2, DSP3, DSP4","text":"<ul> <li>SNES</li> </ul>"},{"location":"developer/component/#pd96050-aka-snes-cart-ic-st010","title":"\u00b5PD96050 aka SNES cart IC ST010","text":"<ul> <li>SNES</li> </ul>"},{"location":"developer/component/#nintendo","title":"Nintendo","text":""},{"location":"developer/component/#obc1","title":"OBC1","text":"<ul> <li>SNES SNES Cart IC</li> </ul>"},{"location":"developer/component/#ppu-pixel-processing-unit","title":"PPU - Pixel Processing Unit","text":"<ul> <li>NES RP2A03G</li> <li>SNES S-PPU2</li> </ul>"},{"location":"developer/component/#s-smp-audio","title":"S-SMP Audio","text":"<ul> <li>SNES</li> </ul>"},{"location":"developer/component/#sdd1","title":"SDD1","text":"<ul> <li>SNES SNES Cart IC</li> </ul>"},{"location":"developer/component/#gsu-1","title":"GSU-1","text":"<ul> <li>SNES Superfx SNES Cart IC </li> </ul>"},{"location":"developer/component/#snk","title":"SNK","text":""},{"location":"developer/component/#graphics-snk-pro-a0-snk-lspc2-a2-snk-pro-b0-neo-b1-neo-grc","title":"Graphics - SNK PRO-A0, SNK LSPC2-A2, SNK PRO-B0, NEO-B1, NEO-GRC","text":"<ul> <li>NeoGeo</li> </ul>"},{"location":"developer/component/#texas-instruments","title":"Texas Instruments","text":""},{"location":"developer/component/#sn76489-sound","title":"SN76489 Sound","text":"<ul> <li>ColecoVision &amp; SG-1000</li> <li>Sega Genesis</li> <li>Sega Master System &amp; Game Gear</li> </ul>"},{"location":"developer/component/#tms9928a-ntsc-graphics","title":"TMS9928A NTSC Graphics","text":"<ul> <li>ColecoVision &amp; SG-1000</li> </ul>"},{"location":"developer/component/#tms9929a-pal-graphics","title":"TMS9929A PAL Graphics","text":"<ul> <li>ColecoVision &amp; SG-1000</li> </ul>"},{"location":"developer/component/#wdc-65c816","title":"WDC 65C816","text":"<ul> <li>SNES Ricoh 5A22 - Custom WDC 65C816</li> </ul>"},{"location":"developer/component/#ym2149-ay-3-8910-sound","title":"YM2149 (AY-3-8910) Sound","text":"<ul> <li>Arcade - Arkanoid</li> <li>Arcade - Bagman</li> <li>Bally Midway MCR-1</li> <li>Bally Midway MCR-2</li> <li>Bally Midway MCR-3</li> <li>Arcade - Bombjack</li> <li>Arcade - Burgertime</li> <li>Arcade - Burning Rubber</li> <li>Arcade - Crazy Climber</li> <li>Arcade - Crazy Kong</li> </ul>"},{"location":"developer/component/#yamaha","title":"Yamaha","text":""},{"location":"developer/component/#ym2151-aka-jt51","title":"YM2151 (aka JT51)","text":"<ul> <li>Atari 7800</li> </ul>"},{"location":"developer/component/#ym2413-fm","title":"YM2413 FM","text":"<ul> <li>Sega Master System &amp; Game Gear</li> </ul>"},{"location":"developer/component/#ym2610-audio","title":"YM2610 Audio","text":"<ul> <li>NeoGeo</li> </ul>"},{"location":"developer/component/#ym2612-audio","title":"YM2612 Audio","text":"<ul> <li>Sega Genesis</li> </ul>"},{"location":"developer/component/#ym3438-audio","title":"YM3438 Audio","text":"<ul> <li>Sega Genesis</li> </ul>"},{"location":"developer/component/#ym7101-vdp-video-display-processor","title":"YM7101 VDP Video Display Processor","text":"<ul> <li>Sega Genesis</li> </ul>"},{"location":"developer/component/#zilog","title":"Zilog","text":""},{"location":"developer/component/#z80","title":"Z80","text":"<ul> <li>Astrocade</li> <li>ColecoVision &amp; SG-1000</li> <li>Gameboy Custom Z80 Sharp LR35902</li> <li>Sega Genesis</li> <li>Sega Master System &amp; Game Gear Z80A</li> <li>NeoGeo Z80A</li> <li>Arcade - Arkanoid T80 FPGA Z80</li> <li>Arcade - Bagman T80 FPGA Z80</li> <li>Arcade - Astrocade T80 FPGA Z80</li> <li>Bally Midway MCR-1</li> <li>Bally Midway MCR-2</li> <li>Bally Midway MCR-3</li> <li>Arcade - Berzerk T80 FPGA Z80</li> <li>Arcade - Bombjack</li> <li>Arcade - Crazy Balloon T80</li> <li>Arcade - Crazy Climber T80</li> <li>Arcade - Crazy Kong T80</li> <li>Arcade - Dig Dug T80</li> <li>Arcade - Donkey Kong T80</li> <li>Arcade - Donkey Kong 3 T80</li> <li>Arcade - Donkey Kong Jr. T80</li> <li>Arcade - Dottori Kun T80</li> <li>Arcade - Frenzy T80</li> <li>Arcade - Galaga T80</li> </ul>"},{"location":"developer/component/#simple-logic","title":"Simple Logic","text":"<ul> <li>Arcade - Breakout SN74107, SN74153, SN74175, SN74192, SN74193, SN74279, SN7448, SN7474, SN7483, SN7490, SN7493</li> <li>Arcade - Breakout DM9310, DM9312, DM9316, DM9602, S82S16, Astable 555 Timer, Oneshot 555 Timer,  NAND, NOR, Toggle FF</li> <li>Arcade - Computer Space 74161 16-bit</li> <li>Arcade - Crazy Balloon NE555V</li> </ul>"},{"location":"developer/component/#features","title":"Features","text":"<p>See: SYS HPS IO for ARM &lt;-&gt; FPGA communication details.</p>"},{"location":"developer/component/#adc","title":"ADC","text":"<p>See: Cores Supporting ADC</p>"},{"location":"developer/component/#audio-filters-in-menu","title":"Audio Filters in Menu","text":"<ul> <li>Sega Genesis</li> </ul>"},{"location":"developer/component/#controllers-original-console-controllers","title":"Controllers - Original Console Controllers","text":"<p>See SNAC: User Port (Serial IO)</p>"},{"location":"developer/component/#dip-switches-in-menu","title":"DIP Switches in Menu","text":"<p>Many Arcade Games</p> <ul> <li>Arcade - Galaga T80</li> </ul>"},{"location":"developer/component/#rotate-the-screen","title":"Rotate the Screen","text":"<ul> <li>Atari Lynx</li> </ul>"},{"location":"developer/component/#save-states","title":"Save States","text":"<ul> <li>Gameboy</li> </ul>"},{"location":"developer/component/#secondary-sd-card","title":"Secondary SD Card","text":"<p>See: Secondary SD card</p>"},{"location":"developer/component/#gameboy-link-port-via-userio","title":"Gameboy Link Port via USERIO","text":"<ul> <li>Gameboy</li> </ul>"},{"location":"developer/component/#cheats","title":"Cheats","text":"<ul> <li>Gameboy</li> <li>Sega Master System &amp; Game Gear</li> <li>NES</li> <li>Turbo Grafx 16</li> </ul>"},{"location":"developer/component/#fpga-only-systems-never-manufactured-as-ics","title":"FPGA Only Systems (never manufactured as IC's)","text":"<ul> <li>Chip 8</li> <li>Epoch Galaxy 2</li> <li>Flappy Bird</li> <li>Life</li> </ul>"},{"location":"developer/component/#joystick-fixed-4-8-way","title":"Joystick - Fixed 4 &amp; 8 way","text":"<ul> <li>Arcade - A Tetris T65</li> </ul>"},{"location":"developer/component/#mouse","title":"Mouse","text":"<ul> <li>SNES</li> <li>Turbo Grafx 16</li> </ul>"},{"location":"developer/component/#osd-settings","title":"OSD Settings","text":"<ul> <li>Chess</li> </ul>"},{"location":"developer/component/#random-number-generator","title":"Random Number Generator","text":"<ul> <li>Life</li> </ul>"},{"location":"developer/component/#read-cueimagetrack","title":"Read CUE+(Image/Track)","text":"<ul> <li>Mega CD</li> <li>Turbo Grafx 16</li> </ul>"},{"location":"developer/component/#roms-with-and-without-headers","title":"ROMs With and without Headers","text":"<ul> <li>Turbo Grafx 16</li> </ul>"},{"location":"developer/component/#save-games","title":"Save Games","text":"<ul> <li>NES</li> </ul>"},{"location":"developer/component/#save-states_1","title":"Save States","text":"<ul> <li>NES</li> </ul>"},{"location":"developer/component/#sdram","title":"SDRAM","text":"<p>See: Cores that use SDRAM</p>"},{"location":"developer/component/#speech","title":"Speech","text":"<ul> <li>Arcade - Bagman</li> </ul>"},{"location":"developer/component/#spi","title":"SPI","text":"<ul> <li>Arduboy</li> </ul>"},{"location":"developer/component/#two-bios-options","title":"Two BIOS Options","text":"<ul> <li>Gameboy Advance (Optional)</li> <li>Turbo Grafx 16</li> </ul>"},{"location":"developer/component/#two-displays-hdmi-vga","title":"Two Displays (HDMI + VGA)","text":"<ul> <li>Gameboy Advance 2P</li> </ul>"},{"location":"developer/component/#two-systems-simultaneously","title":"Two Systems Simultaneously","text":"<ul> <li>Gameboy 2P</li> <li>Gameboy Advance 2P</li> </ul>"},{"location":"developer/component/#vector-graphics","title":"Vector Graphics","text":"<ul> <li>Vectrex</li> <li>Arcade - Asteroids Deluxe</li> <li>Arcade - Black Widow</li> </ul>"},{"location":"developer/component/#wave-based-sound-generator","title":"Wave based Sound Generator","text":"<ul> <li>Arcade - Dig Dug T80</li> </ul>"},{"location":"developer/component/#xml-rom-configuration-files","title":"XML ROM Configuration files?","text":"<ul> <li>NeoGeo</li> </ul>"},{"location":"developer/conf_str/","title":"Core Configuration String","text":"<p>MiSTer provides an on-screen display (OSD) that can be toggled on and off by pressing F12 on your keyboard (or OSD button). For each core that is loaded, this menu can be configured to add specific options for that core.</p> <p>The top-level module for the cores is <code>emu</code>. This does NOT mean <code>emu</code> is the top-level module for the project, but rather it is the top-level module for our purposes. The <code>emu</code> module is typically found in the SystemVerilog file (<code>*.sv</code> extension) with the same name as the project. As an example, the Arcade-Galaga project has it's top-level module at <code>Arcade-Galaga.sv</code>.</p> <p>The configuration string is stored in the variable <code>CONF_STR</code> of the <code>emu</code> module. This variable is passed to the <code>hps_io</code> module that handles sending it to the processor to be read when necessary.</p> <p>Each line of the configuration string is delimited with a semicolon.</p> <p>Most cores have a Status Bit Map placed at the top of the <code>CONF_STR</code> section. When developing a core, please use this as it's a helpful reference which aids in collaboration. This reference is edited by fellow developers to communicate which status bits are occupied. Only one option can occupy <code>status[8]</code> so this is important.</p>"},{"location":"developer/conf_str/#status-bit-map","title":"Status Bit Map","text":"<p>For example with nothing occupied:</p> <pre><code>// Status Bit Map:\n//             Upper                             Lower              \n// 0         1         2         3          4         5         6   \n// 01234567890123456789012345678901 23456789012345678901234567890123\n// 0123456789ABCDEFGHIJKLMNOPQRSTUV 0123456789ABCDEFGHIJKLMNOPQRSTUV\n// \n</code></pre> <p>If you add a status bit option like <code>O89</code> to the core configuration string, this is going to use the first group of status bits on the left since the \"O\" for option is capitalized (marked Upper). Then it's going to use 8 and 9, this is from the bottom row (which is alphanumeric). So you would update the index after using these like so:</p> <pre><code>// Status Bit Map:\n//             Upper                             Lower              \n// 0         1         2         3          4         5         6   \n// 01234567890123456789012345678901 23456789012345678901234567890123\n// 0123456789ABCDEFGHIJKLMNOPQRSTUV 0123456789ABCDEFGHIJKLMNOPQRSTUV\n//         XX\n</code></pre> <p>This will communicate to other developers that <code>status[9:8]</code> are occupied and should not be used.</p> <p>Status Bit <code>[0]</code> is reserved as a Soft Reset.</p>"},{"location":"developer/conf_str/#valid-options-for-the-menu","title":"Valid options for the menu","text":"<p><code>[]</code> - means optional parameter</p> <ul> <li><code>C[,{Text}]</code> - Enables a cheat menu entry with the label <code>{Text}</code>.</li> <li><code>CHEAT</code> - like DIP, for arcades with a cheat system</li> <li><code>D{Index}</code> - Prefix which disables the option if <code>menumask[Index]</code> is set.</li> <li><code>d{Index}</code> - Same as 'D', but disables the option if <code>menumask[Index]</code> is NOT set.</li> <li><code>DIP</code> - in arcade cores, this will display the DIP menu from the MRA</li> <li><code>F[S][#],{Ext}[,{Text}][,{Address}]</code> - Load file button. <ul> <li><code>{Ext}</code> - a concatenated list of 3 character file extensions. For example, <code>BINGEN</code> would be <code>BIN</code> and <code>GEN</code> extensions.</li> <li>Optional <code>{Text}</code> string is the text that is displayed before the extensions like \"Load RAM\". If <code>{Text}</code> is not specified, then default is \"Load *\".</li> <li>Optional <code>[S]</code> - core supports save files, load a file, and mount a save for reading or writing</li> <li><code>#</code> is explicit index (or index is generated from line number if index not given).</li> <li>Optional <code>{Address}</code> - load file directly into DDRAM at this address</li> <li>ioctl_index from hps_io will be: ioctl_index[5:0] = index(explicit or auto), ioctl_index[7:6] = extension index</li> </ul> </li> <li> <p><code>FC[#],{Ext}[,{Text}][,{Address}]</code> - Open file and remember it, useful for remembering an alternative rom, config, or other type of file. See F for how the options work.</p> </li> <li> <p><code>H{Index}</code> - Prefix which hides the option if <code>menumask[Index]</code> is set.</p> </li> <li><code>h{Index}</code> - Same as <code>H</code>, but hides the option if <code>menumask[Index]</code> is NOT set.</li> <li><code>O{Index1}[{Index2}],{Name},{Options...}</code> - Option button that allows you to select between various choices.<ul> <li><code>{Index1}</code> and <code>{Index2}</code> are values from 0-9 and A-V (like Hex but it extends from A-V instead of A-F). This represents all 31 bits. First and second index are the range of bits that will be set in the status register.</li> <li><code>{Name}</code> is what is shown to describe the option.</li> <li><code>{Options...}</code> - a list of comma separated options.</li> </ul> </li> <li><code>P{#},{Title}</code> - Creates sub-page for options with <code>{Title}</code>.</li> <li><code>P{#}</code> - Prefix to place the option into specific <code>{#}</code> page. This is added before <code>O#</code> but after something like <code>d#</code>. (e.g. <code>\"d5P1o2,Vertical Crop,Disabled,216p(5x);\",</code> is correct and <code>\"P1d5o2,Vertical Crop,Disabled,216p(5x);\",</code> is incorrect and the menu options will not work.)</li> <li><code>R{Index},{Name}</code> - Same as T option but closes the OSD after selecting. Convenient for Reset option.</li> <li><code>S{Slot},{Ext}[,{Text}]</code> - Mount SD card button. <ul> <li><code>{Slot}</code> - a value from 0-3. Up to four images can be mounted at the same time.</li> <li><code>{Ext}</code> - same as in <code>F</code> option.</li> <li>(Optional) <code>{Text}</code> - The text that is displayed before the extensions like \"Load RAM\". If <code>{Text}</code> is not specified, then default is \"Mount *\".</li> </ul> </li> <li><code>T{Index},{Name}</code> - Trigger button. This is a simple button that will pulse HIGH of specified <code>{Index}</code> bit in status register. A perfect example of this is for a reset button.<ul> <li><code>{Name}</code> is the text that describes the button function.</li> </ul> </li> <li><code>-[,TEXT]</code> - empty (or with <code>TEXT</code>) line.</li> <li>Lower case options <code>o</code>,<code>t</code>,<code>r</code> equal their upper case variants with adding 32 to status bit indexes.</li> </ul>"},{"location":"developer/conf_str/#non-osd-options","title":"Non-OSD options","text":"<p>These must be placed at the bottom of the configuration string:</p> <ul> <li><code>J[1],{Button1}[,{Button2},...]</code> - J1 means lock keyboard to joystick emulation mode. Useful for keyboard-less systems such as consoles. {Button1},{Button2},... is list of joystick buttons used in the core. Up to 12 buttons can be listed. Analog axis are not defined here. The user just needs to map them through the Menu core.</li> <li><code>jn,{SNES Button Name1},[,{SNES Button2},...]</code> - this sets the default mapping of the buttons. ie: jn,A would map joystick bit 4 to the A button on a SNES style controller automatically</li> <li><code>jp</code> - same as <code>jn</code> but used when <code>gamepad_defaults=1</code> in <code>MiSTer.INI</code>. Typically refers to positional mapping relative to a SNES controller</li> <li><code>V,{Version String}</code> - Version string. {Version String} is the version string. Takes the core name and appends version string for name to display.</li> <li><code>I,INFO1,INFO2,...,INFO255</code> - <code>INFO1-INFO255</code> lines to display as OSD info (top left corner of screen).</li> <li><code>DEFMRA,{mra name}</code> - default MRA (ie: Puckman.mra) to be used when core is uploaded by USB blaster (debug)</li> </ul>"},{"location":"developer/conf_str/#jn-vs-jp-and-mapping-conventions","title":"jn vs. jp and mapping conventions","text":"<ul> <li>jn mapping is the default.</li> <li>jp mapping is used when the INI file has gamepad_defaults=1</li> <li>the only difference in the two mappings is the \"philosophy\" of how they are expected to work</li> </ul> <p>The difference is one of convention when mapping buttons:</p> <ul> <li>jn is name-base mapping </li> <li>jp is position-based mapping</li> </ul> <p>What does this mean?</p> <p>Consider how the internal gamepad is defined on MiSTer:</p> <ol> <li>Internally, controllers are mapped in the menu core to a SNES-style gamepad </li> <li>The button order on the internal MiSTer gamepad is ABXYLR + Start + Select</li> <li>That is: button 1=A, button 2=B, and so on.</li> </ol> <p>With \"jn\" mapping:</p> <ul> <li>the convention is to map button A of the core to the internal \"SNES A\" button.</li> <li>If the core has no button \"A\", this would be the first button. </li> <li>Second button would be \"SNES B\", and so forth.</li> <li>This is because the name or order of the button matches the original definition (ABYXLR etc)</li> </ul> <p>With \"jp\" mapping:</p> <ul> <li>the convention is to consider the physical location of each button</li> <li>For a Genesis 3-button controller that has A, B, C as buttons, mapping would be \"SNES Y, SNES B, SNES A\"</li> <li>This is because YBA on a SNES gamepad are the lower 3 buttons of the controller</li> </ul>"},{"location":"developer/corenames/","title":"Core Names","text":"<p>This is a list of the core repositories and the core internal names that are used for the mister.ini core exceptions.</p> Repository URL Internal Name All Arcade Cores (if an MRA is used) arcade https://github.com/MiSTer-devel/AcornAtom_MiSTer AcornAtom https://github.com/MiSTer-devel/AcornElectron_MiSTer AcornElectron https://github.com/MiSTer-devel/ADCTest_MiSTer ADCTest https://github.com/MiSTer-devel/AdventureVision_MiSTer AVision https://github.com/MiSTer-devel/AliceMC10_MiSTer AliceMC10 https://github.com/MiSTer-devel/Altair8800_Mister Altair8800 https://github.com/MiSTer-devel/Amstrad-PCW_MiSTer Amstrad PCW https://github.com/MiSTer-devel/Amstrad_MiSTer Amstrad https://github.com/MiSTer-devel/ao486_MiSTer AO486 https://github.com/MiSTer-devel/Apogee_MiSTer APOGEE https://github.com/MiSTer-devel/Apple-II_MiSTer Apple-II https://github.com/MiSTer-devel/Apple-I_MiSTer APPLE-I https://github.com/MiSTer-devel/Aquarius_MISTer AQUARIUS https://github.com/MiSTer-devel/Arcade-Arkanoid_MISTer ARKANOID https://github.com/MiSTer-devel/Arcade-AsteroidsDeluxe_MiSTer ASTDELUX https://github.com/MiSTer-devel/Arcade-Asteroids_MiSTer ASTEROID https://github.com/MiSTer-devel/Arcade-Astrocade_MiSTer ASTROCADE https://github.com/MiSTer-devel/Arcade-ATetris_MiSTer ATetris https://github.com/MiSTer-devel/Arcade-Athena_MiSTer Athena https://github.com/MiSTer-devel/Arcade-Bagman_MiSTer BAGMAN https://github.com/MiSTer-devel/Arcade-Berzerk_MiSTer BERZERK https://github.com/MiSTer-devel/Arcade-BlackWidow_MiSTer BWIDOW https://github.com/MiSTer-devel/Arcade-Blockade_MiSTer BLOCKADE https://github.com/MiSTer-devel/Arcade-BombJack_MiSTer BMBJCK https://github.com/MiSTer-devel/Arcade-Breakout_MiSTer BREAKOUT https://github.com/MiSTer-devel/Arcade-BurgerTime_MiSTer BTIME https://github.com/MiSTer-devel/Arcade-BurningRubber_MiSTer BRUBBR https://github.com/MiSTer-devel/Arcade-CanyonBomber_MiSTer CANYON https://github.com/MiSTer-devel/Arcade-Cave_MiSTer cave https://github.com/MiSTer-devel/Arcade-Centipede_MiSTer CENTIPED https://github.com/MiSTer-devel/Arcade-ComputerSpace_MiSTer COMSPC https://github.com/MiSTer-devel/Arcade-Cosmic_MiSTer COSMIC https://github.com/MiSTer-devel/Arcade-CrazyBalloon_MiSTer CRBALLOON https://github.com/MiSTer-devel/Arcade-CrazyClimber_MiSTer CCLIMB https://github.com/MiSTer-devel/Arcade-CrazyKong_MiSTer CKONG https://github.com/MiSTer-devel/Arcade-Defender_MiSTer DFNDR https://github.com/MiSTer-devel/Arcade-DigDug_MiSTer DIGDUG https://github.com/MiSTer-devel/Arcade-Dominos_MiSTer DOMINOS https://github.com/MiSTer-devel/Arcade-DonkeyKong3_MiSTer DKONG3 https://github.com/MiSTer-devel/Arcade-DonkeyKongJunior_MiSTer DKONGJ https://github.com/MiSTer-devel/Arcade-DonkeyKong_MiSTer DKONG https://github.com/MiSTer-devel/Arcade-DottoriKun_MiSTer DOTRIKUN https://github.com/MiSTer-devel/Arcade-Druaga_MiSTer Druaga https://github.com/MiSTer-devel/Arcade-Finalizer_MiSTer FINALIZR https://github.com/MiSTer-devel/Arcade-FoodFight_MiSTer FoodFight https://github.com/MiSTer-devel/Arcade-Frenzy_MiSTer FRENZY https://github.com/MiSTer-devel/Arcade-Galaga_MiSTer Galaga https://github.com/MiSTer-devel/Arcade-Galaxian_MiSTer GALAXN https://github.com/MiSTer-devel/Arcade-Gaplus_MiSTer GAPLUS https://github.com/MiSTer-devel/Arcade-Gauntlet_MiSTer GAUNTLET https://github.com/MiSTer-devel/Arcade-Gyruss_MiSTer GYRUSS https://github.com/MiSTer-devel/Arcade-IremM62_MiSTer IREMM62 https://github.com/MiSTer-devel/Arcade-IronHorse_MiSTer IRONHORSE https://github.com/MiSTer-devel/Arcade-Jackal_MiSTer JACKAL https://github.com/MiSTer-devel/Arcade-Jailbreak_MiSTer JAILBREAK https://github.com/MiSTer-devel/Arcade-Joust2_MiSTer JOUST2 https://github.com/MiSTer-devel/Arcade-LadyBug_MiSTer LADYBG https://github.com/MiSTer-devel/Arcade-LunarLander_MiSTer LLANDER https://github.com/MiSTer-devel/Arcade-MarioBros_MiSTer MARIO https://github.com/MiSTer-devel/Arcade-MCR1_MiSTer MCR1 https://github.com/MiSTer-devel/Arcade-MCR2_MiSTer MCR2 https://github.com/MiSTer-devel/Arcade-MCR3Mono_MiSTer MCR3MONO https://github.com/MiSTer-devel/Arcade-MCR3Scroll_MiSTer MCR3SC https://github.com/MiSTer-devel/Arcade-MCR3_MiSTer MCR3 https://github.com/MiSTer-devel/Arcade-MoonPatrol_MiSTer MOONPT https://github.com/MiSTer-devel/Arcade-MrDo_MiSTer Mr Do! https://github.com/MiSTer-devel/Arcade-MysticMarathon_MiSTer MYSTICMARATHON https://github.com/MiSTer-devel/Arcade-NinjaKun_MiSTer NinjaKun https://github.com/MiSTer-devel/Arcade-Pacman_MiSTer PACMAN https://github.com/MiSTer-devel/Arcade-Pengo_MiSTer PENGO https://github.com/MiSTer-devel/Arcade-Phoenix_MiSTer PHNX https://github.com/MiSTer-devel/Arcade-Pleiads_MiSTer PLEIADS https://github.com/MiSTer-devel/Arcade-PolyPlay_MiSTer Poly-Play https://github.com/MiSTer-devel/Arcade-Pong_MiSTer PONG https://github.com/MiSTer-devel/Arcade-Pooyan_MiSTer POOYAN https://github.com/MiSTer-devel/Arcade-Popeye_MiSTer POPEYE https://github.com/MiSTer-devel/Arcade-QBert_MiSTer QBert https://github.com/MiSTer-devel/Arcade-RallyX_MiSTer NRALLYX https://github.com/MiSTer-devel/Arcade-RiverPatrol_MiSTer RPATROL https://github.com/MiSTer-devel/Arcade-Robotron_MiSTer ROBTRN https://github.com/MiSTer-devel/Arcade-RushnAttack_MiSTer RshnAtk https://github.com/MiSTer-devel/Arcade-ScooterShooter_MiSTer SSHOOTER https://github.com/MiSTer-devel/Arcade-Scramble_MiSTer SCRMBL https://github.com/MiSTer-devel/Arcade-SEGASYS1_MiSTer SEGASYS1 https://github.com/MiSTer-devel/Arcade-SilverLand_MiSTer SILVLAND https://github.com/MiSTer-devel/Arcade-SkySkipper_MiSTer POPEYE https://github.com/MiSTer-devel/Arcade-SNK_TripleZ80_MiSTer SNK_TripleZ80 https://github.com/MiSTer-devel/Arcade-SolomonsKey_MiSTer SolmnsKey https://github.com/MiSTer-devel/Arcade-SpaceInvaders_MiSTer INVADERS https://github.com/MiSTer-devel/Arcade-SpaceRace_MiSTer SPACERACE https://github.com/MiSTer-devel/Arcade-Sprint1_MiSTer SPRINT1 https://github.com/MiSTer-devel/Arcade-Sprint2_MiSTer SPRINT2 https://github.com/MiSTer-devel/Arcade-Subs_MiSTer SUBS https://github.com/MiSTer-devel/Arcade-SuperBreakout_MiSTer SBRKOUT https://github.com/MiSTer-devel/Arcade-Tecmo_MiSTer Tecmo https://github.com/MiSTer-devel/Arcade-TIAMC1_MiSTer TIA-MC1 https://github.com/MiSTer-devel/Arcade-TimePilot84_MISTer TP84 https://github.com/MiSTer-devel/Arcade-TimePilot_MiSTer TIMEPLT https://github.com/MiSTer-devel/Arcade-TNKIII_MiSTer SNK_TripleZ80 https://github.com/MiSTer-devel/Arcade-TraverseUSA_MiSTer TRAVRUSA https://github.com/MiSTer-devel/Arcade-TurkeyShoot_MiSTer TURKEYSHOOT https://github.com/MiSTer-devel/Arcade-Ultratank_MiSTer ULTRATNK https://github.com/MiSTer-devel/Arcade-VBall_MiSTer VBall https://github.com/MiSTer-devel/Arcade-Xevious_MiSTer Xevious https://github.com/MiSTer-devel/Arcade-Zaxxon_MiSTer ZAXXON https://github.com/MiSTer-devel/Arcade-ZigZag_MiSTer ZIGZAG https://github.com/MiSTer-devel/Arcadia_MiSTer Arcadia https://github.com/MiSTer-devel/Archie_MiSTer ARCHIE https://github.com/MiSTer-devel/Arduboy_MiSTer Arduboy https://github.com/MiSTer-devel/Astrocade_MiSTer Astrocade https://github.com/MiSTer-devel/Atari2600_MiSTer ATARI2600 https://github.com/MiSTer-devel/Atari7800_MiSTer ATARI7800 https://github.com/MiSTer-devel/Atari800_MiSTer ATARI5200 https://github.com/MiSTer-devel/Atari800_MiSTer ATARI800 https://github.com/MiSTer-devel/AtariLynx_MiSTer AtariLynx https://github.com/MiSTer-devel/AtariST_MiSTer AtariST https://github.com/MiSTer-devel/AY-3-8500-MiSTer AY-3-8500 https://github.com/MiSTer-devel/BBCMicro_MiSTer BBCMicro https://github.com/MiSTer-devel/BK0011M_MiSTer BK0011M https://github.com/MiSTer-devel/C16_MiSTer C16 https://github.com/MiSTer-devel/C64_MiSTer C64 https://github.com/MiSTer-devel/ChannelF_MiSTer ChannelF https://github.com/MiSTer-devel/Chess_MiSTer Chess https://github.com/MiSTer-devel/Chip8_MiSTer Chip8 https://github.com/MiSTer-devel/CoCo2_MiSTer CoCo2 https://github.com/MiSTer-devel/CoCo3_MiSTer COCO3 https://github.com/MiSTer-devel/ColecoAdam_MiSTer Adam https://github.com/MiSTer-devel/ColecoVision_MiSTer Coleco https://github.com/MiSTer-devel/EDSAC_MiSTer EDSAC https://github.com/MiSTer-devel/EpochGalaxy2_MiSTer EpochGalaxyII https://github.com/MiSTer-devel/FlappyBird_MiSTer FLAPPY https://github.com/MiSTer-devel/Galaksija_MiSTer Galaksija https://github.com/MiSTer-devel/Gameboy_MiSTer GAMEBOY https://github.com/MiSTer-devel/GBA_MiSTer GBA https://github.com/MiSTer-devel/Genesis_MiSTer Genesis https://github.com/MiSTer-devel/GnW_MiSTer Game &amp; Watch https://github.com/MiSTer-devel/InputTest_MiSTer InputTest https://github.com/MiSTer-devel/Interact_MiSTer Interact https://github.com/MiSTer-devel/Intv_MiSTer Intellivision https://github.com/MiSTer-devel/Jupiter_MiSTer Jupiter https://github.com/MiSTer-devel/Laser310_MiSTer Laser https://github.com/MiSTer-devel/Life_MiSTer GameOfLife https://github.com/MiSTer-devel/Lynx48_MiSTer Lynx48 https://github.com/MiSTer-devel/MacPlus_MiSTer MACPLUS https://github.com/MiSTer-devel/MegaCD_MiSTer MegaCD https://github.com/MiSTer-devel/MemTest_MiSTer MEMTEST https://github.com/MiSTer-devel/Menu_MiSTer MENU https://github.com/MiSTer-devel/Minimig-AGA_MiSTer Minimig https://github.com/MiSTer-devel/MSX_MiSTer MSX https://github.com/MiSTer-devel/MultiComp_MiSTer MultiComp https://github.com/MiSTer-devel/NeoGeo_MiSTer NEOGEO https://github.com/MiSTer-devel/NES_MiSTer NES https://github.com/MiSTer-devel/Odyssey2_MiSTer ODYSSEY2 https://github.com/MiSTer-devel/OndraSPO186_MiSTer Ondra_SPO186 https://github.com/MiSTer-devel/Orao_MiSTer ORAO https://github.com/MiSTer-devel/Oric_MiSTer Oric https://github.com/MiSTer-devel/PC88_MiSTer PC8801 https://github.com/MiSTer-devel/PDP1_MiSTer PDP1 https://github.com/MiSTer-devel/PET2001_MiSTer PET2001 https://github.com/MiSTer-devel/PMD85_MiSTer PMD85 https://github.com/MiSTer-devel/PSX_MiSTer PSX https://github.com/MiSTer-devel/QL_MiSTer QL https://github.com/MiSTer-devel/RX-78_MiSTer RX78 https://github.com/MiSTer-devel/S32X_MiSTer S32X https://github.com/MiSTer-devel/SAM-Coupe_MiSTer SAMCOUPE https://github.com/MiSTer-devel/SharpMZ_MiSTer SHARP MZ SERIES https://github.com/MiSTer-devel/SlugCross_MiSTer SlugCross https://github.com/MiSTer-devel/SMS_MiSTer SMS https://github.com/MiSTer-devel/SNES_MiSTer SNES https://github.com/MiSTer-devel/SordM5_MiSTer Sord M5 https://github.com/MiSTer-devel/Specialist_MiSTer SPMX https://github.com/MiSTer-devel/SuperVision_MiSTer SuperVision https://github.com/MiSTer-devel/SVI328_MiSTer SVI328 https://github.com/MiSTer-devel/TatungEinstein_MiSTer TatungEinstein https://github.com/MiSTer-devel/Template_MiSTer MyCore https://github.com/MiSTer-devel/TI-99_4A_MiSTer Coleco https://github.com/MiSTer-devel/TI-99_4A_MiSTer TI-99_4A https://github.com/MiSTer-devel/TomyScramble_MiSTer TomyScramble https://github.com/MiSTer-devel/TRS-80_MiSTer TRS-80 https://github.com/MiSTer-devel/TSConf_MiSTer TSConf https://github.com/MiSTer-devel/TurboGrafx16_MiSTer TGFX16 https://github.com/MiSTer-devel/UK101_MiSTer UK101 https://github.com/MiSTer-devel/VC4000_MiSTer VC4000 https://github.com/MiSTer-devel/Vector-06C_MiSTer VECTOR06 https://github.com/MiSTer-devel/Vectrex_MiSTer VECTREX https://github.com/MiSTer-devel/VIC20_MiSTer VIC20 https://github.com/MiSTer-devel/WonderSwan_MiSTer WonderSwan https://github.com/MiSTer-devel/X68000_MiSTer X68000 https://github.com/MiSTer-devel/ZX-Spectrum_MISTer Spectrum https://github.com/MiSTer-devel/ZX81_MiSTer ZX81 https://github.com/MiSTer-devel/ZXNext_MISTer ZXNext"},{"location":"developer/debugging/","title":"Debugging (USB Blaster)","text":"<p>While developing the core, it's convenient to upload it through USB blaster(JTAG) port directly from Quartus. MiSTer supports USB Blaster and automatically reloads Linux part for uploaded core. Since Linux requires reboot (for better stability), you may notice longer time to start the core. This is normal. It's advised to have console connected to MiSTer to control the booting process. Once core compiled in RBF format and put into SD card, loading speed will be fast.</p>"},{"location":"developer/debugging/#configuring-usb-blaster-on-linux","title":"Configuring USB Blaster on Linux","text":"<p>Although there is no need for drivers on linux, by default only root user can access the cable. In order to use it as a regular user just add a file called <code>/etc/udev/rules.d/92-usbblaster.rules</code> with the following content:</p> <pre><code># USB-Blaster \nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"09fb\", ATTR{idProduct}==\"6001\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"09fb\", ATTR{idProduct}==\"6002\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"09fb\", ATTR{idProduct}==\"6003\", MODE=\"0666\"\n\n# USB-Blaster II\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"09fb\", ATTR{idProduct}==\"6010\", MODE=\"666\"\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"09fb\", ATTR{idProduct}==\"6810\", MODE=\"666\"\n</code></pre>"},{"location":"developer/emu/","title":"overview of emu module","text":"<p>On MiSTer the top level is inside sys/sys_top.v. When writing or porting a MiSTer core, instead of telling quartus to use your own top, quartus uses sys_top, and it will call a module called emu that you need to provide. This will document the parameters that your top level will need to implement. The MiSTer sys_top will handle a lot of useful things like audio and HDMI video.</p>"},{"location":"developer/emu/#instantiating-your-core","title":"Instantiating your core","text":"<p>Tour core should be inside an emu block, see the Template Top Level for an example. Some of the contents of this article regarding the code used might be outdated, always reference the Template in the link above for the latest framework version.</p>"},{"location":"developer/emu/#master-input-clock","title":"Master input clock","text":"<pre><code>    //Master input clock\n    input         CLK_50M,\n</code></pre> <p>Most cores will use the PLL which is instantiated from the sys folder, but the pll needs to live in the rtl folder off of the top level (at the same level as sys). This choice was made so that you can update the sys folder without losing the PLL configuration.</p> <p>NOTE: For full compatibility with the existing sys architecture, keep the pll named 'pll' and the instance 'pll' as shown below. You can use the megawizard to edit the pll to modify the required frequencies etc... (including adding more outputs). If you don't have a pll create a new one, or use the one from the template. The sys_top.sdc requires the name for the pll and the instance name be correct.</p> <pre><code>wire clk_sys;\npll pll\n(\n    .refclk(CLK_50M),\n    .rst(0),\n    .outclk_0(clk_sys)\n);\n</code></pre>"},{"location":"developer/emu/#reset","title":"Reset","text":"<pre><code>    //Async reset from top-level module.\n    //Can be used as initial reset.\n    input         RESET,\n</code></pre> <p>Normally the RESET line is used in conjunction with the button on the I/O board, as well as a status flag. Most cores use status bit 0 (this is reserved for a Soft Reset), and a CONF_STR that includes an option like: <code>\"R0,Reset;\"</code></p> <pre><code>wire reset = RESET | status[0] | buttons[1];\n</code></pre>"},{"location":"developer/emu/#hps-bus","title":"HPS Bus","text":"<p>The HPS Bus is used to communicate with the ARM processor. It is passed into the hps_io module which will do a bunch of work for the core, and provide a simpler interface to use. Include the hps_io module in the emu module. See hps_io</p> <pre><code>    //Must be passed to hps_io module\n    inout  [45:0] HPS_BUS,\n</code></pre>"},{"location":"developer/emu/#video-signals","title":"Video Signals","text":"<p>The top level module that calls emu includes the high quality HDMI scaler, and provides a fairly simple interface to output video on MiSTer. There are a number of other helper modules that can be included to provide proper video output.</p> <p>At the simplest level provide a CLK_VIDEO, and/or CE_PIXEL (CE_PIXEL can be set to 1 if your video clk is correct). The video clock needs to be greater than 40MHZ for all of the features to work. </p> <p>Generally the video signals want to be whatever the native resolution of the machine that is being emulated. ie: an old 8bit computer will generally output 15khz video. MiSTer has a scandoubler built in that will create VGA compatible output if the user wants that on their VGA port. To include this scandoubler in the core you will usually use the video_mixer or arcade_video modules. The forced_scandoubler signal comes from the hps_io module. Some users want to use a 15khz monitor with 15khz cores, so the core itself shouldn't have a scandoubler built in. Some original devices may have had higher resolution output, if that native output was greater than 15khz, it is ok to output it natively through the VGA signals.  The scaler will use the VGA_DE (usually based on HBLANK and VBLANK <code>assign VGA_DE = ~(HBlank | VBlank);</code>)  to scale it up to HDMI based on the settings in the ini file.</p>"},{"location":"developer/emu/#video-mixer","title":"Video Mixer","text":"<p>Use the Video Mixer Module to add MiSTer framework standard features like gamma support, scaling, and scandoubling.</p>"},{"location":"developer/emu/#video-freak","title":"Video Freak","text":"<p>Use the Video Freak Module to add cropping and scaling</p>"},{"location":"developer/emu/#arcade-video","title":"Arcade Video","text":"<p>Use the Arcade Video Module for arcade cores to support rotation, scandoubling, and most of the features that are in video_mixer. This file also includes screen_rotate which is used for vertical arcade games to allow rotation over HDMI.</p> <pre><code>    //Base video clock. Usually equals to CLK_SYS.\n    output        CLK_VIDEO,\n\n    //Multiple resolutions are supported using different CE_PIXEL rates.\n    //Must be based on CLK_VIDEO\n    output        CE_PIXEL,\n\n    //Video aspect ratio for HDMI. Most retro systems have ratio 4:3.\n    //if VIDEO_ARX[12] or VIDEO_ARY[12] is set then [11:0] contains scaled size instead of aspect ratio.\n    output [12:0] VIDEO_ARX,\n    output [12:0] VIDEO_ARY,\n\n    output  [7:0] VGA_R,\n    output  [7:0] VGA_G,\n    output  [7:0] VGA_B,\n    output        VGA_HS,\n    output        VGA_VS,\n    output        VGA_DE,    // = ~(VBlank | HBlank)\n    output        VGA_F1,\n    output [1:0]  VGA_SL,\n    output        VGA_SCALER, // Force VGA scaler\n\n    input  [11:0] HDMI_WIDTH,\n    input  [11:0] HDMI_HEIGHT,\n    output        HDMI_FREEZE,\n\n`ifdef MISTER_FB\n    // Use framebuffer in DDRAM (USE_FB=1 in qsf)\n    // FB_FORMAT:\n    //    [2:0] : 011=8bpp(palette) 100=16bpp 101=24bpp 110=32bpp\n    //    [3]   : 0=16bits 565 1=16bits 1555\n    //    [4]   : 0=RGB  1=BGR (for 16/24/32 modes)\n    //\n    // FB_STRIDE either 0 (rounded to 256 bytes) or multiple of pixel size (in bytes)\n    output        FB_EN,\n    output  [4:0] FB_FORMAT,\n    output [11:0] FB_WIDTH,\n    output [11:0] FB_HEIGHT,\n    output [31:0] FB_BASE,\n    output [13:0] FB_STRIDE,\n    input         FB_VBL,\n    input         FB_LL,\n    output        FB_FORCE_BLANK,\n\n`ifdef MISTER_FB_PALETTE\n    // Palette control for 8bit modes.\n    // Ignored for other video modes.\n    output        FB_PAL_CLK,\n    output  [7:0] FB_PAL_ADDR,\n    output [23:0] FB_PAL_DOUT,\n    input  [23:0] FB_PAL_DIN,\n    output        FB_PAL_WR,\n`endif\n`endif\n</code></pre>"},{"location":"developer/emu/#leds-on-the-io-board","title":"LEDs on the IO board","text":"<pre><code>    output        LED_USER,  // 1 - ON, 0 - OFF.\n\n    // b[1]: 0 - LED status is system status OR'd with b[0]\n    //       1 - LED status is controled solely by b[0]\n    // hint: supply 2'b00 to let the system control the LED.\n    output  [1:0] LED_POWER,\n    output  [1:0] LED_DISK,\n</code></pre>"},{"location":"developer/emu/#buttons-on-io-board","title":"Buttons on IO board","text":"<pre><code>    // I/O board button press simulation (active high)\n    // b[1]: user button\n    // b[0]: osd button\n    output  [1:0] BUTTONS,\n</code></pre>"},{"location":"developer/emu/#audio","title":"Audio","text":"<pre><code>    input         CLK_AUDIO, // 24.576 MHz\n    output [15:0] AUDIO_L,\n    output [15:0] AUDIO_R,\n    output        AUDIO_S,   // 1 - signed audio samples, 0 - unsigned\n    output  [1:0] AUDIO_MIX, // 0 - no mix, 1 - 25%, 2 - 50%, 3 - 100% (mono)\n</code></pre>"},{"location":"developer/emu/#a-to-d-converter","title":"A to D converter","text":"<p>Used for tape input and other things. An extra module on MiSTer that provides an analog audio jack, and conversion to digial signals.</p> <pre><code>    //ADC\n    inout   [3:0] ADC_BUS,\n</code></pre>"},{"location":"developer/emu/#signals-for-the-second-sd-card","title":"Signals for the second SD card","text":"<pre><code>    //SD-SPI\n    output        SD_SCK,\n    output        SD_MOSI,\n    input         SD_MISO,\n    output        SD_CS,\n    input         SD_CD,\n</code></pre>"},{"location":"developer/emu/#ddr3-memory-subsystem","title":"DDR3 Memory Subsystem","text":"<pre><code>    //High latency DDR3 RAM interface\n    //Use for non-critical time purposes\n    output        DDRAM_CLK,          // any clock, no restrictions. Typically main core clock\n    input         DDRAM_BUSY,         // every read and write request is only accepted in a cycle where busy is low\n    output  [7:0] DDRAM_BURSTCNT,     // amount of words to be written/read. Maximum is 128\n    output [28:0] DDRAM_ADDR,         // starting address for read/write. In case of burst, the addresses will internally count up\n    input  [63:0] DDRAM_DOUT,         // data coming from (burst) read\n    input         DDRAM_DOUT_READY,   // high for 1 clock cycle for every 64 bit dataword requested via (burst) read request\n    output        DDRAM_RD,           // request read at DDRAM_ADDR and DDRAM_BURSTCNT length\n    output [63:0] DDRAM_DIN,          // data word to be written\n    output  [7:0] DDRAM_BE,           // byte enable for each of the 8 bytes in DDRAM_DIN, only used for writing. (1=write, 0=ignore)\n    output        DDRAM_WE,           // request write at DDRAM_ADDR with DDRAM_DIN data and DDRAM_BE mask\n</code></pre>"},{"location":"developer/emu/#writing-to-ddr3","title":"Writing to DDR3","text":"<p>The internal DDR3 controller handles writes very efficiently, so burst writes are typically not required. To write, DDRAM_WE should be high for 1 clock cycle whenever DDRAM_BUSY is low.  It will write the data in DDRAM_DIN to DDRAM_ADDR with respect to DDRAM_BE. For a single write, DDRAM_BURSTCNT should be 1. Multiple writes can also be issued without pausing when DDRAM_BURSTCNT = 1.</p>"},{"location":"developer/emu/#reading-from-ddr3","title":"Reading from DDR3","text":"<p>To read one or multiple 64 bit words, DDRAM_RD must be high for 1 clock cycle, while DDRAM_BUSY is low. It will read DDRAM_BURSTCNT 64 bit words from DDRAM_ADDR(counting up for bursts) and provide the results, typically one each clock cycle, at DDRAM_DOUT with DDRAM_DOUT_READY = 1, when the read is valid. Every read request will have a latency of multiple cycles. Something like 20 cycles @ 100Mhz is a typical value, but it can be way longer. DDR3 read should therefore be used with higher DDRAM_BURSTCNT to make use of the high bandwidth, whenever possible.</p>"},{"location":"developer/emu/#ddr3-busy-signal","title":"DDR3 Busy signal","text":"<p>DDRAM_BUSY acts like an ignore for the request ports. So whenever this signal is high, no request can be issued in this clock cycle. However, having a request pending doesn't lead to any problem, so it is uncritical to e.g. set DDRAM_RD = 1 in a clocked process and only clear it back to 0 when DDRAM_BUSY = 0. This way, the request signals can be clocked instead of being combinatorial, leading to higher possible clock speed and less problems with timing closure.</p>"},{"location":"developer/emu/#single-and-dual-sdram-interface","title":"Single and Dual SDRAM interface","text":"<p>For full understanding of the SDRAM interface you will need to look at the specifications for the SDRAM chip. Also, the hardware may be useful, here is the Schematic. It is useful to look through some code that already runs on MiSTer:</p> <p>Look through the data sheet for the 32MB module. The 64MB module data sheet isn't as detailed.</p> <p>Some examples of SDRAM modules:</p> <ul> <li>single port direct usage: Gameboy</li> <li>multi port request/response: Gameboy Advance</li> <li>complex bank machine: JT Frame</li> </ul> <pre><code>    //SDRAM interface with lower latency\n    output        SDRAM_CLK,\n    output        SDRAM_CKE,\n    output [12:0] SDRAM_A,\n    output  [1:0] SDRAM_BA,\n    inout  [15:0] SDRAM_DQ,\n    output        SDRAM_DQML,\n    output        SDRAM_DQMH,\n    output        SDRAM_nCS,\n    output        SDRAM_nCAS,\n    output        SDRAM_nRAS,\n    output        SDRAM_nWE,\n\n`ifdef MISTER_DUAL_SDRAM\n    //Secondary SDRAM\n    //Set all output SDRAM_* signals to Z ASAP if SDRAM2_EN is 0\n    input         SDRAM2_EN,\n    output        SDRAM2_CLK,\n    output [12:0] SDRAM2_A,\n    output  [1:0] SDRAM2_BA,\n    inout  [15:0] SDRAM2_DQ,\n    output        SDRAM2_nCS,\n    output        SDRAM2_nCAS,\n    output        SDRAM2_nRAS,\n    output        SDRAM2_nWE,\n`endif\n</code></pre>"},{"location":"developer/emu/#serial-support","title":"Serial Support","text":"<p>Serial is passed to the linux arm side of the MiSTer. On the arm side, software decides what to do with the data. ie: send it to shell, ppp, MIDI, etc.</p> <p>Different serial speeds and optons are set using options in the CONF_STR. </p> <pre><code>    input         UART_CTS,\n    output        UART_RTS,\n    input         UART_RXD,\n    output        UART_TXD,\n    output        UART_DTR,\n    input         UART_DSR,\n</code></pre>"},{"location":"developer/emu/#user-port-extra-usb-31a-style-connector-on-mister","title":"User Port - extra USB 3.1A style connector on MiSTer","text":"USB P7 Name PIN MiSTer emu wire 1 +5V +5V 2 2 TX SDA AH9 USER_IO[1] 3 1 RX SCL AG11 USER_IO[0] 4 GND GND 5 8 DSR IO10 AF15 USER_IO[5] 6 7 DTR IO11 AG16 USER_IO[4] 7 6 CTS IO12 AH11 USER_IO[3] 8 5 RTS IO13 AH12 USER_IO[2] 9 10 IO6 IO8 AF17 USER_IO[6] 10 Shield Shield <pre><code>    // Open-drain User port.\n    // 0 - D+/RX\n    // 1 - D-/TX\n    // 2..6 - USR2..USR6\n    // Set USER_OUT to 1 to read from USER_IN.\n    input   [6:0] USER_IN,\n    output  [6:0] USER_OUT,\n</code></pre>"},{"location":"developer/emu/#osd-status","title":"OSD Status","text":"<p>This is set to 1 when the OSD is open. It can be used to pause the core when the OSD is open, and/or for autosave.</p> <pre><code>    input         OSD_STATUS\n</code></pre>"},{"location":"developer/headonsoundpcb/","title":"Head On Sound PCB Implementation","text":"<p>Article by MiSTer core developer Jegor van Opdorp (SupraDeus/jopdorp)</p> <p>This article contains a description of how we implemented the sound PCB of the game Head On from SEGA/Gremlin.</p>"},{"location":"developer/headonsoundpcb/#first-steps","title":"First steps","text":"<p>We analyzed the schematics of the Head On sound PCB board. Identifying circuits for individual sounds, and repeated parts of the circuit.</p> <p></p> <p>We talked about what we thought is what, and decided to start with the car sound.</p>"},{"location":"developer/headonsoundpcb/#finding-real-footage","title":"Finding real footage","text":"<p>Searching the web for video's with the sounds, we found a couple, but the quality was bad:</p> <p>https://discord.com/channels/@me/950484205664612402/951108401801338890</p> <p>https://discord.com/channels/@me/950484205664612402/951139287745851425</p> <p>JimmyStones contacted the maker of the sound board, to see if he had some tips. He seemed willing to help, but not familiar enough with the fpga domain to join the project. The JimmyStones found someone who own a cabinet and was able to obtain some good sound recordings.</p> <p>This gave us a way to validate our results.</p>"},{"location":"developer/headonsoundpcb/#simulating-and-analyzing","title":"Simulating and analyzing","text":""},{"location":"developer/headonsoundpcb/#car","title":"Car","text":"<p>We started by implementing the car sound in the falstad simulator. It took some tweaking, mostly getting things like the diode type and transistor beta values right. We managed to get a result that sounded pretty much like the real deal.</p> <p>This is the final circuit: car_circuit.txt it can be loaded into the falstad simulator Frow there it is possible to record a wav file, which we used to analyze the sound.</p> <p>It turns out that the car sound consists of a repeating waveform that looks like this:</p> <p></p> <p>The frequency of this waveform is modulated. It starts inaudibly low. Then when the game starts, it follows an upward curve until a limit. When the \"high speed\" button is pressed it momentarily drops in frequency and follows a quick upward curve, and follows a downward curve when it is released, like so:</p> <p></p> <p>Based on this information we were able to come up wih an implementation strategy:</p> <ul> <li>Turn the waveform into an array</li> <li>Turn the frequency response curve into trhee lookup tables:<ul> <li>One for the start of the game</li> <li>One for when the \"high speed\" button is pressed</li> <li>One for when the \"high speed button is not pressed</li> </ul> </li> <li>Follow the frequnce curve as needed, according to the current state.</li> </ul>"},{"location":"developer/headonsoundpcb/#bonus","title":"Bonus","text":"<p>The bonus sound seemed simple at first, but turned out to be more complicated than we thought. When the bonus input goes high shortly, and then low. The sound is quite simple, like so:</p> <p></p> <p>We came up with a algorithm to describe this sound, and implemented it in a SystemVerilog module.</p>"},{"location":"developer/headonsoundpcb/#the-algorithm","title":"The algorithm:","text":"<p>Bonus is a pulse generator, that goes to 100% amplitude immediately when the bonus pin goes high. The pulse is always running, just multiplied by an amplitude.</p> <p>When the bonus pin goes low, the sound decreases in volume following a an exponential curve. When the bonus pin is low, the pulse period is 3/4 of the length, resulting in a perfect fourth</p> <p>The amplitude halves every 28 ms so it's something like:</p> <p><code>Amplitude = MaxAmplitude-((0.976^time_in_miliseconds)*MaxAmplitude)</code></p> <p>MaxAmplitude should be set to the highest number that fits, in for example 32 bits, to keep precision. Normally I use fixed point math with 32 of precision for multiplications like this. Later we will convert to 16 bits precision, for the output.</p> <p>The pulse period when the bonus pin is high has length 0.002746s, and it's high 75% of the time so equivalent to a loop of:</p> <p><code>{1,1,1,0}</code></p> <p>The final result looks like it goes through a very slight low pass filter. This basically results in a loop of:</p> <p><code>{97{2}, 1, 33{0}, 1}</code></p> <p>At 48khz this results in a wavelengths of 0.00275s</p> <p>We implemented this in SystemVerilog like so:</p> <pre><code>module bonus(\n    input clk,\n    input clk_48KHz_en,\n    input bonus_en,\n    output reg[15:0] audio_out = 0\n);\n\n    localparam MAX_AMPLITUDE = 1 &lt;&lt; 18 &lt;&lt; 14;\n    reg[1:0] WAVEFORM_SLOW[131:0];\n    reg[1:0] WAVEFORM_FAST[98:0];\n    assign WAVEFORM_SLOW[97] = 1;\n    assign WAVEFORM_SLOW[131] = 1;\n    assign WAVEFORM_FAST[73] = 1;\n    assign WAVEFORM_FAST[98] = 1;\n\n    genvar i;\n    generate\n        for (i = 0; i &lt;= 96; i = i + 1) begin\n            assign WAVEFORM_SLOW[i] = 2;\n        end\n        for (i = 98; i &lt;= 130; i = i + 1) begin\n            assign WAVEFORM_SLOW[i] = 0;\n        end\n    endgenerate\n\n    genvar j;\n    generate\n        for (j = 0; j &lt;= 72; j = j + 1) begin\n            assign WAVEFORM_FAST[j] = 2;\n        end\n        for (j = 74; j &lt;= 97; j = j + 1) begin\n            assign WAVEFORM_FAST[j] = 0;\n        end\n    endgenerate\n\n\n    localparam AMPLITUDE_RATIO_PER_TIMESTEP_18 = 262008; // z^(28ms*48khz) = 0.5, so z = 0.99948, 0.99948 * 2^18 = 262008\n\n    reg[9:0] current_sample = 0;\n    reg[68:0] amplitude = 0;\n\n    reg last_bonus_en = 0;\n\n    localparam SLOW_TO_FAST_RATIO_16 = 87381; // 4/3 * 2^16 = 87381.3333333\n    reg[15:0] map_slow_to_fast = ((current_sample * SLOW_TO_FAST_RATIO_16) &gt;&gt; 16);\n\n    always_ff @(posedge clk) begin\n        if(clk_48KHz_en)begin\n            last_bonus_en &lt;= bonus_en;\n\n            if(bonus_en)begin\n                amplitude &lt;= MAX_AMPLITUDE;\n\n                if(current_sample == 131)begin\n                    current_sample &lt;= 0;\n                end else begin\n                    current_sample &lt;= current_sample + 1;\n                end\n                audio_out &lt;= (amplitude * WAVEFORM_SLOW[current_sample]) &gt;&gt; 18;\n            end else begin \n                if(last_bonus_en)begin\n                    current_sample &lt;= map_slow_to_fast;\n                    audio_out &lt;= (amplitude * WAVEFORM_SLOW[current_sample]) &gt;&gt; 18;\n                end else begin\n                    if(current_sample &gt;= 98)begin\n                        current_sample &lt;= 0;\n                    end else begin\n                        current_sample &lt;= current_sample + 1;\n                    end\n                    audio_out &lt;= (amplitude * WAVEFORM_FAST[current_sample]) &gt;&gt; 18;\n                end\n                amplitude &lt;= (AMPLITUDE_RATIO_PER_TIMESTEP_18 * amplitude) &gt;&gt; 18;\n            end\n\n        end \n    end\n\nendmodule\n</code></pre> <p>But it turned out that this was not the whole story. At the end of the game, the bonus pin goes high for a longer time, which triggers a different effect, where the frequency of the tone gets modulated in a more complex way. We had to go back to simulation, where it turned out that the NOT gated at the bottom had the wrong voltage threshold assigned to them.</p> <p></p> <p>While this did not change the short bonus sound, which the machine makes when a jewel is picked up, it does change the sound when the bonus pin goes high for a longer period. It turned out that the Falstad simulator was not fast enough to simulate this circuit though.</p> <p>We then turned to LTspice see if that was quick enough.</p>"},{"location":"developer/hps_io/","title":"sys - hps_io","text":"<p>HPS stands for Hard Processor System, or the ARM part of the MiSTer FPGA. The hps_io.sv file contains the hps_io module that talks to the MiSTer binary on the arm side. It provides convenient signals to use in each core that abstract the different types of I/O that the core might need to support.</p>"},{"location":"developer/hps_io/#instantiating-hps_io","title":"Instantiating hps_io","text":"<p>The module has a few parameters that are used to set it up:</p> <ul> <li>CONF_STR - This is how the HPS reads the OSD configuration string</li> <li>PS2DIV - This divides the clk_sys to create a slower clock for the legacy ps2 signals: ps2_kbd_clk_out  etc</li> <li>WIDE - This makes the ioctl data and sd_buff signals 8 bit  (WIDE=0) or 16 bit (WIDE=1) if it is wide, ioctl_addr is incremented by 2</li> <li>VDNUM - Virtual Device Number - This can be 1 to 4, and will create extra virtual block devices</li> <li>BLKSZ - Block Size - set the block size of the block device - 0 = 128, 1 = 256, 2 = 512(default), .. 7 = 16384</li> <li>PS2WE - PS2 Write Enable - option to use 2 way PS/2 communications. See ao486 core.</li> </ul> <p>clk_sys is the system clock. Make sure to use the same clock when reading from these signals. HPS_BUS should be passed through from the top level emu.</p> <pre><code>//\n// Use buffer to access SD card. It's time-critical part.\n//\n// WIDE=1 for 16 bit file I/O\n// VDNUM 1..4\n// BLKSZ 0..7: 0 = 128, 1 = 256, 2 = 512(default), .. 7 = 16384\n//\nmodule hps_io #(parameter CONF_STR, CONF_STR_BRAM=1, PS2DIV=0, WIDE=0, VDNUM=1, BLKSZ=2, PS2WE=0)\n(\n    input             clk_sys,\n    inout      [48:0] HPS_BUS,\n</code></pre>"},{"location":"developer/hps_io/#joystick-input","title":"Joystick input","text":"<p>MiSTer supports up to 6 players on separate joysticks. joystick_0..5 are digital joysticks. They contain the directions in the first 4 bits, and then they have buttons that can be mapped using the CONF_STR J. </p> <ul> <li><code>joystick_x[0]</code> = right</li> <li><code>joystick_x[1]</code> = left</li> <li><code>joystick_x[2]</code> = down</li> <li><code>joystick_x[3]</code> = up</li> </ul> <p>Analog joysticks are supported by connecting joystick_l_analog_x. The values are analog -127..+127, Y: <code>[15:8]</code>, X: <code>[7:0]</code>. Depending on how you want to use the values, you may need to renormalize them. -128 is omitted so it is easier to invert the direction. l is the left joystick, r is the right joystick on a playstation style controller.</p> <p>Paddles - paddle_x - are input devices that have a range from 0 to 255. They do not spin fully.</p> <p>Spinners - spinner_x - are a paddle looking device, but there is no stop in the hardware, they spin freely. Therefore, these use an extra bit 8 that toggles with each update. the value is in 0:7, -128..+127 - they are relative, and usually the value will be between -8 and 8.</p> <pre><code>    // buttons up to 32\n    output reg [31:0] joystick_0,\n    output reg [31:0] joystick_1,\n    output reg [31:0] joystick_2,\n    output reg [31:0] joystick_3,\n    output reg [31:0] joystick_4,\n    output reg [31:0] joystick_5,\n\n    // analog -127..+127, Y: [15:8], X: [7:0]\n    output reg [15:0] joystick_l_analog_0,\n    output reg [15:0] joystick_l_analog_1,\n    output reg [15:0] joystick_l_analog_2,\n    output reg [15:0] joystick_l_analog_3,\n    output reg [15:0] joystick_l_analog_4,\n    output reg [15:0] joystick_l_analog_5,\n\n    output reg [15:0] joystick_r_analog_0,\n    output reg [15:0] joystick_r_analog_1,\n    output reg [15:0] joystick_r_analog_2,\n    output reg [15:0] joystick_r_analog_3,\n    output reg [15:0] joystick_r_analog_4,\n    output reg [15:0] joystick_r_analog_5,\n\n    // paddle 0..255\n    output reg  [7:0] paddle_0,\n    output reg  [7:0] paddle_1,\n    output reg  [7:0] paddle_2,\n    output reg  [7:0] paddle_3,\n    output reg  [7:0] paddle_4,\n    output reg  [7:0] paddle_5,\n\n    // spinner [7:0] -128..+127, [8] - toggle with every update\n    output reg  [8:0] spinner_0,\n    output reg  [8:0] spinner_1,\n    output reg  [8:0] spinner_2,\n    output reg  [8:0] spinner_3,\n    output reg  [8:0] spinner_4,\n    output reg  [8:0] spinner_5,\n</code></pre>"},{"location":"developer/hps_io/#buttons","title":"Buttons","text":"<p>Buttons from the top level emu are what the hardware sees. Buttons from the hps_io can include emulated button presses from the OSD, HPS, etc.</p> <ul> <li><code>buttons[1]</code> is the user button</li> <li><code>buttons[0]</code> is the OSD button</li> </ul> <pre><code>    // I/O board button press simulation (active high)\n    // b[1]: user button\n    // b[0]: osd button\n    output      [1:0] buttons,\n</code></pre>"},{"location":"developer/hps_io/#forced-scandoubler","title":"Forced Scandoubler","text":"<p>Forced Scandoubler is set to 1 when the user wants the scandoubler turned on.</p> <pre><code>    output            forced_scandoubler,\n</code></pre>"},{"location":"developer/hps_io/#direct-video","title":"Direct Video","text":"<p>Direct Video is set to 1 when the MiSTer is using the hdmi as a VGA port with a proper converter.</p> <pre><code>    output            direct_video,\n</code></pre>"},{"location":"developer/hps_io/#status","title":"Status","text":"<p>The status bits are used by the OSD to provide the core with status that the user picks in the OSD. For example, the status string:</p> <pre><code>    \"O1,Colors,NTSC,PAL;\",\n</code></pre> <p>would set <code>status[1]</code> to 0 for NTSC and 1 for PAL.  See the documentation for the CONF_STR to understand all of the OSD options.</p> <ul> <li>status_menumask - this is used to tell the OSD to turn on and off options using the H or h option. Set bit 0 to effect H0.</li> <li>status_in, status_set - when status_set is 1, the hps_io will grab the status_in and use it to change the status bits</li> </ul> <pre><code>    output reg [63:0] status,\n    input      [63:0] status_in,\n    input             status_set,\n    input      [15:0] status_menumask,\n</code></pre>"},{"location":"developer/hps_io/#info","title":"Info","text":"<ul> <li>info - info string to display from CONF_STR</li> <li>info_req - ask HPS to display info string on OSD</li> </ul> <pre><code>    input             info_req,\n    input       [7:0] info,\n</code></pre>"},{"location":"developer/hps_io/#force-a-new-video-mode","title":"Force a new Video mode","text":"<ul> <li>new_vmode - if the core needs to force the system to change video modes, it can set this flag <pre><code>    //toggle to force notify of video mode change\n    input             new_vmode,\n</code></pre></li> </ul>"},{"location":"developer/hps_io/#virtual-hard-drives-and-block-devices","title":"Virtual Hard Drives and Block Devices","text":"<p>Hard drive images are loaded with the S option in the OSD. There can be up to 10 images mounted at once if VDUM is set to 10. 1-10 are valid values. </p> <p>When an image is mounted a bit is set in img_mounted, and then img_readonly and img_size are valid for that img_mounted. Save these values into a register if you will need them later.</p> <p>These are block devices, so the way to read or write to them is to first specify the blk, and then specify a rd or wr and it will start to stream addresses through the sd_buff_addr. </p> <p>There is no wait line, because it is assumed that you will be writing one block of data into DPRAM and it will write immediately. </p> <p>To read data, set the sb_lba to the block number you want to seek to. Then set the correct bit in sd_rd to 1, and the HPS will respond by raising the correct bit in sd_ack, and keeping it high for the duration of the read. The HPS will then use sd_buff_addr and sd_buff_dout and sd_buff_wr to count from 0 to BLKSZ and send a byte per clock.  After reaching the last byte, it will clear the sd_ack.</p> <p>To write data, set the sb_lba to the block number you want to seek to. Then set the correct bit in sd_wr to 1. Similar to a read, it will raise the sd_ack bit, and count the sd_buff_addr - the core will respond by setting each sd_buff_din to the data it wants to write. After the block is written (sd_buff_addr reaches BLKSZ) sd_ack will be cleared.</p> <p>When the user unmounts the image from the OSD, img_mounted will go high, and the img_size will be set to zero. That is how the core knows to unmount the current image.</p> <ul> <li><code>sd_lba[VDNUM]</code> - logical block address - this is the block we want to start accessing</li> <li><code>sd_blk_cnt</code> - number of blocks</li> <li><code>sd_rd</code> - read number of blocks starting at address</li> <li><code>sd_wr</code> - write number of blocks starting at address</li> <li> <p><code>sd_ack</code> - data read on the sd_buff_out is valid OR that write data must be valid on sd_buff_in[VDNUM]</p> </li> <li> <p><code>sd_buff_addr</code> - byte address</p> </li> <li><code>sd_buff_dout</code> - data from disk</li> <li><code>sd_buff_din[VDNUM]</code> - data to disk</li> <li><code>sd_buff_wr</code> - Typically the read data from the blk interface is written into a FIFO or other DPRAM construct.  This is a supplied control signal for the write signal to that FIFO</li> </ul> <pre><code>    // SD config\n    output reg [VD:0] img_mounted,  // signaling that new image has been mounted\n    output reg        img_readonly, // mounted as read only. valid only for active bit in img_mounted\n    output reg [63:0] img_size,     // size of image in bytes. valid only for active bit in img_mounted\n\n\n    // SD block level access\n    input      [31:0] sd_lba[VDNUM],\n    input       [5:0] sd_blk_cnt[VDNUM], // number of blocks-1, total size ((sd_blk_cnt+1)*(1&lt;&lt;(BLKSZ+7))) must be &lt;= 16384!\n    input      [VD:0] sd_rd,\n    input      [VD:0] sd_wr,\n    output reg [VD:0] sd_ack,\n\n    // SD byte level access. Signals for 2-PORT altsyncram.\n    output reg [AW:0] sd_buff_addr,\n    output reg [DW:0] sd_buff_dout,\n    input      [DW:0] sd_buff_din[VDNUM],\n    output reg        sd_buff_wr,\n</code></pre>"},{"location":"developer/hps_io/#rom-and-file-loading-nvram-saving","title":"ROM and File loading, NVRAM saving","text":"<p>Boot ROMS are automatically loaded using ioctl lines. You can also have ROMS loaded via the F in the OSD, or via an MRA.  </p> <ul> <li><code>ioctl_download</code> - 1 when data is being downloaded. </li> <li><code>ioctl_index</code> - <code>[15:6]</code> which file type <code>[5:0]</code> file number</li> <li><code>ioctl_wr</code> - high when each byte is valid. </li> <li><code>ioctl_addr</code> - address of byte from / to file - counts by two if set to wide</li> <li><code>ioctl_dout</code> - data going to core from HPS (ROM)</li> <li><code>ioctl_din</code> - data going to HPS from core - ie: to save NVRAM</li> <li><code>ioctl_upload</code> - indicate there is an active upload</li> <li><code>ioctl_upload_req</code> - set to 1 to ask the HPS to initiate an NVRAM save, for autosave, HPS only reads this when the OSD is open</li> <li><code>ioctl_rd</code> - data is valid to read</li> <li><code>ioctl_file_ext</code> - this is the file extension as a string </li> <li><code>ioctl_wait</code> - set this flag to 1 if core isn't ready to process another byte from the HPS (flow control)</li> </ul> <pre><code>    // ARM -&gt; FPGA download\n    output reg        ioctl_download = 0, // signal indicating an active download\n    output reg [15:0] ioctl_index,        // menu index used to upload the file\n    output reg        ioctl_wr,\n    output reg [26:0] ioctl_addr,         // in WIDE mode address will be incremented by 2\n    output reg [DW:0] ioctl_dout,\n    output reg        ioctl_upload = 0,   // signal indicating an active upload\n    input             ioctl_upload_req,\n    input      [DW:0] ioctl_din,\n    output reg        ioctl_rd,\n    output reg [31:0] ioctl_file_ext,\n    input             ioctl_wait,\n</code></pre> <p>Note:  boot.rom is sent via ioctl_index == 0, boot1.rom is sent with <code>[5:0]</code> set to 0, and <code>[15:6]</code> set to 1. boot2.rom.. etc</p>"},{"location":"developer/hps_io/#sdram-board-size","title":"SDRAM board size","text":"<pre><code>    // [15]: 0 - unset, 1 - set. [1:0]: 0 - none, 1 - 32MB, 2 - 64MB, 3 - 128MB\n    // [14]: debug mode: [8]: 1 - phase up, 0 - phase down. [7:0]: amount of shift.\n    output reg [15:0] sdram_sz,\n</code></pre>"},{"location":"developer/hps_io/#rtc","title":"RTC","text":"<p>The RTC will pass the core the time from the HPS. If the HPS doesn't have the optional RTC board, it will pick up the time from an NTP server. </p> <p>NOTE: the RTC just sends the time once at the beginning of the core start. After that, the core is responsible for incrementing the seconds, or incrementing the seconds and the other fields of the RTC structure.</p> <p>in BCD:</p> <ul> <li><code>RTC[7:0]</code>  - seconds</li> <li><code>RTC[15:8]</code> - minutes</li> <li><code>RTC[23:16]</code> - hour</li> <li><code>RTC[31:24]</code> - month day</li> <li><code>RTC[39:32]</code> - month</li> <li><code>RTC[47:40]</code> - year</li> <li><code>RTC[55:48]</code> - week day</li> </ul> <pre><code>    // RTC MSM6242B layout\n    output reg [64:0] RTC,\n\n    // Seconds since 1970-01-01 00:00:00\n    output reg [32:0] TIMESTAMP,\n</code></pre>"},{"location":"developer/hps_io/#uart-flags","title":"UART Flags","text":"<pre><code>    // UART flags\n    output reg  [7:0] uart_mode,\n    output reg [31:0] uart_speed,\n</code></pre>"},{"location":"developer/hps_io/#keyboard-emulation","title":"Keyboard emulation","text":"<p>The hps_io module has two ways of accessing the keyboard and mouse. It provides ps2 compatible signals which are useful for porting cores that are expecting a ps/2 keyboard. It also provides an easier to use more reliable interface.</p> <p>To use the new interface, <code>ps2_key[10]</code> is toggled with each keypress. <code>ps2_key[9]</code> is whether the key is pressed or not. And the rest of the bits are pretty standard ps2 bits with bit 8 being the extended bit.</p>"},{"location":"developer/hps_io/#setting-ps2-keyboard-lights","title":"Setting PS2 Keyboard lights","text":"<p>The HPS will use numlock and scrl_lock to indicate the mouse/joystick1/2 emulation. If the core wants to set any of these three of these LEDs it needs to set the bit in ps2_kbd_led_use - to enable it, and then in ps2_kb_led_status to turn the LED on/off.  The LEDs are in the order:</p> <pre><code>assign ps2_kbd_led_status = {scrl_lock,num_lock,caps_lock};\n</code></pre> <p>this control is quite slow, so the core shouldn't use it unless it's pseudo-static indication.</p> <pre><code>    // ps2 keyboard emulation\n    output            ps2_kbd_clk_out,\n    output            ps2_kbd_data_out,\n    input             ps2_kbd_clk_in,\n    input             ps2_kbd_data_in,\n\n    input       [2:0] ps2_kbd_led_status,\n    input       [2:0] ps2_kbd_led_use,\n\n    output            ps2_mouse_clk_out,\n    output            ps2_mouse_data_out,\n    input             ps2_mouse_clk_in,\n    input             ps2_mouse_data_in,\n\n    // ps2 alternative interface.\n\n    // [8] - extended, [9] - pressed, [10] - toggles with every press/release\n    output reg [10:0] ps2_key = 0,\n\n    // [24] - toggles with every event\n    output reg [24:0] ps2_mouse = 0,\n    output reg [15:0] ps2_mouse_ext = 0, // 15:8 - reserved(additional buttons), 7:0 - wheel movements\n</code></pre>"},{"location":"developer/hps_io/#gamma","title":"Gamma","text":"<pre><code>    inout      [21:0] gamma_bus,\n</code></pre>"},{"location":"developer/hps_io/#extension-bus","title":"Extension Bus","text":"<p>This should be used sparingly. It is for the exceptional case where a CD is needed as in the TurboGrafx16. It requires code on the HPS in the MiSTer binary.</p> <pre><code>    // for core-specific extensions\n    inout      [35:0] EXT_BUS\n</code></pre>"},{"location":"developer/links/","title":"Useful Links","text":"<p>Here's some useful links for experienced and new developers:</p>"},{"location":"developer/links/#mister-fpga-tutorials","title":"MiSTer FPGA Tutorials","text":"<p>Alanswx's MiSTer Tutorials series pram0d's FPGA Core Development Series Part 1 and Part 2 MiSTer Retro Wolf's Tutorial Series</p>"},{"location":"developer/links/#general-fpga-development-tutorials","title":"General FPGA Development Tutorials","text":"<p>Beginning FPGA Graphics</p>"},{"location":"developer/links/#mister-development-resources","title":"MiSTer Development Resources","text":"<p>MiSTer FPGA Core Template JimmyStones' Verilator Template JimmyStones' Generic Pause Module JimmyStones' Generic HiScores Module Compiling the Linux Kernel Compiling the bootloader Compiling Main_MiSTer - Arm Cross Compiling USB Blaster for Debugging</p>"},{"location":"developer/links/#quartus-lite-1702-download-links","title":"Quartus Lite 17.0.2 Download Links","text":"<p>Quartus Lite 17.0.2 for Windows Quartus Lite 17.0.2 for Linux Quartus 17.0 Help</p>"},{"location":"developer/links/#de10-nano-resources","title":"DE10-Nano Resources","text":"<p>DE10-Nano Rev. B2/C Manual DE10-Nano Schematic</p>"},{"location":"developer/links/#general-development-resources","title":"General Development Resources","text":"<p>Various Licenses and Comments about Them</p>"},{"location":"developer/mistercompile/","title":"Compiling for MiSTer","text":"<p>MiSTer uses a combination of various compiled binaries in the finished product. There is a customized minimal Linux Kernel, a bootloader, a Main MiSTer binary that's written in C, and then there are the cores built on the MiSTer framework written in a combination of VHDL, Verilog, and SystemVerilog. In order to compile the \"full stack\" as it were, you need a variety of tools.</p>"},{"location":"developer/mistercompile/#to-compile-mister-fpga-cores","title":"To compile MiSTer FPGA cores","text":"<p>The vast majority of MiSTer FPGA cores currently use Quartus 17.0.2 for compilation. Here are the download links for both Windows and Linux:</p> <p>Windows Download</p> <p>Linux Download</p> <p>The Linux version is intended to work with Ubuntu 18.xx, you may have to adjust by downloading some missing dependencies if you use a newer version or another distribution.</p> <p>Open the .qpf file from the MiSTer core you wish to compile with Quartus and press the play button. It's as simple as that!</p>"},{"location":"developer/mistercompile/#general-prerequisites-for-arm-cross-compiling","title":"General prerequisites for ARM Cross Compiling","text":"<p>These prerequisites are not completely strict, only some of them are. I'm using a specific linux distro (Ubuntu 20.04.5 LTS in WSL2), but you may find that other distros work for you, however your results may vary. Install the prereqs that I use for the Main MiSTer Binary and Linux kernel compilation this way:</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt-get install build-essential git libncurses-dev flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf liblz4-tool bc curl gcc git libssl-dev libncurses5-dev lzop make u-boot-tools libgmp3-dev libmpc-dev\n</code></pre> <p>Download the correct cross-compiler for compiling ARM binaries on a 64-bit x86-based system:</p> <pre><code>wget -c https://developer.arm.com/-/media/Files/downloads/gnu-a/10.2-2020.11/binrel/gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf.tar.xz\n</code></pre> <p>Extract this archive to somewhere you prefer, we will use it as a PATH, so here we will extract to <code>/opt</code>:</p> <pre><code>tar xf gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf.tar.xz -C /opt\n</code></pre> <p>Add this to your path temporarily each time you compile:</p> <pre><code>export PATH=/opt/gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf/bin:$PATH\n</code></pre> <p>Note: On WSL2 I have to run these export commands again after logging out, this may not be the case in your scenario, there are ways to permanently set them, but I'm preferring not to do that, you can also use them as parameters with <code>make</code> like normal (e.g. <code>PATH=/opt/gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf/bin:$PATH make -j30</code>).</p>"},{"location":"developer/mistercompile/#main-mister-binary","title":"Main MiSTer Binary","text":"<p>The Main MiSTer binary is a good place to start for this guide. I will assume you are either running a linux system or you are using Windows Subsystem for Linux. I'm using Ubuntu current (22.0).</p> <p>Clone the Main_MiSTer repository:</p> <pre><code>git clone https://github.com/MiSTer-devel/Main_MiSTer.git\n</code></pre> <p>Then <code>cd</code> into that directory that was created and follow up with <code>make</code>.</p>"},{"location":"developer/mistercompile/#mister-linux-kernel","title":"MiSTer Linux Kernel","text":"<p>Edit your sources file:</p> <pre><code>sudo nano /etc/apt/sources.list\n</code></pre> <p>Uncomment all of the lines which start with <code>deb-src</code> and then run the following:</p> <pre><code>sudo apt-get update\nsudo apt-get build-dep linux\n</code></pre> <p>to be continued... If you would like to contribute to this article, please do! :)</p>"},{"location":"developer/mra/","title":"Arcade ROMS and MRA Files","text":"<p>This page explains most of the intricacies of the way MiSTer handles ROMs for Arcade systems.</p>"},{"location":"developer/mra/#mra-format","title":"MRA Format","text":"<p>Because some arcade boards can change games by just putting in new roms, it made sense to move the RBF files out of sight from the menu list, and browse the MRA files instead. These MRA files specify which RBF file to use, and which mame rom zip files to create on the fly into a rom to pass to the arcade core. They will create the old a.pacman.rom style rom on the fly from mame roms, either merged or non-merged.</p>"},{"location":"developer/mra/#here-is-an-example-of-where-the-files-might-go","title":"Here is an example of where the files might go:","text":"<p><pre><code>/_Arcade/&lt;game name&gt;.mra\n/_Arcade/cores/&lt;game rbf&gt;.rbf\n/games/mame/&lt;mame rom&gt;.zip\n/games/hbmame/&lt;hbmame rom&gt;.zip\n</code></pre> There are other locations for these files based on search paths.</p>"},{"location":"developer/mra/#mra-format_1","title":"MRA Format","text":"<pre><code>&lt;misterromdescription&gt;\n  &lt;name&gt;Donkey Kong (US set 1)&lt;/name&gt;\n  &lt;mratimestamp&gt;201911270000&lt;/mratimestamp&gt;\n  &lt;mameversion&gt;0216&lt;/mameversion&gt;\n  &lt;setname&gt;dkong&lt;/setname&gt;\n  &lt;year&gt;1981&lt;/year&gt;\n  &lt;manufacturer&gt;Nintendo of America&lt;/manufacturer&gt;\n  &lt;category&gt;Maze / Monkeys&lt;/category&gt;\n  &lt;category&gt;Platform&lt;/category&gt;\n  &lt;category&gt;Platform / Mario Bros.&lt;/category&gt;\n  &lt;rbf&gt;DonkeyKong&lt;/rbf&gt;\n&lt;!-- switches element taken from \"Pac-Man (Midway).mra\"; for demonstration purposes only --&gt;\n  &lt;switches default=\"FF,FF,C9\"&gt;\n    &lt;dip bits=\"15\"    name=\"Cabinet\" ids=\"Cocktail,Upright\"/&gt;\n    &lt;dip bits=\"16,17\" name=\"Coinage\" ids=\"2c/1cr,1c/1cr,1c/2cr,Free Play\" values=\"3,1,2,0\"/&gt;\n    &lt;dip bits=\"18,19\" name=\"Lives\" ids=\"1,2,3,5\"/&gt;\n    &lt;dip bits=\"20,21\" name=\"Bonus Life After\" ids=\"10000,15000,20000,None\"/&gt;\n    &lt;dip bits=\"22\"    name=\"Difficulty\" ids=\"Hard,Normal\"/&gt;\n  &lt;/switches&gt;\n  &lt;buttons names=\"Jump,Start 1P,Start 2P,Coin\" default=\"A,Start,Select,R\"/&gt;\n&lt;!-- rom index 1 or any other index can pass additional information to a rom.\nuseful to say this rom is game A or game 1.  Use it in case of multiple games for\nthe same RBF, ie: Dig Dug 2, Mappy --&gt;\n  &lt;rom index=\"1\"&gt;\n    &lt;part&gt;0A&lt;/part&gt;\n  &lt;/rom&gt;\n&lt;!-- romstruct element taken from \"Two Tigers.mra\"; for demonstration purposes only --&gt;\n  &lt;romstruct&gt;\nROM structure\n00000 - 0BFFF  48k CPU1\n0C000 - 0FFFF  16k CPU2\n10000 - 13FFF  16k GFX1\n14000 - 1BFFF  32k GFX2\n  &lt;/romstruct&gt;\n\n&lt;!-- the nvram node is used to download and upload the nvram memory. When the user hits \"Save Settings\" in the OSD it triggers ioctl_upload. This isn't available in Donkey Kong because it didn't originally have NVRAM --&gt;\n&lt;nvram index=\"4\" size=\"1024\"/&gt;\n\n\n\n&lt;!-- rom index 0 is the standard rom. The zip will be added to the name inside the part, unless the\npart has it's own zip. The md5 will be checked at the end. A file not found error is reported before an md5\nerror. --&gt;\n  &lt;rom index=\"0\" zip=\"dkong.zip\" md5=\"05fb1dd1ce6a786c538275d5776b1db1\" type=\"merged|nonmerged|split\"&gt;\n    &lt;part crc=\"ba70b88b\" name=\"c_5et_g.bin\"/&gt;\n&lt;!-- interleave element taken from \"Crater Raider.mra\"; for demonstration purposes only --&gt;\n    &lt;interleave output=\"32\"&gt;\n    &lt;part crc=\"579a8e36\" name=\"crvid.a4\"  map=\"0001\"/&gt;\n    &lt;part crc=\"2c2f5b29\" name=\"crvid.a3\"  map=\"0001\"/&gt;\n    &lt;part crc=\"5bf954e0\" name=\"crvid.a6\"  map=\"0010\"/&gt;\n    &lt;part crc=\"9bdec312\" name=\"crvid.a5\"  map=\"0010\"/&gt;\n    &lt;part crc=\"4b913498\" name=\"crvid.a8\"  map=\"0100\"/&gt;\n    &lt;part crc=\"9fa307d5\" name=\"crvid.a7\"  map=\"0100\"/&gt;\n    &lt;part crc=\"7a22d6bc\" name=\"crvid.a10\" map=\"1000\"/&gt;\n        &lt;part crc=\"811f152d\" name=\"crvid.a9\"  map=\"1000\"/&gt;\n    &lt;/interleave&gt;\n&lt;!-- begin kill screen fix --&gt;\n    &lt;patch offset=\"0xf7d\"&gt;\nFE 04 38 02 3E 04 47 A7 17 A7 17 A7 17 80 80 C6 \n28\n    &lt;/patch&gt;\n&lt;!-- end kill screen fix --&gt;\n    &lt;part crc=\"d6412358\" name=\"c-2j.bpr\"/&gt;\n    &lt;part crc=\"b869b8f5\" zip=\"another.zip\" name=\"v-5e.bpr\"/&gt;\n    &lt;part crc=\"b869b8f5\" name=\"v-5e.bpr\" offset=\"1024\" length=\"1024\"/&gt;\n    &lt;part repeat=\"3328\"&gt;00&lt;/part&gt;\n    &lt;part&gt;\n80 80 80 80 80 80 7F 7F 7F 7F 7F 7F 7F 80 80 80\n    &lt;/part&gt;\n  &lt;/rom&gt;\n&lt;!-- If the first rom0 fails the md5 checksum, it will go ahead and try again if another entry is present.\nOtherwise it will skip the additional entries.\n--&gt;\n  &lt;rom index=\"0\" zip=\"dkong.zip\" md5=\"05fb1dd1ce6a786c538275d5776b1db1\"&gt;\n  &lt;/rom&gt;\n&lt;/misterromdescription&gt;\n</code></pre> <p>When creating a core you can pass additional data in using ioctl_index &gt; 0. </p> <pre><code>// Retrieve Title No.\nalways @(posedge clk_sys) begin\n   if (ioctl_wr &amp; (ioctl_index==1)) tno &lt;= ioctl_dout[3:0];\nend\n</code></pre>"},{"location":"developer/mra/#explanation-for-xml-elements-and-attributes","title":"Explanation for XML elements and attributes","text":"<ul> <li>name: As an element this indicates how the rom should be called. The value should be taken from MAME. As an attribute this indicates an external rom file (or part thereof) that should be loaded by MiSTer.</li> <li>mratimestamp: This indicates the date on which the .mra file was created (useful for other users to determine if there is a newer version of the .mra file available to which they should upgrade). The date format is yyyymmdd.</li> <li>mameversion: This indicates on which version of a MAME romset the *.mra file is based (which version was used for testing). The dot in MAME's version numbering is omitted.</li> <li>setname: This indicates the name of the romset used as given by MAME. It is used to overwrite the core ID specified in the *.rbf file so that individual settings can be saved on a per romset basis.</li> <li>year: This indicates the year the game was released. The format is YYYY and the value should be taken from MAME.</li> <li>manufacturer: This indicates the manufacturer of the game. The value should be taken from MAME.</li> <li>rbf: This indicates the filename (sans path and extension) of the core that should be used to run the game.</li> <li>buttons: This indicates the default button mapping for the game. As the name implies, it only applies buttons, not to directional controls. The names attribute specifies how the buttons are called in the MiSTer OSD while the default attribute specifies how the buttons are mapped to the virtual MiSTer gamepad. Each name corresponds to a bit in the joystick_X port output from hps_io, starting at bit 4 (bits 0-3 are the directional controls). Use '-' to pad for any unused bits. The buttons include not only player inputs, but also start buttons, coins, pause etc. How you arrange these button bits is up to you; they can map directly to I/O ports in the emulated hardware, or can be arbitrary (they are configured in the OSD in the order in which they appear in the attribute) and subsequently re-mapped to hardware ports in your core.</li> <li>switches: This is to define the dip switches present on the arcade board. As this is a bit more complex, there is a specific section for it below.</li> <li>nvram: This tells MiSTer to save the NVRAM data on Save Settings in the OSD. If an NVRAM was saved, it will be sent to the core as well</li> <li>romstruct: This is to give information about the rom structure, how the rom memory is mapped. Information contained herein is intended as a comment for other developers and not actually used by MiSTer.</li> <li>remark: This element is intended for general remarks. Information contained herein is intended as a comment for other developers and not actually used by MiSTer.</li> <li>rom: Part, patch and interleave elements must have a rom element as a parent element. An index attribute with a value of 1 is used to pass information to multigame cores, which machine configuration to use. For passing actual rom data you need an index value of 0. The md5 attribute is used to specify the md5 checksum. The md5 checksum is calculated and checked by MiSTer after the whole rom is created according to the given .mra file. You can use the Linux console to find out the checksum calculated by MiSTer when it starts the core (the command line to do so is '/media/fat/MiSTer rbffilename mrafilename'). Roms whose checksum differ from the one specified in the .mra file won't load. Specifying the md5 checksum as \u201cnone\u201d will disable this check.</li> <li>part: The part element is only allowed inside a rom element. It is used for specifying a part of the rom. The content of a part can either be embedded as a hex value into the .mra file itself (if copyright law allows) or there can be a reference to an external file via the name attribute. If the external file is in a different zip file than the parent rom element, the filename of the zip file must be specified via the zip* attribute.</li> <li>The crc attribute specifies the CRC32 checksum of the respective part (format: eight hex digits). If a crc value is specified, MiSTer will try to select the appropriate file by crc (and only revert to the filename specified by the attribute name, if the crc value does not match). This increases compatibility of the *.mra file with different MAME versions of the romset. As crc values are only relevant for external files, a crc value should only be given to a part element when there is a reference to an external file.</li> <li>The repeat attribute only applies to embedded parts and indicates for how long (not how many times) the sequence should be repeated. By default decimal numbers are assumed. Hex numbers must be preceded with \"0x\".</li> <li>Inside the rom element, the offset and length attributes only apply to external files. To use the offset attribute for internal data, the patch element must be used. Offset indicates the location inside the file from where MiSTer should start reading and length indicates the length of the sequence that MiSTer should be reading. By default decimal numbers are assumed. Hex numbers must be preceded with \"0x\".</li> <li>The map attribute specifies to only read certain parts of the corresponding part element. For example a value of \"0001\" (binary) means to read only every fourth byte while a value of \"1010\" (binary) means to read only every first and third byte. To byteswap a part you need to set a map attribute value of 21 (decimal) and enclose the respective part element in an interleave tag.</li> <li>patch: The patch element is only allowed inside a rom element. It is applied after the whole rom is created from its parts and overwrites the content of the rom with the content of the patch element, starting from the specified offset and for the length of the patch element's content.</li> <li>interleave: The interleave element is only allowed inside a rom element and can only be used as parent element to one or more part elements. Together with the mandatory output attribute the interleave element can be used to specify that the children part elements should be read in a certain way. For example an output-value of \"32\" (decimal) indicates that the children part elements ROM data should be treated as 32 bit.</li> </ul>"},{"location":"developer/mra/#dip-switches","title":"Dip Switches","text":"<p>Dip switch support in the latest version of MRA is used instead of the status bits. The DIP config str is listed in the core, and the core is responsible for reading the up to 64bits of dip data that is sent via ioctl_index 254.</p> <pre><code>reg [7:0] sw[8];\nalways @(posedge clk_sys) if (ioctl_wr &amp;&amp; (ioctl_index==254) &amp;&amp; !ioctl_addr[24:3]) sw[ioctl_addr[2:0]] &lt;= ioctl_dout;\n</code></pre> <p>Switches is the dip switch setting. The default are the default bytes. These are used so you can default the arcade into the proper factory settings. This is useful when the factory settings aren't all OFF/OFF/OFF. Note that in the default hexadecimal string, the leftmost byte refers to DIP bits 7:0, the next byte to 15:8 and so on. The most significant byte thus occupies the rightmost part of the string.</p> <pre><code> &lt;switches default=\"FF,FF,C9\"&gt;\n</code></pre> <p>The value C9 will apply to DIP bits 23:16.</p> <p>The dip tag let's you put in a dip switch entry. The bit number (starting at 0) is based on the way the core was written. Often MAME source code can be used to understand the bits. The numbering will depend on the rom used, the arcade core, and how things are laid out.</p> <ul> <li>bits: bit number to fill out sent to the core in ioctl_data</li> <li>name: title for the OSD</li> <li>ids: title for each option in the OSD</li> <li>values: if you want the values to be different than 0,1,2,3 you can reorder them</li> </ul> <pre><code>    &lt;dip bits=\"16,17\" name=\"Coinage\" ids=\"2c/1cr,1c/1cr,1c/2cr,Free Play\" values=\"3,1,2,0\"/&gt;\n</code></pre>"},{"location":"developer/mrasetnames/","title":"MRA Setnames","text":"<p>This is a list of the mra files and the setnames that are used for the mister.ini core exceptions.</p> mra_filename setname mameversion rbf 1941 Counter Attack -World 900227-.mra 1941 217 jtcps1 1942.mra 1942 217 jt1942 1943 Kai Midway Kaisen.mra 1943kai 217 jt1943 1943 Midway Kaisen.mra 1943j 217 jt1943 1943 The Battle of Midway Mark II.mra 1943mii 217 jt1943 1943 The Battle of Midway.mra 1943u 217 jt1943 1944 The Loop Master (Euro 000620).mra 1944 229 jtcps2 19XX The War Against Destiny (Euro 960104).mra 19xx 229 jtcps2 280Z-ZZAP (US).mra 280zzzap 226 spaceinvaders 4D Warriors (315-5162).mra 4dwarrio 216 segasys1 Action Fighter (World, S16A) [FD1089A 317-0018].mra afighter 232 jts16 Adventure Quiz Capcom World 2 -Japan 920611-.mra cworld2j 217 jtcps1 Alex Kidd The Lost Stars (Set 2, World, S16A) [No Protection].mra alexkidd 232 jts16 Ali Baba and 40 Thieves.mra alibaba 220 pacman Alien Arena (Stargate upgrade).mra alienaru 218 robotron Alien Syndrome (set 4, System 16B, unprotected).mra aliensyn 232 jts16b Alien vs. Predator (Euro 940520).mra avsp 229 jtcps2 Altered Beast (set 8) (8751 317-0078).mra altbeast 232 jts16b3 Amazing Maze.mra maze 226 spaceinvaders Amidar (Scramble).mra amidars 216 scramble Anteater.mra anteater 216 scramble Arkanoid (JP).mra arkanoidj 220 arkanoid Arkanoid (Unl. lives) [hb].mra arkanoid 220 arkanoid Arkanoid (Unl. Lives, slower) [hb].mra arkanoid 220 arkanoid Arkanoid (US).mra arkanoid 220 arkanoid Arkanoid (W).mra arkanoid 220 arkanoid Armed F (Japan).mra armedf 240 armedf Armored Car.mra armorcar 216 scramble Armored Warriors (Euro 941024).mra armwar 229 jtcps2 ASO.mra aso 193 SNK_TripleZ80 Asteroids Deluxe.mra astdelux 216 asteroidsdeluxe Asteroids.mra asteroid 220 asteroids Astro Flash (Japan).mra astrofl 235 SMS Athena.mra athena 193 Athena Attack Force.mra attackfc 226 spaceinvaders Aurail (set 3, US) (unprotected).mra aurail 232 jts16b Azurian Attack.mra azurian 220 galaxian Bad Dudes vs. Dragonninja (US revision 1).mra baddudes 232 jtninja Bagman.mra bagman 220 bagman Balloon Bomber.mra ballbomb 219 spaceinvaders Battle Circuit (Euro 970319).mra batcir 229 jtcps2 Battle of Atlantis.mra atlantis2 217 scramble Bay Route (set 3, World) (FD1094 317-0116).mra bayroute 232 jts16b Beastie Feastie (Pac-Man Conversion).mra beastfp 220 pacman Berzerk.mra berzerk 220 berzerk Big Kong.mra bigkong 224 crazykong Billiard.mra bilyard 229 tiamc1 Bionic Commando.mra bionicc 217 jtbiocom Birdiy.mra birdiy 220 pacman Black Hole.mra blkhole 220 galaxian Black Tiger.mra blktiger 217 jtbtiger Black Widow.mra bwidow 218 blackwidow Blasto.mra blasto 229 blockade Block Block (World 911219 Joystick).mra block 237 jtpang Block Gal.mra blockgal 217 segasys1 Blockade.mra blockade 229 blockade Blue Shark.mra blueshrk 226 spaceinvaders Body Slam (World, S16) [8751 317-0015].mra bodyslam 232 jts16 Bomb Jack.mra bombjack 220 bombjack Boot Hill.mra boothill 226 spaceinvaders Botanic (English, Spanish, Set 1).mra botanic 220 bagman Boulder Dash - Boulder Dash Part 2 (World).mra bouldash 232 jtslyspy Breakout (TTL).mra breakout breakout Bubble Bobble (Japan, Ver 0.1).mra bublbobl 231 jtbubl Bubbles.mra bubbles 218 robotron Bull Fight (315-5056).mra bullfgt 217 segasys1 Bullet (FD1094 317-0041).mra bullet 232 jts16b Burger Time (Set 1).mra btime 229 burgertime Burnin' Rubber.mra brubber 220 burningrubber Cadillacs and Dinosaurs (World 930201).mra dino 217 jtcps15 Calipso.mra calipso 216 scramble Canyon Bomber.mra canyon 220 canyonbomber Capcom Sports Club (Euro 971017).mra csclub 229 jtcps2 Capcom World (Japan).mra cworld 237 jtpang Captain Commando -World 911202-.mra captcomm 217 jtcps1 Carrier Air Wing -World 901012-.mra cawing 217 jtcps1 Catacomb.mra catacomb 217 galaxian Centipede (Rev 3).mra centiped3 218 centipede Centipede (Rev 4).mra centiped 220 centipede Clean Sweep.mra cleansweept 0 galaxian Clowns.mra clowns 218 spaceinvaders Colony 7 (Set 1).mra colony7 216 defender Combat School Joystick.mra combatsc 222 jtcomsc Commando.mra commando 230 jtcommando CoMotion.mra comotion 229 blockade Computer Space.mra n/a 220 computerspace Contra (US - Asia, set 1).mra contra 229 jtcontra Cosmic Alien.mra n/a 219 cosmic Cosmic Avenger.mra cavenger 220 ladybug Cosmo.mra cosmo 226 spaceinvaders Cotton (set 4, World) (FD1094 317-0181a).mra cotton 232 jts16b Crater Raider.mra crater 216 mcr3scroll Crazy Balloon.mra crbaloon 219 crazyballoon Crazy Climber 2 (Japan).mra cclimbr2 240 armedf Crazy Climber.mra cclimber 216 crazyclimber Crazy Kong (Kyoei).mra ckong 224 crazykong Crazy Kong (Orca bootleg).mra ckongo 224 CrazyKong Crazy Kong Part II (Set 1).mra ckongpt2 224 crazykong Crush Roller (Set 2).mra crush2 220 pacman Cyberbots Fullmetal Madness (Euro 950424).mra cybots 229 jtcps2 Dangun Feveron.mra dfeveron 226 cave Dark Planet (no bkg).mra darkplnt 209 scramble Dark Planet.mra darkplnt 209 scramble Darkstalkers The Night Warriors (Euro 940705).mra dstlk 229 jtcps2 Defender (Red Label).mra defender 218 defender Demolition Derby (MCR-3 Mono Board Version).mra demoderm 216 mcr3mono Devil Fish (Galaxian Hardware).mra devilfsg 220 galaxian Dig Dug (Rev 2).mra digdug 220 digdug Dig Dug II (New Ver).mra digdug2 220 druaga Dimahoo (Euro 000121).mra dimahoo 229 jtcps2 Discs of Tron.mra dotron 218 mcr3 DoDonPachi (Arrange).mra ddonpach 226 cave DoDonPachi (Japan).mra ddonpach 226 cave DoDonPachi Trainer (Japan).mra ddonpach 226 cave DoDonPachi.mra ddonpach 226 cave Dokaben (Japan).mra dokaben 237 jtpang Domino Man.mra domino 216 mcr2 Dominos.mra dominos 220 dominos Donkey Kong (Spanish Crazy Kong bootleg).mra ckongdks 224 CrazyKong Donkey Kong (US, Set 1).mra dkong 220 donkeykong Donkey Kong 3 (US).mra dkong3 220 donkeykong3 Donkey Kong Junior (US, Set F-2).mra dkongjr 217 donkeykongjunior DonPachi (Japan).mra donpachi 226 cave DonPachi.mra donpachi 226 cave Dorodon (Set 1).mra dorodon 220 ladybug Dottori-Kun (new).mra dotrikun 225 DottoriKun Dottori-Kun (old).mra dotrikun 225 DottoriKun Dottori-Man Jr.mra dotrikun 225 DottoriKun Double Dragon II - The Revenge.mra ddragon2 223 jtdd2 Double Dragon.mra ddragon 223 jtdd Dream Shopper.mra dremshpr 220 pacman Dungeons &amp; Dragons Shadow over Mystara (Euro 960619).mra ddsom 229 jtcps2 Dungeons &amp; Dragons Tower of Doom (Euro 940412).mra ddtod 229 jtcps2 Dunk Shot (Rev C, FD1089A 317-0022).mra dunkshot 232 jts16b Dynamite Dux (set 3, World) (FD1094 317-0096).mra ddux 232 jts16b Dynasty Wars -USA, B-Board 89624B- -.mra dynwar 217 jtcps1 Eco Fighters (World 931203).mra ecofghtr 229 jtcps2 Eeek! (Pac-Man Conversion).mra eeekkp 220 pacman Eggor.mra eggor 220 pacman ESP Ra.De. (Japan).mra espradej 226 cave ESP Ra.De..mra esprade 226 cave E-Swat - Cyber Police (set 4, World) (FD1094 317-0130).mra eswat 232 jts16b Exed Exes.mra exedexes 232 jtexed Extra Bases.mra ebases 219 astrocade Eyes (US, Set 1).mra eyes 220 pacman F-1 Dream.mra f1dream 217 jtf1dream Fantasy Zone (Rev A, World, S16A) [No Protection].mra fantzone 232 jts16 Fantasy Zone II - The Tears of Opa-Opa (System 16C version).mra fantzn2x 232 jts16b Fantasy Zone II - The Tears of Opa-Opa.mra fantzn2 235 SMS Fast Lane.mra fastlane 237 jtflane Fever SOS.mra dfeveron 226 cave FightingGolf.mra fitegolf 193 Athena Final Fight -World, set 1-.mra ffight 217 jtcps1 Finalizer - Super Transformation (Set 1).mra finalizr 240 Finalizer Finalizer - Super Transformation (Set 2) [bl].mra finalizrb 240 Finalizer Finalizer - Super Transformation (Set 2).mra finalizra 240 Finalizer Flash Point (set 2, Japan) (FD1094 317-0127A).mra fpoint 232 jts16b Flicky (128k Version, 315-5051).mra flicky 217 segasys1 Food Fight (Rev 3).mra foodf 220 foodfight Forgotten Worlds -World, newer-.mra forgottn 217 jtcps1 Frenzy (Rev RA1).mra frenzy 220 frenzy Frogger (Konami Bugfixed).mra frogger 216 scramble Frogger (Sega, Set 2).mra frogger 216 scramble Future Spy.mra futurespy 193 zaxxon Galaga (Midway, Set 1).mra galagamw 229 galaga Galaga 3 (GP3 Rev D).mra galaga3 218 gaplus Galaxian (Namco, Set 1).mra galaxian 220 galaxian Galaxy Wars (Universal, Set 1).mra galxwars 226 spaceinvaders Ganbare! Marine Kun -Japan 2K0411-.mra ganbare 217 jtcps1 Gaplus (GP2 Rev B).mra gaplus 220 gaplus Gauntlet (rev 14).mra gauntlet 225 gauntlet Gauntlet II.mra gaunt2 225 gauntlet Gemini Wing.mra gemini 220 tecmo Ghosts'n Goblins (World Set 1).mra gng 234 jtgng Ghouls'n Ghosts -patched-.mra ghouls 217 jtcps1 Ghouls'n Ghosts -World-.mra ghouls 217 jtcps1 Giga Wing (USA 990222).mra gigawing 229 jtcps2 Golden Axe (set 6, US) (8751 317-123A).mra goldnaxe 232 jts16b3 Gorf (Program 1).mra gorf 219 astrocade Gorf (Speech).mra gorf 219 astrocade Gorf.mra gorf 219 astrocade Gorkans.mra gorkans 220 pacman Gorodki.mra gorodki 229 tiamc1 Gravitar (Ver 3).mra gravitar 218 blackwidow Green Beret.mra gberet 220 rshnatk Grobda (W, New Ver.).mra grobda 229 druaga Gulun.Pa_-_Prototype_1993_-_Japan_931220_L-.mra gulunpa 221 jtcps1 Gun Fight.mra gunfight 226 spaceinvaders Gun Smoke.mra gunsmoke 216 jtgunsmoke Guwange (Special).mra guwange 226 cave Guwange.mra guwange 226 cave Gyruss.mra gyruss 218 Gyruss Hang On Jr.mra hangonjr 235 SMS Heavy Barrel (World).mra hbarrel 232 jtninja Hellfire (2P set).mra hellfire 229 toaplan1 Hippodrome (US).mra hippodrm 232 jtcop Horizon (Irem).mra horizon 221 iremm62 Hustle.mra hustle 229 blockade Hyper Sports.mra hyperspt 237 jtroadf Hyper Street Fighter II The Anniversary Edition (USA 040202).mra hsf2 229 jtcps2 I'm Sorry (US, 315-5110).mra imsorry 217 segasys1 Iron Horse (Ver. K).mra ironhors 224 IronHorse Jackal (W) [bl].mra jackalbl 224 Jackal Jackal (W).mra jackal 224 Jackal Jackal (W, Rotary).mra jackalr 224 Jackal Jailbreak.mra jailbrek 224 Jailbreak Janpai Puzzle Choukou (Japan 010820).mra choko 229 jtcps2 Jin.mra jin 218 defender Journey.mra journey 216 mcr3 Joust 2 - Survival of the Fittest (revision 2).mra joust2 226 joust2 Joust.mra joust 218 robotron Jump Shot.mra jumpshot 220 pacman Jyangokushi Haoh no Saihai (Japan 990527).mra jyangoku 229 jtcps2 Kick.mra kick 216 mcr1 Kicker.mra kicker 237 jtkicker Kick-Man.mra kickman 216 mcr1 Kid Niki - Radical Ninja (W).mra kidniki 221 iremm62 Kid no Hore Hore Daisakusen.mra horekid 240 terracresta King And Balloon (Japan).mra kingballj 216 galaxian King and Balloon (US).mra kingball 216 galaxian Knights of the Round -World 911127-.mra knights 217 jtcps1 Konami's Ping-Pong.mra pingpong 241 jtpinpon Konek Gorbunok.mra konek 229 tiamc1 Kot-Rybolov.mra kot 229 tiamc1 Kozmik Krooz'r.mra kroozr 216 mcr2 Kozure Ookami (Japan).mra kozure 240 armedf Kung-Fu Master (W).mra kungfum 221 iremm62 Lady Bug.mra ladybug 220 ladybug Laguna Racer.mra lagunar 226 spaceinvaders Legendary Wings.mra lwings 217 jtsectionz Legion - Spinner-87 (World ver 2.03).mra legion 240 armedf Lizard Wizard.mra lizwiz 220 pacman Lode Runner (Set 1).mra ldrun 221 iremm62 Lode Runner II - The Bungeling Strikes Back.mra ldrun2 221 iremm62 Lode Runner III - The Golden Labyrinth.mra ldrun3 221 iremm62 Lode Runner IV - Teikoku Karano Dasshutsu (JP).mra ldrun4 221 iremm62 Lost Tomb.mra losttomb 216 scramble Lucky Today.mra luctoday 220 galaxian Lunar Battle (Prototype).mra lunarbat 218 blackwidow Lunar Lander.mra llander 220 lunarlander Lunar Rescue.mra lrescue 226 spaceinvaders Lupin III (Set 2).mra lupin3a 226 spaceinvaders Mad Planets.mra mplanets 198 qbert Magic Sword Heroic Fantasy -World 900725-.mra msword 217 jtcps1 Magical Spot.mra n/a 219 cosmic Manhattan 24 Bunsyo (J).mra manhatan 224 Jailbreak Mappy (US).mra mappy 220 druaga Mario Bros. (US, Rev G).mra mario 220 mariobros Mars Matrix Hyper Solid Shooting (USA 000412).mra mmatrix 229 jtcps2 Mars.mra mars 217 scramble Marvel Super Heroes (Euro 951024).mra msh 229 jtcps2 Marvel Super Heroes Vs. Street Fighter (Euro 970625).mra mshvsf 229 jtcps2 Marvel Vs. Capcom Clash of Super Heroes (Euro 980123).mra mvsc 229 jtcps2 Max RPM (v2).mra maxrpm 217 mcr3mono Mayday (Set 1).mra mayday 218 defender Mega Man The Power Battle -CPS1, USA 951006-.mra megaman 229 jtcps1 Mega Man 2 The Power Fighters (USA 960708).mra megaman2 229 jtcps2 Mega Twins -World 900619-.mra mtwins 217 jtcps1 Megumi Rescue (Japan).mra megrescu 245 SMS Mercs -World 900302-.mra mercs 217 jtcps1 Midnight Resistance (World).mra midres 232 jtmidres Mighty Monkey (Scramble Hardware) [bl].mra mimonscr 209 scramble Mighty! Pang (Euro 001010).mra mpang 229 jtcps2 Mikie.mra mikie 237 jtmikie Minefield.mra minefld 209 scramble Mister Viking (315-5041).mra mrviking 217 segasys1 Moon Cresta (Galaxian Hardware) [bl].mra mooncrgx 220 galaxian Moon Patrol.mra mpatrol 220 moonpatrol Moon War.mra moonwar 216 scramble Motos.mra motos 220 druaga Mr. Do Nightmare.mra mrdonight 220 galaxian Mr. Do! Fixed.mra mrdofix 220 mrdo Mr. Do!.mra mrdo 220 mrdo Mr. Goemon.mra mrgoemon 229 rshnatk Mr. TNT.mra mrtnt 220 pacman Ms. Pac-Man.mra mspacman 220 pacman Muscle Bomber Duo Ultimate Team Battle (World 931206).mra mbombrd 217 jtcps15 MVP (set 2, US) (FD1094 317-0143).mra mvp 232 jts16b MX5000.mra mx5000 237 jtmx5k My Hero (US, not Encrypted).mra myhero 217 segasys1 Mystic Marathon.mra mysticm 222 MysticMarathon Nemo -World 901130-.mra nemo 217 jtcps1 New Rally-X.mra nrallyx 220 rallyx Night Warriors Darkstalkers Revenge (Euro 950316).mra nwarr 229 jtcps2 Ninjakun.mra ninjakun 220 ninjakun Number Crash.mra numcrash 220 pacman Omega [bl].mra omegab 220 galaxian Opa Opa (Rev A, unprotected).mra opaopan 235 SMS Opa Opa.mra opaopa 235 SMS Orbitron.mra orbitron 220 galaxian Out Zone.mra outzone 229 toaplan1 Pac &amp; Pal.mra pacnpal 220 druaga Pac-Man &amp; Chomp Chomp.mra pacnchmp 220 druaga Pac-Man (Midway).mra pacman 218 pacman Pac-Man Club- Club Lambada (AR).mra clubpacm 220 pacman Pac-Man Plus.mra pacplus 220 pacman Pac-Manic Miner.mra n/a 217 pacman Pang (World).mra pang 237 jtpang Pang! 3 -Euro 950601-.mra pang3 217 jtcps1 Passing Shot (World, 2 Players) (FD1094 317-0080).mra passsht 232 jts16b Pengo (Set 1, Rev C).mra pengo 220 pengo Penguin-Kun_Wars.mra pkunwar 221 PenguinKunWars Penguin-Kun_Wars_Japan.mra pkunwarj 221 PenguinKunWars Pest Place.mra pestplce 227 DonkeyKong Phoenix (Amstar, Set 1).mra phoenix 220 phoenix Pickin'.mra pickin 220 bagman Pirate Ship Higemaru.mra higemaru 217 jthige Pisces.mra pisces 220 galaxian Pitfall II.mra pitfall2 216 segasys1 Playball (Prototype).mra playball 218 robotron Pleiads (Centuri).mra pleiadce 220 pleiads Pleiads (Tehkan).mra pleiads 220 phoenix Pleiads.mra pleiads 220 pleiads Pnickies -Japan 940608-.mra pnickj 217 jtcps1 Pokonyan! Balloon -Japan 940322-.mra pokonyan 217 jtcps1 Poly Play 2.mra polyplay2 220 polyplay Poly Play 2c.mra polyplay2 220 polyplay Poly Play.mra polyplay 229 polyplay Pong (Rev E).mra pong pong Ponpoko.mra ponpoko 220 pacman Pooyan.mra pooyan 220 pooyan Popeye (Rev D).mra popeye 219 popeye Power Drive.mra powerdrv 217 mcr3mono Progear (USA 010117).mra progear 229 jtcps2 Puck Man (JP, Set 1).mra puckman 220 pacman Puzz Loop 2 (Euro 010302).mra pzloop2 229 jtcps2 Puzzle Uo Poko (Japan).mra uopoko 226 cave Puzzle Uo Poko.mra uopoko 226 cave Q'bert (US, Set 1).mra qbert 198 qbert QBert Qubes.mra qbertqub 198 qbert Quiz &amp; Dragons Capcom Quiz Game -USA 920701-.mra qad 217 jtcps1 Quiz Nanairo Dreams Nijiirochou no Kiseki (Japan 96086).mra qndream 229 jtcps2 Quiz Tonosama no Yabou 2 Zenkoku-ban -Japan 950123-.mra qtono2j 217 jtcps1 Radar Scope (rev. D).mra radarscp 229 donkeykong Rafflesia (315-5162).mra raflesia 216 segasys1 Rally-X (32k Ver).mra rallyx 220 rallyx Rampage (Rev 3, 860827).mra rampage 217 mcr3mono Rastan (World Rev 1).mra rastan 241 jtrastan Regulus (315-5033, Rev A).mra regulus 216 segasys1 Rescue.mra rescue 209 scramble Riddle of Pythagoras (Japan).mra ridleofp 235 SMS Ring of Destruction Slam Masters II (Euro 940902).mra ringdest 229 jtcps2 Riot City (Japan).mra riotcity 232 jts16b River Patrol (JP, Unprotected).mra rpatroln 220 riverpatrol Road Fighter (set 1).mra roadf 237 jtroadf Robocop (World revision 4).mra robocop 232 jtcop Robotron 2084.mra robotron 218 robotron Rush'n Attack (US).mra rushatck 220 rshnatk Rygar.mra rygar 220 tecmo RyuKyu (Rev A, Japan) (FD1094 317-5023A).mra ryukyu 232 jts16b S.O.S..mra sosterm 229 tiamc1 Sarge.mra sarge 217 mcr3mono Satan's Hollow (Set 1).mra shollow 216 mcr2 Saturday Night Slam Masters (World 930713).mra slammast 217 jtcps15 Scooter Shooter.mra scotrsht 224 ScooterShooter Scramble (Stern, Set 1).mra scramble 216 scramble Sea Wolf (Set 1).mra seawolf 226 spaceinvaders Sea Wolf II.mra seawolf2 219 astrocade Secret Agent (World revision 3).mra secretag 232 jtslyspy SectionZ.mra sectionz 217 jtsectionz Sega Ninja (315-5102).mra seganinj 217 segasys1 Sei Senshi Amatelass.mra amatelas 240 terracresta Shinobi (Set 6, World, S16A) [No Protection].mra shinobi 232 jts16 Shot Rider (B-Board 89624B-1).mra shtrider 216 traverseusa Shuffleboard.mra shuffle 226 spaceinvaders Side Arms - Hyper Dyne (World, 861129).mra sidearms 217 jtsarms Silkworm.mra silkworm 220 tecmo Silver Land.mra silvland 220 silverland Sinistar.mra sinistar 218 robotron Sky Skipper.mra skyskipr 219 popeye Slap Shooter.mra slapshtr 235 SMS Snap Jack.mra snapjack 220 ladybug Snezhnaja Koroleva.mra koroleva 229 tiamc1 Solar Fox.mra solarfox 216 mcr1 Solomon no Kagi (JP).mra solomonj 218 solomonskey Solomon's Key.mra solomon 220 solomonskey Sonic Boom (FD1094 317-0053).mra sonicbom 232 jts16b Space Chaser.mra schaser 226 spaceinvaders Space Encounters.mra spcenctr 226 spaceinvaders Space Invaders (Samples).mra invaders 226 spaceinvaders Space Invaders Part II (Taito, Bigger ROMs).mra invadpt2 226 spaceinvaders Space Invaders.mra invaders 226 spaceinvaders Space Panic.mra n/a 219 cosmic Space Race [TTL].mra spacerace spacerace Space Zap.mra spacezap 219 astrocade Spatter (315-5xxx).mra spatter 217 segasys1 Speed Coin.mra spdcoin 216 scramble Spelunker II - 23 no Kagi (JP).mra spelunk2 221 iremm62 Spelunker.mra spelunkr 221 iremm62 Splat!.mra splat 218 robotron Sprint 1.mra sprint1 216 sprint1 Sprint 2.mra sprint2 220 sprint2 Spy Hunter.mra spyhunt 220 mcr3scroll Squash.mra squaitsa 220 bagman Star Guards.mra stargrds 217 mcr3mono Star Jacker (alt).mra starjacks 216 segasys1 Star Jacker.mra starjack 216 segasys1 Stargate.mra stargate 218 robotron Strategy X.mra stratgyx 217 scramble Street Fighter (US, set 1).mra sf 234 jtsf Street Fighter Alpha 2 (Euro 960229).mra sfa2 229 jtcps2 Street Fighter Alpha 3 (Euro 980904).mra sfa3 229 jtcps2 Street Fighter Alpha Warriors Dreams (Euro 950727).mra sfa 229 jtcps2 Street Fighter II' Champion Edition -World 920513-.mra sf2ce 217 jtcps1 Street Fighter II' Hyper Fighting -World 921209-.mra sf2hf 217 jtcps1 Street Fighter II The World Warrior -World 910522-.mra sf2 217 jtcps1 Street Fighter Zero 2 Alpha (Asia 960826).mra sfz2al 229 jtcps2 Strider -USA, B-Board 89624B-2-.mra strider 217 jtcps1 Subs.mra subs 216 subs Super Bagman.mra sbagman 217 bagman Super Basketball (version I, encrypted).mra sbasketb 237 jtsbask1 Super Breakout (Rev 04).mra sbrkout 220 superbreakout Super Cobra.mra scobra 216 scramble Super Gem Fighter Mini Mix (USA 970904).mra sgemf 229 jtcps2 Super Glob (Pac-Man, German) [bl].mra sprglbpg 220 pacman Super Pac-Man.mra superpac 220 druaga Super Pang (World 900914).mra spang 237 jtpang Super Puzzle Fighter II Turbo (Euro 960529).mra spf2t 229 jtcps2 Super Street Fighter II The New Challengers (World 931005).mra ssf2 229 jtcps2 Super Street Fighter II Turbo (World 940223).mra ssf2t 229 jtcps2 Super Xevious.mra xevious 229 xevious Super Zaxxon.mra szaxxon 193 zaxxon Swat (315-5048).mra swat 217 segasys1 Tapper (Budweiser, 840127).mra tapper 218 mcr3 Tazz-Mania (Set 1).mra tazmania 216 scramble TeddyBoy Blues (315-5115, New Ver).mra teddybb 217 segasys1 Terra Cresta (YM3526 set 1).mra terracre 240 terracresta Terra Force.mra terraf 240 armedf Tetris (Cocktail, Set 1).mra atetrisc 218 ataritetris Tetris (Japan, System E).mra tetrisse 235 SMS Tetris (Set 4, Japan, S16A) [FD1094 317-0093].mra tetris 232 jts16 Tetris.mra atetris 220 ataritetris The Adventures of Robby Roto!.mra robby 219 astrocade The Battle-Road.mra battroad 221 iremm62 The End (bkg).mra theend 220 scramble The End.mra theend 220 scramble The Glob (Pac-Man Hardware).mra theglobp 220 pacman The King of Dragons -World 910805-.mra kod jtcps1 The Punisher (World 930422).mra punisher 217 jtcps15 The Speed Rumbler (set 1).mra srumbler 229 jtrumble The Tower of Druaga.mra todruaga 220 druaga Three Wonders -World 910520-.mra 3wonders 217 jtcps1 Tiger Road.mra tigeroad 217 jttora Timber.mra timber 216 mcr3 Time Pilot '84 (Set 1).mra tp84 224 TimePilot84 Time Pilot '84 (Set 2).mra tp84a 224 TimePilot84 Time Pilot '84 (Set 3).mra tp84b 224 TimePilot84 Time Pilot.mra timeplt 220 timepilot Time Scanner (set 2, System 16B).mra timescan 232 jts16b TNKIII.mra tnk3 193 TNKIII Tokio - Scramble Formation (bootleg).mra tokiob 217 jtbubl Tokushu Butai Jackal (JP).mra jackalj 224 Jackal Top Gunner (US) [bl].mra topgunbl 224 Jackal Top Gunner (US).mra topgunr 224 Jackal Toryumon.mra toryumon 232 jts16b Tough Turf (set 2, Japan) (8751 317-0104).mra tturf 232 jts16b3 Track &amp; Field.mra trackfld 237 jttrack Transformer.mra transfrm 235 SMS Traverse USA- Zippy Race (US).mra travrusa 220 traverseusa Trick Trap (World).mra tricktrp jtlabrun Trojan (Romstar).mra trojanr 217 jttrojan Tron.mra tron 218 mcr2 Truxton - Tatsujin.mra truxton 229 toaplan1 Turbo Tag (Prototype).mra turbotag 220 mcr3scroll Turkey Shoot - The Day They Took Over.mra tshoot 220 TurkeyShoot Turtles.mra turtles 209 scramble Two Tigers (Tron Conversion).mra twotigerc 218 mcr2 U.N. Squadron -USA-.mra unsquad 217 jtcps1 Ultra Tank.mra ultratnk 217 ultratank UniWar S.mra uniwars 220 galaxian Up'n Down.mra upndown 216 segasys1 Vampire Hunter 2 Darkstalkers Revenge (Japan 970929).mra vhunt2 229 jtcps2 Vampire Savior 2 The Lord of Vampire (Japan 970913).mra vsav2 229 jtcps2 Vampire Savior The Lord of Vampire (Euro 970519).mra vsav 229 jtcps2 Van-Van Car.mra vanvan 220 pacman Varth Operation Thunderstorm -World 920714-.mra varth 217 jtcps1 V'Ball (US) [bl].mra vballb 229 vball V'Ball (US).mra vball 229 vball Victory.mra victorycb 220 galaxian Vigilante (World, Rev E).mra vigilant 232 jtvigil Vindicators Part II (rev 3).mra vindctr2 225 gauntlet Vortex.mra vortex 226 spaceinvaders Vulgus.mra vulgus 217 jtvulgus Wacko.mra wacko 216 mcr2 War of the Bugs.mra warofbug 220 galaxian Warriors of Fate (World 921031).mra wof 217 jtcps15 Water Match (315-5064).mra wmatch 217 segasys1 Willow -World-.mra willow 217 jtcps1 Wizard of Wor (Speech).mra wow 219 astrocade Wizard of Wor.mra wow 219 astrocade Wonder Boy (Set 1, 315-5177).mra wboy 217 segasys1 Wonder Boy III - Monster Lair (set 3, World, System 16B) (FD1094 317-0089).mra wb33 232 jts16b Woodpecker (Set 1).mra woodpeck 220 pacman Wrestle War (set 3, World) (8751 317-0103).mra wrestwar 232 jts16b3 Xevious.mra xevious 229 xevious X-Men Children of the Atom (Euro 950331).mra xmcota 229 jtcps2 X-Men Vs. Street Fighter (Euro 961004).mra xmvsf 229 jtcps2 Yie Ar Kung-Fu (program code I).mra yiear 237 jtyiear Youjyuden (JP).mra youjyudn 221 iremm62 zaxxon.mra zaxxon 193 zaxxon Zero Wing (2P set).mra zerowing 229 toaplan1 Zig Zag (Dig Dug Conversion) [bl].mra zigzagb 220 zigzag"},{"location":"developer/porting/","title":"Porting Cores","text":"<p>MiSTer uses quite complex hardware, but thanks to open source, developers with different levels of hardware/software knowledge can develop for this platform. Many cores for MiSTer use common almost identical part of code simplifying access to hardware and firmware called Framework.</p> <p>We will use ZX Spectrum core as an example in this guide.</p>"},{"location":"developer/porting/#framework","title":"Framework","text":"<p>Most of the sources of the Framework are located in sys folder.</p> <p>Usually, for a new project, you need to take following files/folders:</p> <ul> <li>sys folder</li> <li>jtag.cdf</li> <li>jtag_lite.cdf</li> <li>zxspectrum.qpf (project file. Keep it read-only to prevent it from automatic changes whenever you switch between fill and lite versions and spam your change history)</li> <li>zxspectrum.qsf</li> <li>zxspectrum.srf (some warnings ignores)</li> <li>zxspectrum-lite.qsf</li> <li>zxspectrum-lite.srf (some warnings ignores)</li> </ul> <p>You need to make some changes: * Rename zxspectrum. files according to a new project. * Inside files find the \"zxspectrum\" word and replace it with the name of your project. * in .qsf files at the end you will find the list of project files. Remove files not related to your project.</p> <p>The initial set of files for the new project is ready. Now you can open the project in Quartus 17.0 or higher.</p> <p>Assuming you are porting some existing core to MiSTer, the top module entity should be renamed to emu. See zxspectrum.sv and its input/output signals:</p> <p><pre><code>module emu\n(\n    //Master input clock\n    input         CLK_50M,\n\n    //Async reset from top-level module.\n    //Can be used as initial reset.\n    input         RESET,\n\n    //Must be passed to hps_io module\n    inout  [48:0] HPS_BUS,\n\n    //Base video clock. Usually equals to CLK_SYS.\n    output        CLK_VIDEO,\n\n    //Multiple resolutions are supported using different CE_PIXEL rates.\n    //Must be based on CLK_VIDEO\n    output        CE_PIXEL,\n\n    //Video aspect ratio for HDMI. Most retro systems have ratio 4:3.\n    //if VIDEO_ARX[12] or VIDEO_ARY[12] is set then [11:0] contains scaled size instead of aspect ratio.\n    output [12:0] VIDEO_ARX,\n    output [12:0] VIDEO_ARY,\n\n    output  [7:0] VGA_R,\n    output  [7:0] VGA_G,\n    output  [7:0] VGA_B,\n    output        VGA_HS,\n    output        VGA_VS,\n    output        VGA_DE,    // = ~(VBlank | HBlank)\n    output        VGA_F1,\n    output [1:0]  VGA_SL,\n    output        VGA_SCALER, // Force VGA scaler\n\n    input  [11:0] HDMI_WIDTH,\n    input  [11:0] HDMI_HEIGHT,\n    output        HDMI_FREEZE,\n\n    output        LED_USER,  // 1 - ON, 0 - OFF.\n\n    // b[1]: 0 - LED status is system status OR'd with b[0]\n    //       1 - LED status is controled solely by b[0]\n    // hint: supply 2'b00 to let the system control the LED.\n    output  [1:0] LED_POWER,\n    output  [1:0] LED_DISK,\n\n    // I/O board button press simulation (active high)\n    // b[1]: user button\n    // b[0]: osd button\n    output  [1:0] BUTTONS,\n\n    input         CLK_AUDIO, // 24.576 MHz\n    output [15:0] AUDIO_L,\n    output [15:0] AUDIO_R,\n    output        AUDIO_S,   // 1 - signed audio samples, 0 - unsigned\n    output  [1:0] AUDIO_MIX, // 0 - no mix, 1 - 25%, 2 - 50%, 3 - 100% (mono)\n\n    //ADC\n    inout   [3:0] ADC_BUS,\n\n    //SD-SPI\n    output        SD_SCK,\n    output        SD_MOSI,\n    input         SD_MISO,\n    output        SD_CS,\n    input         SD_CD,\n\n    //High latency DDR3 RAM interface\n    //Use for non-critical time purposes\n    output        DDRAM_CLK,\n    input         DDRAM_BUSY,\n    output  [7:0] DDRAM_BURSTCNT,\n    output [28:0] DDRAM_ADDR,\n    input  [63:0] DDRAM_DOUT,\n    input         DDRAM_DOUT_READY,\n    output        DDRAM_RD,\n    output [63:0] DDRAM_DIN,\n    output  [7:0] DDRAM_BE,\n    output        DDRAM_WE,\n\n    //SDRAM interface with lower latency\n    output        SDRAM_CLK,\n    output        SDRAM_CKE,\n    output [12:0] SDRAM_A,\n    output  [1:0] SDRAM_BA,\n    inout  [15:0] SDRAM_DQ,\n    output        SDRAM_DQML,\n    output        SDRAM_DQMH,\n    output        SDRAM_nCS,\n    output        SDRAM_nCAS,\n    output        SDRAM_nRAS,\n    output        SDRAM_nWE,\n\n    // there are more needed signals - see the Template_MiSTer repository\n);\n</code></pre> These signals are main connections to MiSTer. You need to modify your core according to these signals.</p>"},{"location":"developer/porting/#api","title":"API","text":"<p>Most top-level signals should be self-descriptive and more or less familiar to core developers, so I won't go too deep into it. I will describe some important parts where you need to pay attention to make your core work.</p> <pre><code>input   RESET\n</code></pre> <p>This signal is asserted while ARM part is under initial preparation. It can be used as an initial reset. It won't be asserted anymore during the whole work of core except when the user chooses another core from OSD. Then ARM will assert RESET in the existing core to let it stop any possible activity before switching to another core (cores loaded through USB Blaster won't get \"bye-bye\" RESET).</p> <p>If core uses DDR3 memory (Scaler isn't counted) then initial and bye-bye RESET is crucial for correct work. You will get a hard hang if DDR3 is accessed during RESET.</p> <pre><code>inout  [48:0] HPS_BUS\n</code></pre> <p>Pass it as-is to hps_io module.</p> <pre><code>output        CLK_VIDEO,\noutput        CE_PIXEL,\noutput  [12:0] VIDEO_ARX,\noutput  [12:0] VIDEO_ARY,\noutput        VGA_DE,\n</code></pre> <p>Besides other well-known VGA_* signals, these signals are important in MiSTer in order to get a proper display. CLK_VIDEO and CE_PIXEL are used to sample the pixels. If pixel rate equals to CLK_VIDEO, then set CE_PIXEL=1. Many cores have common system clock where pixel frequency is the product of the division of system clock to some number. In this case, set CLK)VIDEO to the system clock and assert CE_PIXEL at clock cycles where a new pixel is produced. Look in zxspectrum.sv to see how it's done.</p> <p>Without CLK_VIDEO, you can still have VGA output, but OSD won't work.</p> <p>VIDEO_ARX and VIDEO_ARY define aspect ratio on HDMI output. It doesn't affect VGA output. Usually VIDEO_ARX=4, VIDEO_ARY=3 or VIDEO_ARX=16, VIDEO_ARY=9. They can have other values but with extreme values, you may have video problems.</p> <p>VGA_DE is another crucial part for MiSTer. Basically, it's opposite to blank signals: <code>~(VBlank | HBlank)</code> but with some notes. HDMI video scaler detects the horizontal resolution by first active video line. So, you need to be sure the first line is not cut due to unaligned VBlank and HBlank signals to each other. Otherwise, you will get a messed HDMI video.</p> <p>VGA_HS and VGA_VS should have positive pulse polarity.</p> <pre><code>output        AUDIO_S\n</code></pre> <p>Make sure you set correct mode signed/unsigned, otherwise audio will be distorted.</p> <p>DDRAM_ are signals of DDR3 memory. If the core can use this memory instead of SDRAM, then it won't require SDRAM board.</p> <p>SDRAM_ are signals of SDR SDRAM memory. The core will require SDRAM board if it uses these signals.</p>"},{"location":"developer/porting/#hps_io","title":"HPS_IO","text":"<p>There is a supplementary module hps_io.v which is also required to use in the same entity (see zxspectrum.sv). It provides in/out control from ARM side. Most signals are same or similar to MiST (user_io+data_io or mist_io modules) signals. So, if the core is ported from MiST, it in most cases it's 1:1 signal connections.</p> <p>MiSTer has some changes/improvements over original MiST io modules:</p> <ul> <li>Supports up to 4 images mount at the same time (MiST has only 1). Set module parameter VDNUM to 2..4 if more than 1 mounted image is required. If VDNUM=1 then related signals are same as in MiST.</li> <li>Due to SD card on MiSTer uses multiple partitions and holds other vital to MiSTer parts, access to whole SD card from cores is not available in MiSTer. Only the access to image files is possible. Cores requiring direct access to whole SD card should be redesigned to access to images only.</li> <li>Main MiSTer file system on SD card is exFAT which supports files bigger than 4GB.</li> <li>OSD supports up to 15 lines (7 lines in MiST) which is handy for many cores.</li> <li>ARM&lt;-&gt;FPGA communication is done through the parallel bus which speeds up the communication. It supports 16bit I/O.</li> </ul> <p>There are some other under the hood improvements in firmware like Keyboard/Mouse/Joystick setup.</p>"},{"location":"developer/principles/","title":"Tips and Guidelines","text":"<p>Here's some tips and guidelines when contributing to the MiSTer project.</p>"},{"location":"developer/principles/#indent-with-tabs-not-spaces","title":"Indent with tabs, not spaces","text":"<p>This may be a controversial subject to some, however there is good reason to indent with tabs instead of spaces in this instance. The project is uploaded to github and spaces are not handled that well by github in terms of diff compares, git blame, formatting, etc... Tabs are more compatible and will be easier for everyone to work with.</p>"},{"location":"developer/principles/#comment-your-code-when-appropriate","title":"Comment your code when appropriate","text":"<p>It may take some extra time, but it saves everyone, including yourself, time in the long run. Make sure to be relatively thorough in commenting your code. For example, a good example of commented code from the Atari7800 core in TIA.sv starting at line 786:</p> <pre><code>module playfield\n(\n    input         clk,     // Master clock\n    input         reset,   // System reset\n    input logic   clkp,    // Pixel Clock\n    input clock_t hclk,    // Horizontal clock phase 2\n    input         reflect, // Control playfield, 1 makes right half mirror image\n    input         cnt,     // center signal, high means right half\n    input         rhb,     // Reset HBlank signal\n    input [19:0]  pfc,     // Combined playfield registers\n    output logic  pf       // Playfield graphics\n);\n</code></pre> <p>When instantiating this module, this dev added a comment to the end of all of her Inputs and Outputs. One shouldn't assume everyone else knows that <code>hclk</code> is <code>Horizontal clock phase 2</code> even if the name makes sense to yourself. Other good examples of good comments are separating sections of assignments or port instantiations by category, or explaining the \"Why\" behind a particularly unintuitive section of code.</p> <p>However there is such a thing as commenting your code too much. This should also be avoided. Here is an example:</p> <pre><code>// The 16-bit Color Look Up Table\nwire [7:0] color_lut[16] = '{\n    8'd0,   8'd27,  8'd49,  8'd71,\n    8'd87,  8'd103, 8'd119, 8'd130,\n    8'd146, 8'd157, 8'd174, 8'd190,\n    8'd206, 8'd228, 8'd255, 8'd255\n\nwire TRANSP_DETECT; // Transparency Detection\n};\n</code></pre> <p>It's obvious that this is a color look up table because the wire is named <code>color_lut</code> so that doesn't need to be described. It's obvious that <code>TRANSP_DETECT</code> is for transparency detection. </p> <p>For an extreme and deliberately funny example:</p> <pre><code>//////////////////////////////////\n/// ~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\n///  REGION PRIORITY HANDLING  ///\n/// ~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\n//////////////////////////////////\ncase(status[28:27]) // Status Bits 27 through 28 \n// Region priority is in CONF_STR section at line 256 of this file\n// If line 256 is no longer valid then here is a reference to what it says:\n// \"D2ORS,Priority,US&gt;EU&gt;JP,EU&gt;US&gt;JP,US&gt;JP&gt;EU,JP&gt;US&gt;EU;\",\n// O = Option, R and S are the status bits.\n// 2 status bits means there are 4 combinations of options\n// Case statements for this begin with 0 and end in 3\n// Since there were two switches and 4 options as explained above you can treat 0-3 as 1-4 if you'd like\n// First Case Statement (0 is actually the first one)\n    0: if(hdr_u) region_req &lt;= 1; // NTSC-U Region\n        else if(hdr_e) region_req &lt;= 2; // PAL Region\n        else if(hdr_j) region_req &lt;= 0; // NTSC-J Region\n        else region_req &lt;= 1; // Set to NTSC-U if there is no region in the header\n// Second Case Statement (1 is actually the second one)\n    1: if(hdr_e) region_req &lt;= 2; // PAL Region\n        else if(hdr_u) region_req &lt;= 1; // NTSC-U Region\n        else if(hdr_j) region_req &lt;= 0; // NTSC-J Region\n        else region_req &lt;= 2; // Set to PAL if there is no region in the header\n// Third Case Statement (2 is actually the third one)\n    2: if(hdr_u) region_req &lt;= 1; // NTSC-U Region\n        else if(hdr_j) region_req &lt;= 0; // NTSC-J Region\n        else if(hdr_e) region_req &lt;= 2; // PAL Region\n        else region_req &lt;= 1; // Set to NTSC-U if there is region in the header\n// Fourth Case Statement (3 is actually the fourth one)\n    3: if(hdr_j) region_req &lt;= 0; // NTSC-J Region\n        else if(hdr_u) region_req &lt;= 1; // NTSC-U Region\n        else if(hdr_e) region_req &lt;= 2; // PAL Region\n        else region_req &lt;= 0;  // Set to NTSC-U if there is region in the header\nendcase // End of the case statement\n// Okay I can put things that aren't in the case statement down here\n//////////////////////////////////////////////\n/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\n/// END REGION OF REGION PRIORITY HANDLING ///\n/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\n//////////////////////////////////////////////\n</code></pre> <p>Please don't do things like this.</p>"},{"location":"developer/principles/#align-ends-assignments-and-proper-indentation","title":"Align ends, assignments, and proper indentation","text":"<p>Try to keep similar elements in our code aligned for readability purposes, for example, in the EEPROM_24C0x.sv file from NES_MiSTer, this:</p> <pre><code>// savestate\nassign SS_MAP1_BACK[ 2: 0] = (state == STATE_STANDBY)  ? 3'd0 :\n                             (state == STATE_TEST)     ? 3'd1 :\n                             (state == STATE_ADDRESS)  ? 3'd2 :\n                             (state == STATE_WRITE)    ? 3'd3 :\n                                                         3'd4;\n</code></pre> <p>...is a lot easier to read than this:</p> <pre><code>assign SS_MAP1_BACK[ 2: 0] = (state == STATE_STANDBY) ? 3'd0 : (state == STATE_TEST) ? 3'd1 : (state == STATE_ADDRESS) ? 3'd2 : (state == STATE_WRITE) ? 3'd3 : 3'd4;\n</code></pre> <p>Sure, they both do the same thing, but it was much easier to parse what each thing did quickly. SystemVerilog is not a strongly typed language with regards to indentations, so you won't get compilation errors if you fail to indent your ends accurately. But we should indent them appropriately anyways. </p> <p>Another example:</p> <pre><code>always @(posedge clk) begin\n    if (rst)\n        q &lt;=0;\n    else\n        if (d)\n            q &lt;= ~q;\n        else\n            q &lt;= q;\nend\n</code></pre> <p>is much easier to read than:</p> <pre><code>always @(posedge clk) begin\nif (rst)\nq &lt;=0;\nelse\nif (d)\nq &lt;= ~q;\nelse\nq &lt;= q;\nend\n</code></pre> <p>Both will succesfully compile and be functionally identical, but it takes a little longer for our mind to parse on first glance. Aligning comments at the end of a line is also helpful in improving readability as shown in the <code>playfield</code> module example near the top of this page.</p>"},{"location":"developer/principles/#naming-things-to-be-easily-understood","title":"Naming things to be easily understood","text":"<p>In EEPROM_STM95 in the Genesis core, this module's port instantiation uses <code>_n</code> to signify that the signal is \"active low\":</p> <pre><code>module STM95XXX\n(\n    //...\n    input         hold_n,        // Hold (active low)\n    input         cs_n,          // Chip Select (active low)\n    input         wp_n,          // Write Protect (active low)\n    //...\n);\n</code></pre> <p>It's also commented, but now you know after reading this that anytime a signal with <code>_n</code> is used, that is an active low signal, it doesn't need to be described as active low in a comment each time it is used from then on.</p>"},{"location":"developer/principles/#if-you-run-out-of-dsp-or-logic-space-accidentally","title":"If you run out of DSP or Logic space accidentally","text":"<p>If you run out of space in compilation, you might be accidentally implying your code to be put into DSP, which is very limited. You can specify that the compiler use logic instead by using the multstyle:</p> <pre><code>(* multstyle = \"logic\" *) module myModule (\n    input clk\n)\n</code></pre> <p>This will force this module into logic space instead of it ever using DSP or block ram. Also you can force a module into DSP the same way with <code>(* multstyle = \"dsp\" *)</code>. The <code>multstyle</code> attribute can be used for Module declarations, variable declarations, and binary expressions.</p>"},{"location":"developer/savestates/","title":"Savestates","text":"<p>In order to facilitate the dynamic saving and loading of savestates, MiSTer defines a special API specifically for fast restore and resume. Enabling the savestate functionality on your core reserves a developer-specified section of DDR3 memory, which is used for fast savestate reads/writes. It does NOT provide any functionality for the actual saving/loading of all registers and memories in your project.</p> <p>NOTE: MiSTer is currently limited in the firmware to precisely four savestate slots. You cannot add more slots using this API.</p>"},{"location":"developer/savestates/#setup","title":"Setup","text":"<p>As specified in the Core Configuration String, a core name definition can be followed by <code>SS{base addr}:{savestate size}</code>, which declares the core as using savestates. In practice, it would look something like this: <code>MyCore;SS3E000000:1000;</code>. This declares the savestates will begin at <code>0x3E00_0000</code>, and each one will be allocated <code>0x1000</code> bytes. Note that the actual size on disk for the savestate does not have to match this allocated size; it just must be less than or equal to it. You probably want to choose this value to be a nice power of two, so that savestate slots 1-3 start at nice addresses.</p> <p>NOTE: Most of the DDR controllers in various MiSTer projects hardcode the addresses to be in the <code>0x3000_0000</code> range, to give ample room to the MiSTer framework and CPU.</p>"},{"location":"developer/savestates/#usage","title":"Usage","text":"<p>The first 64 bit word of each savestate block (so <code>0x0</code>, <code>0x1000</code>, <code>0x2000</code>, etc. from our example) contains two 32 bit values. The lowest 32 bits (<code>[31:0]</code>) act as a change detector. The higher 32 bits (<code>[63:32]</code>) store the size of the savestate.</p>"},{"location":"developer/savestates/#change-detector","title":"Change Detector","text":"<p>The change detector notifies the MiSTer firmware that a savestate has been updated, and thus must be saved to disk. Saves are performed rather quickly after the write occurs, and do not require opening of the OSD, as block device saves do. While this value is persisted to disk as a part of the savestate writing process, it is not read again, and will be reset to <code>0xFFFF_FFFF</code> on restarting the core or loading a new ROM.</p>"},{"location":"developer/savestates/#savestate-size","title":"Savestate Size","text":"<p>The savestate size word defines the number of 32 bit words that should be read for the savestate, not including the initial 64 bit control word. For example, to fetch 64 bytes, you would want to set this value to <code>64 / 4 = 16</code>. This value can vary between each of the 4 savestate slots if you so desire, as it is independant per slot.</p> <p>On core launch, slots that are occupied will have the size word set, in addition to actually representing the current file contents. Empty slots will be initialized to 0.</p>"},{"location":"developer/savestates/#actual-data","title":"Actual Data","text":"<p>After the initial 64 bits of control data, the remaining address space up until the <code>savestate size</code> defined in <code>CONF_STR</code> is available to use as you will. You can read and write to this entire space as you'd like, and data will be persisted only on a change to the first word, according to the configured control size. This space is only initialized when there is a savestate file in that slot, and otherwise will contain random data. Remember that only the data denoted by the savestate size word will be persisted.</p>"},{"location":"developer/savestates/#data-on-disk","title":"Data on Disk","text":"<p>The file persisted to disk will be of size <code>savestate size control value + 2</code> in 32 bit words, that is, the size of the actual savestate contents, and an extra 64 bits for the control data at the start of the block.</p>"},{"location":"developer/snippets/","title":"Useful Snippets","text":"<p>Here are some useful snippets of hdl as used throughout the MiSTer project with sources linked for reference.</p>"},{"location":"developer/snippets/#simple-pixel-clock-divider-using-clock-enable-generator","title":"Simple Pixel Clock Divider Using Clock Enable Generator","text":"<p>In any MiSTer core you develop you will need to attach a pixel clock to the <code>CE_PIXEL</code> signal. It's common to divide your video clock by either 4 or 8, it really depends on the core. For simple division like this it is generally best practice to use a clock enable generator, as shown in the Tropical Angel core.</p> <pre><code>reg ce_pix;\nalways @(posedge clk_vid) begin // Divide video clock by 8\n    reg [2:0] div;\n    div &lt;= div + 1'd1;\n    ce_pix &lt;= !div;\nend\n\nassign CE_PIXEL = ce_pix;\n</code></pre> <p>Adjust this simple clock enable generator's <code>div</code> register width to increase the division factor. <code>[2:0]</code> divides by 8 because 3 bits counts from 0-7, etc...</p>"},{"location":"developer/snippets/#fractional-clock-enable-generator","title":"Fractional Clock Enable Generator","text":"<p>For clock division generators that do not divide evenly in 2, 4, 8, 16, etc... You may need a more complicated scheme. You could use a module like CEGen.vhd from the MegaDrive core and then you would instantiate it using the parameters in a similar way:</p> <pre><code>wire ce_flt;\nCEGen fltce\n(\n    .CLK(clk),\n    .RST_N(~reset),\n\n    .IN_CLK(53693175),\n    .OUT_CLK(7056000),\n\n    .CE(ce_flt)\n);\n</code></pre> <p>What this essentially does is take in a 53.693175MHz clock and output a clock enable register that is oscillating at approximately 7.056MHz, on average. Since 7.056MHz doesn't divide evenly into the input clock's frequency, we had to use a fractional clock division which is usually not suggested. Be careful when doing this because it is not a 50% duty cycle, so it should only be used in instances where you know it won't give you a bad result. In this case it was used for audio filtering, so it was not an issue.</p>"},{"location":"developer/snippets/#reading-stream-of-a-rom","title":"Reading Stream Of A ROM","text":"<p>You can read the stream of data from the ROM you load and have conditionals trigger as a result. Here's a snippet from the SMS core that was done to switch behavior when a specific version of a ROM is detected:</p> <pre><code>reg  ysj_quirk = 0;\n\nalways @(posedge clk_sys) begin\n    reg [31:0] cart_id;\n    reg old_download;\n    old_download &lt;= cart_download;\n\n    if(~old_download &amp;&amp; cart_download) {ysj_quirk} &lt;= 0;\n\n    if(ioctl_wr &amp; cart_download) begin\n        if(ioctl_addr == 'h7ffc) cart_id[31:24] &lt;= ioctl_dout[7:0];\n        if(ioctl_addr == 'h7ffd) cart_id[23:16] &lt;= ioctl_dout[7:0];\n        if(ioctl_addr == 'h7ffe) cart_id[15:08] &lt;= ioctl_dout[7:0];\n        if(ioctl_addr == 'h7fff) cart_id[07:00] &lt;= ioctl_dout[7:0];\n        if(ioctl_addr == 'h8000) begin\n            if(cart_id == 32'h13_70_01_4F) ysj_quirk &lt;= 1; // Ys (Japan) Graphics Fix, forces VDP Version 1\n        end\n    end\nend\n</code></pre> <p>As the ROM is loaded, when it gets to the certain byte offset (the check for a certain <code>ioctl_addr</code>), it will then start loading in the data into <code>cart_id</code> one byte at a time. When it gets past the point where I don't want to detect anymore, it then checks to see if <code>cart_id</code> matches the hex value I'm looking for. If your core needs special quirks for specific mappers and there are no typical detection schemes (like NES mappers that are added to ROMs), this can be a good way to adjust behavior to match how original hardware would behave given other unique identifiers within the ROM.</p>"},{"location":"developer/snippets/#analog-joystick-combinatorial-block-with-deadzones","title":"Analog Joystick Combinatorial Block with Deadzones","text":"<p>Analog Joysticks like on the Sony DualSense controller are supported on MiSTer. If you have a specific control scheme you want to handle with Analog joysticks, you can specify this like the Inferno core.</p> <pre><code>hps_io #(.CONF_STR(CONF_STR)) hps_io\n(\n    //skip\n    .joystick_l_analog_0(joystick_l_analog_0),\n    .joystick_l_analog_1(joystick_l_analog_1),\n    .joystick_r_analog_0(joystick_r_analog_0),\n    .joystick_r_analog_1(joystick_r_analog_1)\n);\n//skip\nlogic [3:0] joyal_1, joyal_2, joyar_1, joyar_2;\n\nalways_comb begin\n        joyal_1[3] = ($signed(joystick_l_analog_0[15:8]) &lt; -20); // Up\n        joyal_1[2] = ($signed(joystick_l_analog_0[15:8]) &gt;  20); // Down\n        joyal_1[1] = ($signed(joystick_l_analog_0[ 7:0]) &lt; -20); // Left\n        joyal_1[0] = ($signed(joystick_l_analog_0[ 7:0]) &gt;  20); // Right\n\n        joyar_1[3] = ($signed(joystick_r_analog_0[15:8]) &lt; -20);\n        joyar_1[2] = ($signed(joystick_r_analog_0[15:8]) &gt;  20);\n        joyar_1[1] = ($signed(joystick_r_analog_0[ 7:0]) &lt; -20);\n        joyar_1[0] = ($signed(joystick_r_analog_0[ 7:0]) &gt;  20);\n\n        joyal_2[3] = ($signed(joystick_l_analog_1[15:8]) &lt; -20);\n        joyal_2[2] = ($signed(joystick_l_analog_1[15:8]) &gt;  20);\n        joyal_2[1] = ($signed(joystick_l_analog_1[ 7:0]) &lt; -20);\n        joyal_2[0] = ($signed(joystick_l_analog_1[ 7:0]) &gt;  20);\n\n        joyar_2[3] = ($signed(joystick_r_analog_1[15:8]) &lt; -20);\n        joyar_2[2] = ($signed(joystick_r_analog_1[15:8]) &gt;  20);\n        joyar_2[1] = ($signed(joystick_r_analog_1[ 7:0]) &lt; -20);\n        joyar_2[0] = ($signed(joystick_r_analog_1[ 7:0]) &gt;  20);\nend\n</code></pre> <p>If the dead zone is incorrect to your feel, you can adjust the + or - integer value at the end of each.</p>"},{"location":"developer/video_freak/","title":"sys - video_freak","text":"<p>Video Freak is used to crop and scale the image.</p> <p>Video Freak will take in the original VGA_DE_IN and output a new VGA_DE and VIDEO_ARX/VIDEO_ARY using the cropping parameters.</p> <pre><code>module video_freak\n(\n    input             CLK_VIDEO,\n    input             CE_PIXEL,\n    input             VGA_VS,\n    input      [11:0] HDMI_WIDTH,\n    input      [11:0] HDMI_HEIGHT,\n    output            VGA_DE,\n    output reg [12:0] VIDEO_ARX,\n    output reg [12:0] VIDEO_ARY,\n\n    input             VGA_DE_IN,\n    input      [11:0] ARX,\n    input      [11:0] ARY,\n    input      [11:0] CROP_SIZE,\n    input       [4:0] CROP_OFF, // -16...+15\n    input       [2:0] SCALE     //0 - normal, 1 - V-integer, 2 - HV-Integer-, 3 - HV-Integer+, 4 - HV-Integer\n);\n</code></pre>"},{"location":"developer/video_mixer/","title":"sys - video_mixer","text":"<p>Video Mixer is used as a helper to provide a lot of the nice videos that the MiSTer framework supplies. This includes scandoubling, gamma, hq2x scaling, and freezing.</p>"},{"location":"developer/video_mixer/#instantiating-video_mixer","title":"Instantiating video_mixer","text":"<p>The module has a few parameters that are used to set it up.</p> <ul> <li><code>LINE_LENGTH</code></li> <li><code>HALF_DEPTH</code></li> <li><code>GAMMA</code></li> </ul> <pre><code>module video_mixer\n#(\n    parameter LINE_LENGTH  = 768,\n    parameter HALF_DEPTH   = 0,\n    parameter GAMMA        = 0\n)\n(\n    input            CLK_VIDEO, // should be multiple by (ce_pix*4)\n    output reg       CE_PIXEL,  // output pixel clock enable\n\n    input            ce_pix,    // input pixel clock or clock_enable\n\n    input            scandoubler,\n    input            hq2x,      // high quality 2x scaling\n\n    inout     [21:0] gamma_bus,\n\n    // color\n    input [DWIDTH:0] R,\n    input [DWIDTH:0] G,\n    input [DWIDTH:0] B,\n\n    // Positive pulses.\n    input            HSync,\n    input            VSync,\n    input            HBlank,\n    input            VBlank,\n\n    // Freeze engine\n    // HDMI: displays last frame \n    // VGA:  black screen with HSync and VSync\n    input            HDMI_FREEZE,\n    output           freeze_sync,\n\n    // video output signals\n    output reg [7:0] VGA_R,\n    output reg [7:0] VGA_G,\n    output reg [7:0] VGA_B,\n    output reg       VGA_VS,\n    output reg       VGA_HS,\n    output reg       VGA_DE\n);\n</code></pre>"},{"location":"setup/controller/","title":"Define Your Gamepad","text":"<p>Now we should define some gamepad inputs on our MiSTer. This is pretty easy to do. You should use a keyboard and your gamepad/controller for this step. For each different kind of controller you have, you should do this step, and the MiSTer will store a configuration based on that device's unique ID.</p>"},{"location":"setup/controller/#defining-your-gamepads-buttons","title":"Defining your Gamepad's Buttons","text":"<p>Go to the second menu in the On Screen Display, this is where you went to previously when running the Downloader or WiFi scripts. There is another option here, \"Define joystick buttons\". Select this option to configure your buttons on your gamepad:</p> <p></p> <p>It will guide you through the process of detecting your general controller type by asking you to press a few d-pad buttons and maybe the analog sticks. </p> <p>Then it will ask you to assign some buttons:</p> <ul> <li>Four face buttons and two shoulder buttons</li> <li>Start and Select</li> <li>OSD button or 2-button combo (to use instead of F12 on the keyboard)</li> <li>A few extra buttons for advanced functions</li> </ul> <p>Skip any buttons you don't want to assign (there may be a lot of them) with the Space on the keyboard or the User button on your MiSTer. If you accidentally assign the wrong button, don't worry, just define it all over again from the start.</p> <p>If you press Enter to \"Finish\" too early, you might miss the Analog Joystick configuration step which is important if you have analog joysticks.</p> <p>Here is a picture to give you an idea of what the buttons it is asking you to press may represent:</p> <p></p> <p>The L on the bottom left is referring to an analog joystick. Your controller may or may not have this. If it does, the step to define the analogy joystick's input is at the end, so your joystick will not work unless you go through the entire list of inputs to define.</p> <p>Another important button is the OSD button. Many modern controllers have a \"Home\" button, it's probably best to assign this to the OSD/Menu. If you do not assign anything to home, the only way to access the menu will be to use the F12 key on a keyboard.</p>"},{"location":"setup/controller/#define-gamepad-inputsbuttons-example-video","title":"Define Gamepad Inputs/Buttons Example Video","text":""},{"location":"setup/games/","title":"Transferring Games","text":"<p>To play games on the MiSTer you will need to transfer them to your MicroSD. There are other ways to load games, like over a NAS or using USB drive, but for now we're going to stick to the most basic easy method. If you'd like more information on these other methods you can head to the Advanced Networking Page of this site, to find out more.</p>"},{"location":"setup/games/#games-folder-description","title":"Games folder description","text":"<p>The <code>/games/</code> folder is where ROMs are stored. <code>/games/NES</code> is where you would place NES ROMs, for instance. Each MiSTer core looks to a specific folder for these ROMs so it is best to put them in the right place.</p>"},{"location":"setup/games/#transfer-roms-over-the-network-with-sambasmb","title":"Transfer ROMs over the Network with Samba/SMB","text":"<p>The MiSTer comes setup with a Samba server already, it just needs to be activated. This means you can connect to it like any other shared folder on the network. It's pretty easy. </p> <p>First we need to enable the Samba service:</p> <ol> <li>Enter the terminal/command line of the MiSTer by press <code>F9</code> on your keyboard and type <code>root</code> for the username, press enter, and type <code>1</code> for the password and press enter.</li> <li>Rename <code>/media/fat/linux/_samba.sh</code> to <code>/media/fat/linux/samba.sh</code> in the terminal/console on the MiSTer by running the following command: <pre><code>mv /media/fat/linux/_samba.sh /media/fat/linux/samba.sh\n</code></pre></li> <li>Reboot the MiSTer</li> <li>If you are using Windows, all you need to do is type <code>\\\\MiSTer\\sdcard\\</code> in the address bar at the top of the File Explorer and press enter. You can do the same in Linux or on MacOS depending on how you access network shares on those systems the same way.</li> </ol> <p></p> <p>In this case I'm going to transfer some ROMs to the <code>/games/NES/</code> folder so I can use them with the NES core.</p> <p></p>"},{"location":"setup/games/#transfer-roms-to-the-microsd-directly","title":"Transfer ROMs to the MicroSD directly","text":"<p>You can also turn off the MiSTer, remove the MicroSD and plug it into your computer to transfer roms. It will have an exFAT formatted partition named \"MiSTer\" that most operating systems can work with.</p> <p>After this is done you can proceed to the next step since we are going to Play a Game.</p>"},{"location":"setup/games/#notes-about-file-formats","title":"Notes about File Formats","text":"<p>CD images for any cores that use CD's must either be in CUE/BIN or CHD. It is best to place CD images into their own separate folders and it is adviced to place multi-disc games's into the same folder (e.g. <code>Final Fantasy VII Discs 1-3</code> in the same <code>Final Fantasy VII</code> folder), since you can then change discs without resetting the core, and your save files will load from disc to disc (in the case of the PSX core).</p> <p>CD images can't be placed in zip archives. They are handled differently from other game ROMs.</p> <p>For more CD image information check CD-based ROMs</p> <p>VHD (virtual hard drive) files are the same, they must not be zipped.</p> <p>All other ROMs can be placed in zip folders/archives and accessed. The core will tell you which file extensions are accepted. If you have an issue with a ROM loading, the readme for that core that is available on GitHub or in the <code>/games/$CORE/</code> folder should tell you what kinds of files work with that core.</p>"},{"location":"setup/play/","title":"Play a Game","text":"<p>Next all we need to do is load the core for the system we want to play. In our case it is the NES core. Just select Console then NES and hit enter or the button you assigned \"A\" on the controller earlier. The core will load. You may need to press the Menu button you assigned earlier or F12 on the keyboard to bring the menu up. Once your menu is up, select Load ROM and load your game.</p> <p>Once the game loads, you will want to turn on Autosave if your game saves. Basically, the MiSTer has to be told when to save your game. Let's say you save your progress in Final Fantasy for the NES, each time you do this, you need to open the On Screen Display to tell it to save. The autosave setting makes it so all you have to do is open the menu, so it's a good idea to turn it on so you don't forget.</p> <p>Anytime you change a core setting in the menu that you want to keep, you need to save that setting. So since we always want autosave to be on, after turning it on we just switch to the secondary OSD menu (by pressing right on the controller) and select \"Save Settings\". It's that easy.</p> <p>Here's a short video showing you how to load a core, load the game, and turn on autosave.</p> <p> </p> <p>That's it! It wasn't so bad, you made it through the tutorial. Please be sure to check out all the other sections of this documentation, there are some valuable options to configure, tips and tricks to learn, that will make your experience much better.</p>"},{"location":"setup/requirements/","title":"Requirements","text":"<p>There are a few things you will need in order to setup your MiSTer:</p> <ul> <li>Terasic DE10-Nano</li> <li>MiSTer SDRAM Add-On Board (Optional but many cores require it)</li> <li>Cooling for the FPGA (recommended)</li> <li>MicroSD card (minimum 4GB) and MicroSD Card Reader</li> <li>USB OTG Adapter or MiSTer USB Hub Add-On Board (no USB devices will work without this)</li> <li>USB Keyboard</li> <li>USB Gamepad (recommended)</li> <li>Internet connection</li> <li>HDMI Display and HDMI Cable</li> </ul>"},{"location":"setup/requirements/#where-to-buy","title":"Where to buy","text":"<p>DE10-Nano:</p> <ul> <li>Terasic</li> <li>Digikey</li> <li>Mouser</li> </ul> <p>SDRAM:</p> <p>The MiSTer SDRAM add-on board is required by many cores, like the SNES, NES, Playstation, and Game Boy cores. There are multiple sellers out there which sell these, and you can also assemble it yourself if you are skilled at soldering.</p> <p>USB OTG Adapter/Hub:</p> <p>Preferably, the MiSTer USB Hub Add-on board which you can assemble yourself if you are good at soldering, or you can buy from the various shops that sell them instead.</p> <p>At a minimum, the MakerSpot Micro USB OTG Hub works very well for the MiSTer, if you are looking for a very cheap option.</p> <p>Cooling:</p> <p>The processor on the DE10-Nano is 21.5mm x 21.5mm so a heatsink that is around this size is suitable. If using one larger than these dimensions, please make sure to to not let the heatsink touch other electronic components outside the processor.</p> <p>There is no mounting mechanism for the heatsink, you will need to use an \"adhesive thermal pad\". 3M makes some good ones, and the heatsinks you can buy in this size usually come with these kinds of thermal pads already.</p> <p>Do not apply a lot of pressure and do not touch the components directly with your fingers, as static shock can damage them.</p>"},{"location":"setup/software/","title":"Setup MicroSD Card","text":"<p>First thing to do is to install the software onto your MicroSD card.</p>"},{"location":"setup/software/#flash-mr-fusion-to-your-microsd","title":"Flash Mr. Fusion to your MicroSD","text":"<p>Mr. Fusion provides a compact image that you can download and flash onto an SD card of any size with a tool like  balenaEtcher, Win32 Disk Imager, Apple Pi Baker, or even dd.</p> <p>We're going to use balenaEtcher for this guide. We install balenaEtcher by downloading the latest release for our computer and installing it. </p> <p>Next we're going to download the latest release of Mr. Fusion:</p> <p></p> <p>Next, we will insert our MicroSD card into our computer and then open balenaEtcher. We will select \"Flash from file\" and navigate to the Mr Fusion file we downloaded a step earlier.</p> <p></p> <p>Then we need to select our MicroSD card as the target to flash.</p> <p> </p> <p>And click \"Flash!\"</p> <p></p> <p>Wait for it to complete successfully.</p> <p></p> <p>If you see \"Flash complete!\" and \"1 Successful target\" then everything worked fine. If the flash fails, try and flash it again or flash a different MicroSD card in case the one you are using is malfunctioning.</p> <p>We can now close balenaEtcher and remove our MicroSD card.</p>"},{"location":"setup/software/#boot-the-de10-nano-with-mr-fusion","title":"Boot the DE10-Nano with Mr. Fusion","text":"<p>Next we just need to carefully insert our MicroSD card into the DE10-Nano (NOT the MicroSD slot on the IO board on top!).</p> <p></p> <p>Now turn on your DE10-Nano.</p> <p>We will wait up to a few minutes for the Mr. Fusion installer to complete. Be patient, or else you may have to start all over again. </p> <p></p> <p>When the MiSTer On Screen Display with fuzzy static behind it appears, that means you have successfully installed the MiSTer software/OS onto your MicroSD. </p> <p></p> <p>Check out the next tutorials in the side bar!</p>"},{"location":"setup/updater/","title":"Running the Updater","text":"<p>We need to update the MiSTer the first time you get it setup. This is because the MiSTer currently only has a script to update it, no cores, no arcade files, and it's system files may be outdated. If you don't have a wired internet connection to your MiSTer, please remove your microSD and place the WiFi script into the <code>scripts</code> folder, and then follow the instructions in the WiFi tutorial.</p>"},{"location":"setup/updater/#running-downloadersh-updatesh","title":"Running Downloader.sh / Update.sh","text":"<p>Now that your MiSTer is connected to either a wired internet connection or a WiFi connection, you should run an update. This may take awhile the first time, but each time you run the updater after that it will take a lot less time. It's important to update your MiSTer regularly as the framework, cores, and software is updated frequently with bug fixes, features, and new cores.</p> <p>It's very easy to run Downloader.sh, just navigate to the scripts selection in the On Screen Display (osd) in the Menu core by pressing F12, select it, and go to the <code>downloader</code> script and select it. See video below for an example of the downloader script running:</p> <p> </p>"}]}